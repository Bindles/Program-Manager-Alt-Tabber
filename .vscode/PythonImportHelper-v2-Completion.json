[
    {
        "label": "keyboard",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "keyboard",
        "description": "keyboard",
        "detail": "keyboard",
        "documentation": {}
    },
    {
        "label": "win32gui",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "win32gui",
        "description": "win32gui",
        "detail": "win32gui",
        "documentation": {}
    },
    {
        "label": "win32con",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "win32con",
        "description": "win32con",
        "detail": "win32con",
        "documentation": {}
    },
    {
        "label": "win32api",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "win32api",
        "description": "win32api",
        "detail": "win32api",
        "documentation": {}
    },
    {
        "label": "win32process",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "win32process",
        "description": "win32process",
        "detail": "win32process",
        "documentation": {}
    },
    {
        "label": "psutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psutil",
        "description": "psutil",
        "detail": "psutil",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTextEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTextEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QTextEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QDialog",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFormLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QGridLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QMainWindow",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "PyQt5.QtCore",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QEvent",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSlot",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QEvent",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "pyqtSlot",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "QObject",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "QKeySequence",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QKeySequence",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "QKeySequence",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ctypes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ctypes",
        "description": "ctypes",
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "windll",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "windll",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "configparser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "configparser",
        "description": "configparser",
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "setproctitle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "setproctitle",
        "description": "setproctitle",
        "detail": "setproctitle",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "path",
        "description": "path",
        "detail": "path",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "url",
        "description": "url",
        "detail": "url",
        "documentation": {}
    },
    {
        "label": "TelemetryReporter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "TelemetryReporter",
        "description": "TelemetryReporter",
        "detail": "TelemetryReporter",
        "documentation": {}
    },
    {
        "label": "tuples",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tuples",
        "description": "tuples",
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "tuples_lesson_3_gsave_finished:",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tuples_lesson_3_gsave_finished:",
        "description": "tuples_lesson_3_gsave_finished:",
        "detail": "tuples_lesson_3_gsave_finished:",
        "documentation": {}
    },
    {
        "label": "tuples_enhance_14.py:",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tuples_enhance_14.py:",
        "description": "tuples_enhance_14.py:",
        "detail": "tuples_enhance_14.py:",
        "documentation": {}
    },
    {
        "label": "RewindUltra",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "RewindUltra",
        "description": "RewindUltra",
        "detail": "RewindUltra",
        "documentation": {}
    },
    {
        "label": "macros",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "macros",
        "description": "macros",
        "detail": "macros",
        "documentation": {}
    },
    {
        "label": "hide",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hide",
        "description": "hide",
        "detail": "hide",
        "documentation": {}
    },
    {
        "label": "ogway-tabber-3_pretty_good",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ogway-tabber-3_pretty_good",
        "description": "ogway-tabber-3_pretty_good",
        "detail": "ogway-tabber-3_pretty_good",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "bring_notepad_to_front",
        "kind": 2,
        "importPath": "tabber.dos-tabber",
        "description": "tabber.dos-tabber",
        "peekOfCode": "def bring_notepad_to_front():\n    # Get the handle for the Notepad window\n    notepad_handle = win32gui.FindWindow(None, \"Untitled - Notepad\")\n    # Bring the Notepad window to the front\n    win32gui.SetForegroundWindow(notepad_handle)\n# Bind the Ctrl + A key combination to the bring_notepad_to_front function\nkeyboard.add_hotkey('ctrl+a', bring_notepad_to_front)\n# Run the script indefinitely\nwhile True:\n    pass",
        "detail": "tabber.dos-tabber",
        "documentation": {}
    },
    {
        "label": "list_windows",
        "kind": 2,
        "importPath": "tabber.dos_tabber_full1",
        "description": "tabber.dos_tabber_full1",
        "peekOfCode": "def list_windows():\n    windows = []\n    def enum_windows(hwnd, result):\n        # Check if the window is visible and not minimized\n        if win32gui.IsWindowVisible(hwnd) and not win32gui.IsIconic(hwnd):\n            # Get the window title and process ID\n            title = win32gui.GetWindowText(hwnd)\n            pid = win32process.GetWindowThreadProcessId(hwnd)[1]\n            # Add the window to the list\n            windows.append((title, pid, hwnd))",
        "detail": "tabber.dos_tabber_full1",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "tabber.dos_tabber_full1",
        "description": "tabber.dos_tabber_full1",
        "peekOfCode": "def main():\n    # List all major programs that are able to be alt-tabbed into\n    windows = list_windows()\n    # Display the list of programs\n    for i, (title, pid, hwnd) in enumerate(windows):\n        print(f\"{i}: {title} ({pid}) ({hwnd})\")\n    # Get the user's selection\n    selection = int(input(\"Enter the number of the program you want to select: \"))\n    # Get the selected program's name, process, and handle\n    title, pid, hwnd = windows[selection]",
        "detail": "tabber.dos_tabber_full1",
        "documentation": {}
    },
    {
        "label": "get_process_info",
        "kind": 2,
        "importPath": "tabber.func",
        "description": "tabber.func",
        "peekOfCode": "def get_process_info(process_name):\n    # Get handle to window\n    window_handle = win32gui.FindWindow(None, process_name)\n    if not window_handle:\n        return None, None\n    # Get process ID\n    _, process_id = win32process.GetWindowThreadProcessId(window_handle)\n    return process_id, process_name\ndef assign_hotkey():\n    # Wait for key input",
        "detail": "tabber.func",
        "documentation": {}
    },
    {
        "label": "assign_hotkey",
        "kind": 2,
        "importPath": "tabber.func",
        "description": "tabber.func",
        "peekOfCode": "def assign_hotkey():\n    # Wait for key input\n    hotkey = keyboard.read_key()\n    # Save hotkey\n    global key1_hotkey\n    key1_hotkey = hotkey\n    # Parse process ID and name from selected item in combo box\n    selected_item = combo_box.currentText()\n    process_id, process_name = selected_item.split(' - ')\n    # Save process ID and name",
        "detail": "tabber.func",
        "documentation": {}
    },
    {
        "label": "bring_to_front",
        "kind": 2,
        "importPath": "tabber.func",
        "description": "tabber.func",
        "peekOfCode": "def bring_to_front():\n    # Bring window with saved process ID to front\n    window_handle = win32gui.FindWindow(None, key1_process_name)\n    win32gui.SetForegroundWindow(window_handle)\n# Initialize variables\nkey1_hotkey = None\nkey1_process_id = None\nkey1_process_name = None\n# Set up hotkey to trigger bring_to_front function\nkeyboard.add_hotkey(key1_hotkey, bring_to_front)",
        "detail": "tabber.func",
        "documentation": {}
    },
    {
        "label": "key1_hotkey",
        "kind": 5,
        "importPath": "tabber.func",
        "description": "tabber.func",
        "peekOfCode": "key1_hotkey = None\nkey1_process_id = None\nkey1_process_name = None\n# Set up hotkey to trigger bring_to_front function\nkeyboard.add_hotkey(key1_hotkey, bring_to_front)\n# Connect button to assign_hotkey function\nbutton.clicked.connect(assign_hotkey)",
        "detail": "tabber.func",
        "documentation": {}
    },
    {
        "label": "key1_process_id",
        "kind": 5,
        "importPath": "tabber.func",
        "description": "tabber.func",
        "peekOfCode": "key1_process_id = None\nkey1_process_name = None\n# Set up hotkey to trigger bring_to_front function\nkeyboard.add_hotkey(key1_hotkey, bring_to_front)\n# Connect button to assign_hotkey function\nbutton.clicked.connect(assign_hotkey)",
        "detail": "tabber.func",
        "documentation": {}
    },
    {
        "label": "key1_process_name",
        "kind": 5,
        "importPath": "tabber.func",
        "description": "tabber.func",
        "peekOfCode": "key1_process_name = None\n# Set up hotkey to trigger bring_to_front function\nkeyboard.add_hotkey(key1_hotkey, bring_to_front)\n# Connect button to assign_hotkey function\nbutton.clicked.connect(assign_hotkey)",
        "detail": "tabber.func",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "kind": 6,
        "importPath": "tabber.gui",
        "description": "tabber.gui",
        "peekOfCode": "class MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        self.setGeometry(300, 300, 300, 300)\n        self.setWindowTitle('Hotkey Program Selector')\n        # Create combo box to select program\n        global combo_box\n        combo_box = QComboBox(self)",
        "detail": "tabber.gui",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "tabber.originalway_tabber copy 2",
        "description": "tabber.originalway_tabber copy 2",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        # Create the process dropdown\n        self.process_dropdown = QComboBox(self)\n        self.process_dropdown.move(10, 10)\n        self.process_dropdown.addItem(\"Select a process\")\n        self.process_dropdown.currentIndexChanged.connect(self.processSelected)",
        "detail": "tabber.originalway_tabber copy 2",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "tabber.originalway_tabber copy",
        "description": "tabber.originalway_tabber copy",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        # Create the process dropdown\n        self.process_dropdown = QComboBox(self)\n        self.process_dropdown.move(10, 10)\n        self.process_dropdown.addItem(\"Select a process\")\n        self.process_dropdown.currentIndexChanged.connect(self.processSelected)",
        "detail": "tabber.originalway_tabber copy",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "tabber.originalway_tabber",
        "description": "tabber.originalway_tabber",
        "peekOfCode": "class Window(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        # Create the process dropdown\n        self.process_dropdown = QComboBox(self)\n        self.process_dropdown.move(10, 10)\n        self.process_dropdown.addItem(\"Select a process\")\n        self.process_dropdown.currentIndexChanged.connect(self.processSelected)",
        "detail": "tabber.originalway_tabber",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "tabber.originalway_tabber_3_prettygood copy 2",
        "description": "tabber.originalway_tabber_3_prettygood copy 2",
        "peekOfCode": "class Window(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.selected_process_id = None\n        self.selected_process_name = None\n        self.key1_hotkey = None\n        self.key1_process_id = None\n        self.key1_process_name = None\n        self.key1_process_hwnd = None\n        self.initUI()",
        "detail": "tabber.originalway_tabber_3_prettygood copy 2",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "tabber.originalway_tabber_3_prettygood copy",
        "description": "tabber.originalway_tabber_3_prettygood copy",
        "peekOfCode": "class Window(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.selected_process_id = None\n        self.selected_process_name = None\n        self.key1_hotkey = None\n        self.key1_process_id = None\n        self.key1_process_name = None\n        self.initUI()\n    def initUI(self):",
        "detail": "tabber.originalway_tabber_3_prettygood copy",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "tabber.originalway_tabber_3_prettygood",
        "description": "tabber.originalway_tabber_3_prettygood",
        "peekOfCode": "class Window(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.selected_process_id = None\n        self.selected_process_name = None\n        self.key1_hotkey = None\n        self.key1_process_id = None\n        self.key1_process_name = None\n        self.initUI()\n    def initUI(self):",
        "detail": "tabber.originalway_tabber_3_prettygood",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "tabber.originalway_tabber_4",
        "description": "tabber.originalway_tabber_4",
        "peekOfCode": "class Window(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        # Create the process dropdown\n        self.process_dropdown = QComboBox(self)\n        self.process_dropdown.move(10, 10)\n        self.process_dropdown.addItem(\"Select a process\")\n        self.process_dropdown.currentIndexChanged.connect(self.processSelected)",
        "detail": "tabber.originalway_tabber_4",
        "documentation": {}
    },
    {
        "label": "KeyInputWindow",
        "kind": 6,
        "importPath": "tabber.pyqt22",
        "description": "tabber.pyqt22",
        "peekOfCode": "class KeyInputWindow(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        # Create a button and a text field\n        self.button = QPushButton('Press a key', self)\n        self.text_field = QLineEdit(self)\n        # Connect the button to the keyInput function\n        self.button.clicked.connect(self.keyInput)",
        "detail": "tabber.pyqt22",
        "documentation": {}
    },
    {
        "label": "bringNotepadToFront",
        "kind": 2,
        "importPath": "tabber.pyqt22",
        "description": "tabber.pyqt22",
        "peekOfCode": "def bringNotepadToFront():\n    # Bring the Notepad application to the front\n    subprocess.call(['wmctrl', '-a', 'notepad.exe'])\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    window = KeyInputWindow()\n    sys.exit(app.exec_())\n    # Add the keyboard shortcut\n    keyboard.add_hotkey(window.key, bringNotepadToFront)\n    # Start listening for keyboard events",
        "detail": "tabber.pyqt22",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "kind": 6,
        "importPath": "tabber.test-key-assign",
        "description": "tabber.test-key-assign",
        "peekOfCode": "class MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        # create a button and a label\n        self.button = QPushButton(\"Set Shortcut Key\", self)\n        self.label = QLabel(self)\n        # set the button and label positions\n        self.button.move(50, 50)",
        "detail": "tabber.test-key-assign",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "kind": 6,
        "importPath": "tabber.test_pyqt_diffkey",
        "description": "tabber.test_pyqt_diffkey",
        "peekOfCode": "class MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        # Set up the user interface\n        self.button1 = QPushButton(\"Button 1\", self)\n        self.button1.move(10, 10)\n        self.button1.clicked.connect(self.on_button1_clicked)\n        self.button2 = QPushButton(\"Save\", self)\n        self.button2.move(10, 50)\n        self.button2.clicked.connect(self.on_button2_clicked)",
        "detail": "tabber.test_pyqt_diffkey",
        "documentation": {}
    },
    {
        "label": "KeyPressWidget",
        "kind": 6,
        "importPath": "tabber.test_pyqt_key",
        "description": "tabber.test_pyqt_key",
        "peekOfCode": "class KeyPressWidget(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        # Create a button and a text form\n        self.button = QPushButton('Press a key', self)\n        self.text_form = QTextEdit(self)\n        # Set the button and text form positions\n        self.button.move(20, 20)",
        "detail": "tabber.test_pyqt_key",
        "documentation": {}
    },
    {
        "label": "KeyPressApp",
        "kind": 6,
        "importPath": "tabber.test_tkinter_key copy 2",
        "description": "tabber.test_tkinter_key copy 2",
        "peekOfCode": "class KeyPressApp:\n    def __init__(self, master):\n        self.master = master\n        self.text_form = tk.Text(master, height=1, width=20)\n        self.button = tk.Button(\n            master, text=\"Press a key\", command=self.key_press)\n        self.text_form.pack()\n        self.button.pack()\n    def key_press(self):\n        self.master.bind(\"<Key>\", self.key_callback)",
        "detail": "tabber.test_tkinter_key copy 2",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "tabber.test_tkinter_key copy 2",
        "description": "tabber.test_tkinter_key copy 2",
        "peekOfCode": "hotkeys = [\n    [\"ctrl+e\", \"bring_to_front\", \"Untitled - Notepad\", None],\n    [\"ctrl+r\", \"bring_to_front\", \"VLC media player\", None]\n]\nclass KeyPressApp:\n    def __init__(self, master):\n        self.master = master\n        self.text_form = tk.Text(master, height=1, width=20)\n        self.button = tk.Button(\n            master, text=\"Press a key\", command=self.key_press)",
        "detail": "tabber.test_tkinter_key copy 2",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "tabber.test_tkinter_key copy 2",
        "description": "tabber.test_tkinter_key copy 2",
        "peekOfCode": "root = tk.Tk()\napp = KeyPressApp(root)\nroot.mainloop()",
        "detail": "tabber.test_tkinter_key copy 2",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "tabber.test_tkinter_key copy 2",
        "description": "tabber.test_tkinter_key copy 2",
        "peekOfCode": "app = KeyPressApp(root)\nroot.mainloop()",
        "detail": "tabber.test_tkinter_key copy 2",
        "documentation": {}
    },
    {
        "label": "KeyPressApp",
        "kind": 6,
        "importPath": "tabber.test_tkinter_key copy",
        "description": "tabber.test_tkinter_key copy",
        "peekOfCode": "class KeyPressApp:\n    def __init__(self, master):\n        self.master = master\n        self.text_form = tk.Text(master, height=1, width=20)\n        self.button = tk.Button(master, text=\"Press a key\", command=self.key_press)\n        self.text_form.pack()\n        self.button.pack()\n    def key_press(self):\n        self.master.bind(\"<Key>\", self.key_callback)\n    def key_callback(self, event):",
        "detail": "tabber.test_tkinter_key copy",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "tabber.test_tkinter_key copy",
        "description": "tabber.test_tkinter_key copy",
        "peekOfCode": "root = tk.Tk()\napp = KeyPressApp(root)\nroot.mainloop()",
        "detail": "tabber.test_tkinter_key copy",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "tabber.test_tkinter_key copy",
        "description": "tabber.test_tkinter_key copy",
        "peekOfCode": "app = KeyPressApp(root)\nroot.mainloop()",
        "detail": "tabber.test_tkinter_key copy",
        "documentation": {}
    },
    {
        "label": "KeyPressApp",
        "kind": 6,
        "importPath": "tabber.test_tkinter_key",
        "description": "tabber.test_tkinter_key",
        "peekOfCode": "class KeyPressApp:\n    def __init__(self, master):\n        self.master = master\n        self.text_form = tk.Text(master, height=1, width=20)\n        self.button = tk.Button(master, text=\"Press a key\", command=self.key_press)\n        self.text_form.pack()\n        self.button.pack()\n    def key_press(self):\n        self.master.bind(\"<Key>\", self.key_callback)\n    def key_callback(self, event):",
        "detail": "tabber.test_tkinter_key",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 5,
        "importPath": "tabber.test_tkinter_key",
        "description": "tabber.test_tkinter_key",
        "peekOfCode": "root = tk.Tk()\napp = KeyPressApp(root)\nroot.mainloop()",
        "detail": "tabber.test_tkinter_key",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "tabber.test_tkinter_key",
        "description": "tabber.test_tkinter_key",
        "peekOfCode": "app = KeyPressApp(root)\nroot.mainloop()",
        "detail": "tabber.test_tkinter_key",
        "documentation": {}
    },
    {
        "label": "select_process_func",
        "kind": 2,
        "importPath": "_best.bitotab",
        "description": "_best.bitotab",
        "peekOfCode": "def select_process_func():\n    idx = select_process.currentIndex()\n    if idx == 0:\n        # print(\"Select Process\")\n        window.l3.setText(\"Select Process\")\n    else:\n        process = processes[idx-1]\n        process_title = process['process_title']\n        process_hwnd = process['hwnd']\n        print(\"Process title:\", process_title, \"\\nProcess hwnd:\", process_hwnd)",
        "detail": "_best.bitotab",
        "documentation": {}
    },
    {
        "label": "rebuild_cur",
        "kind": 2,
        "importPath": "_best.bitotab",
        "description": "_best.bitotab",
        "peekOfCode": "def rebuild_cur():\n    print(\"hi\")\n    print(build_hotkey)\n    # select_process.activated[str].connect(select_process_func)\n    # Create a Label to show contents of build_hotkey\n    window.l1 = QLabel(window)\n    window.l1.move(100, 200)\n    window.l1.setText(\"{}\".format(build_hotkey))\n# window.14 = Qlabel(window)\n# window.14.move(130, 230)",
        "detail": "_best.bitotab",
        "documentation": {}
    },
    {
        "label": "add_key",
        "kind": 2,
        "importPath": "_best.bitotab",
        "description": "_best.bitotab",
        "peekOfCode": "def add_key():\n    \"\"\"    process_name = processes[process_name]\n       process_id = processes[process_id] \"\"\"\n    build_hotkey['process_name'] = process_name\n    build_hotkey['process_id'] = process_id\n    hotkeys.append(build_hotkey)\n    # Create a Label to show contents of hotkeys\n    window.l2 = QLabel(window)\n    window.l2.move(100, 350)\n    window.l2.setText(\"{}\".format(hotkeys))",
        "detail": "_best.bitotab",
        "documentation": {}
    },
    {
        "label": "build_hotkey",
        "kind": 5,
        "importPath": "_best.bitotab",
        "description": "_best.bitotab",
        "peekOfCode": "build_hotkey = {\"id\": 1, \"key\": \"key\", \"action\": \"action\",\n                \"process_title\": None, \"process_hwnd\": None}\n# create a empty list for hot keys\nhotkeys = []\nprocess_name = \"\"\nprocess_id = \"\"\n# Create App\napp = QApplication(sys.argv)\nwindow = QDialog()\nwindow.setWindowTitle('Hotkey Builder')",
        "detail": "_best.bitotab",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "_best.bitotab",
        "description": "_best.bitotab",
        "peekOfCode": "hotkeys = []\nprocess_name = \"\"\nprocess_id = \"\"\n# Create App\napp = QApplication(sys.argv)\nwindow = QDialog()\nwindow.setWindowTitle('Hotkey Builder')\nwindow.setWindowIcon(QIcon(\"icon.png\"))\nwindow.setGeometry(100, 100, 500, 500)\n# Create a dropdown form with a default value of \"Select Process\"",
        "detail": "_best.bitotab",
        "documentation": {}
    },
    {
        "label": "process_name",
        "kind": 5,
        "importPath": "_best.bitotab",
        "description": "_best.bitotab",
        "peekOfCode": "process_name = \"\"\nprocess_id = \"\"\n# Create App\napp = QApplication(sys.argv)\nwindow = QDialog()\nwindow.setWindowTitle('Hotkey Builder')\nwindow.setWindowIcon(QIcon(\"icon.png\"))\nwindow.setGeometry(100, 100, 500, 500)\n# Create a dropdown form with a default value of \"Select Process\"\nselect_process = QComboBox(window)",
        "detail": "_best.bitotab",
        "documentation": {}
    },
    {
        "label": "process_id",
        "kind": 5,
        "importPath": "_best.bitotab",
        "description": "_best.bitotab",
        "peekOfCode": "process_id = \"\"\n# Create App\napp = QApplication(sys.argv)\nwindow = QDialog()\nwindow.setWindowTitle('Hotkey Builder')\nwindow.setWindowIcon(QIcon(\"icon.png\"))\nwindow.setGeometry(100, 100, 500, 500)\n# Create a dropdown form with a default value of \"Select Process\"\nselect_process = QComboBox(window)\nselect_process.addItem(\"select Process\")",
        "detail": "_best.bitotab",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "_best.bitotab",
        "description": "_best.bitotab",
        "peekOfCode": "app = QApplication(sys.argv)\nwindow = QDialog()\nwindow.setWindowTitle('Hotkey Builder')\nwindow.setWindowIcon(QIcon(\"icon.png\"))\nwindow.setGeometry(100, 100, 500, 500)\n# Create a dropdown form with a default value of \"Select Process\"\nselect_process = QComboBox(window)\nselect_process.addItem(\"select Process\")\n# displaying a list of major process\nprocesses = [",
        "detail": "_best.bitotab",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": "_best.bitotab",
        "description": "_best.bitotab",
        "peekOfCode": "window = QDialog()\nwindow.setWindowTitle('Hotkey Builder')\nwindow.setWindowIcon(QIcon(\"icon.png\"))\nwindow.setGeometry(100, 100, 500, 500)\n# Create a dropdown form with a default value of \"Select Process\"\nselect_process = QComboBox(window)\nselect_process.addItem(\"select Process\")\n# displaying a list of major process\nprocesses = [\n    {",
        "detail": "_best.bitotab",
        "documentation": {}
    },
    {
        "label": "select_process",
        "kind": 5,
        "importPath": "_best.bitotab",
        "description": "_best.bitotab",
        "peekOfCode": "select_process = QComboBox(window)\nselect_process.addItem(\"select Process\")\n# displaying a list of major process\nprocesses = [\n    {\n        \"process_title\": \"Notepad\",\n        \"process_name\": \"notepad.exe\",\n        \"hwnd\": 8458\n    },\n    {",
        "detail": "_best.bitotab",
        "documentation": {}
    },
    {
        "label": "processes",
        "kind": 5,
        "importPath": "_best.bitotab",
        "description": "_best.bitotab",
        "peekOfCode": "processes = [\n    {\n        \"process_title\": \"Notepad\",\n        \"process_name\": \"notepad.exe\",\n        \"hwnd\": 8458\n    },\n    {\n        \"process_title\": \"Chrome\",\n        \"process_name\": \"chrome.exe\",\n        \"hwnd\": 1298",
        "detail": "_best.bitotab",
        "documentation": {}
    },
    {
        "label": "window.l3",
        "kind": 5,
        "importPath": "_best.bitotab",
        "description": "_best.bitotab",
        "peekOfCode": "window.l3 = QLabel(window)\nwindow.l3.move(100, 250)\nwindow.l3.setText(\"No selection\")\n# Create a button to append new build_hotkey to hotkeys\nbtn_add_key = QPushButton(\"add Key\", window)\ndef add_key():\n    \"\"\"    process_name = processes[process_name]\n       process_id = processes[process_id] \"\"\"\n    build_hotkey['process_name'] = process_name\n    build_hotkey['process_id'] = process_id",
        "detail": "_best.bitotab",
        "documentation": {}
    },
    {
        "label": "btn_add_key",
        "kind": 5,
        "importPath": "_best.bitotab",
        "description": "_best.bitotab",
        "peekOfCode": "btn_add_key = QPushButton(\"add Key\", window)\ndef add_key():\n    \"\"\"    process_name = processes[process_name]\n       process_id = processes[process_id] \"\"\"\n    build_hotkey['process_name'] = process_name\n    build_hotkey['process_id'] = process_id\n    hotkeys.append(build_hotkey)\n    # Create a Label to show contents of hotkeys\n    window.l2 = QLabel(window)\n    window.l2.move(100, 350)",
        "detail": "_best.bitotab",
        "documentation": {}
    },
    {
        "label": "key_press",
        "kind": 5,
        "importPath": "_best.bitotab",
        "description": "_best.bitotab",
        "peekOfCode": "key_press = QPushButton(\"Press Key\", window)\n# key_press.clicked.connect(lambda: build_hotkey['key']=keyboard.read_key())\nkey_press.setToolTip('Click to add selected hotkey to list of hotkeys')\nkey_press.resize(100, 30)\nkey_press.move(300, 300)\n# Create a button to write hotkeys to a txt file in json format\nbtn_write_file = QPushButton(\"Write File\", window)\nbtn_write_file.clicked.connect(lambda: open(\n    'hotkeys.txt', 'w').write(json.dumps(hotkeys)))\nbtn_write_file.setToolTip('Click to write hotkeys to text file')",
        "detail": "_best.bitotab",
        "documentation": {}
    },
    {
        "label": "btn_write_file",
        "kind": 5,
        "importPath": "_best.bitotab",
        "description": "_best.bitotab",
        "peekOfCode": "btn_write_file = QPushButton(\"Write File\", window)\nbtn_write_file.clicked.connect(lambda: open(\n    'hotkeys.txt', 'w').write(json.dumps(hotkeys)))\nbtn_write_file.setToolTip('Click to write hotkeys to text file')\nbtn_write_file.resize(100, 30)\nbtn_write_file.move(200, 350)\n# Show window\nwindow.show()\nsys.exit(app.exec_())",
        "detail": "_best.bitotab",
        "documentation": {}
    },
    {
        "label": "Hotkey",
        "kind": 6,
        "importPath": "_best.tabo copy",
        "description": "_best.tabo copy",
        "peekOfCode": "class Hotkey(QObject):\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.build_hotkey = {'id': 1, 'key': \"key\", 'action': \"action\",\n                             'process_title': None, 'process_hwnd': None}\n        self.hotkeys = []\n        self.process_list = []\n        self.process_title = None\n        self.process_hwnd = None\n    def get_process_list(self):",
        "detail": "_best.tabo copy",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "kind": 6,
        "importPath": "_best.tabo copy",
        "description": "_best.tabo copy",
        "peekOfCode": "class MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.hotkey = Hotkey()\n        self.hotkey.get_process_list()\n        self.process_dropdown = QComboBox()\n        self.process_dropdown.addItem(\"Select Process\")\n        for process in self.hotkey.process_list:\n            self.process_dropdown.addItem(f'{process[1]}')\n        self.process_dropdown.currentIndexChanged.connect(",
        "detail": "_best.tabo copy",
        "documentation": {}
    },
    {
        "label": "Hotkey",
        "kind": 6,
        "importPath": "_best.tabo",
        "description": "_best.tabo",
        "peekOfCode": "class Hotkey(QObject):\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.build_hotkey = {'id': 1, 'key': \"key\", 'action': \"action\",\n                             'process_title': None, 'process_hwnd': None}\n        self.hotkeys = []\n        self.process_list = []\n        self.process_title = None\n        self.process_hwnd = None\n    def get_process_list(self):",
        "detail": "_best.tabo",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "kind": 6,
        "importPath": "_best.tabo",
        "description": "_best.tabo",
        "peekOfCode": "class MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.hotkey = Hotkey()\n        self.hotkey.get_process_list()\n        self.process_dropdown = QComboBox()\n        self.process_dropdown.addItem(\"Select Process\")\n        for process in self.hotkey.process_list:\n            self.process_dropdown.addItem(f'{process[1]}')\n        self.process_dropdown.currentIndexChanged.connect(",
        "detail": "_best.tabo",
        "documentation": {}
    },
    {
        "label": "HotkeySetter",
        "kind": 6,
        "importPath": "14_keybutton_1 copy 2",
        "description": "14_keybutton_1 copy 2",
        "peekOfCode": "class HotkeySetter(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.init_ui()\n    def init_ui(self):\n        # Create the dropdown form and add some dummy items\n        self.process_combo = QComboBox(self)\n        self.process_combo.addItems([\"Process 1\", \"Process 2\", \"Process 3\"])\n        # Create the \"Set Key\" button and label\n        self.bt_1 = QPushButton(\"Set Key\", self)",
        "detail": "14_keybutton_1 copy 2",
        "documentation": {}
    },
    {
        "label": "HotkeySetter",
        "kind": 6,
        "importPath": "14_keybutton_1 copy 3",
        "description": "14_keybutton_1 copy 3",
        "peekOfCode": "class HotkeySetter(QWidget):\n    def __init__(self):\n        super().__init__()\n        # Initialize the UI\n        self.init_ui()\n    def init_ui(self):\n        # Create the layout\n        layout = QVBoxLayout()\n        # Create the process combo box\n        self.process_combo = QComboBox()",
        "detail": "14_keybutton_1 copy 3",
        "documentation": {}
    },
    {
        "label": "HotkeySetter",
        "kind": 6,
        "importPath": "14_keybutton_1 copy 4",
        "description": "14_keybutton_1 copy 4",
        "peekOfCode": "class HotkeySetter(QtWidgets.QWidget):\n    def __init__(self):\n        super().__init__()\n        self.init_ui()\n    def init_ui(self):\n        # Create the process combo box\n        self.process_combo = QtWidgets.QComboBox(self)\n        self.process_combo.addItems(self.get_processes())\n        # Create the Set Key button\n        self.bt_1 = QtWidgets.QPushButton('Set Key', self)",
        "detail": "14_keybutton_1 copy 4",
        "documentation": {}
    },
    {
        "label": "HotkeySetter",
        "kind": 6,
        "importPath": "14_keybutton_1 copy 5",
        "description": "14_keybutton_1 copy 5",
        "peekOfCode": "class HotkeySetter(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.init_ui()\n    def init_ui(self):\n        # create a dropdown list of all running processes\n        self.process_combo = QComboBox(self)\n        self.process_combo.addItems(self.get_processes())\n        # create the Set Key button and label\n        self.bt_1_label = QLabel(\"Set Key\", self)",
        "detail": "14_keybutton_1 copy 5",
        "documentation": {}
    },
    {
        "label": "HotkeySetter",
        "kind": 6,
        "importPath": "14_keybutton_1 copy 6",
        "description": "14_keybutton_1 copy 6",
        "peekOfCode": "class HotkeySetter(QWidget):\n    def init(self):\n        super().init()\n        self.init_ui()\n        self.show()\ndef init_ui(self):\n    self.setGeometry(100, 100, 400, 100)\n    self.setWindowTitle(\"Hotkey Setter\")\n    self.setWindowFlags(Qt.WindowStaysOnTopHint)\n    grid = QGridLayout()",
        "detail": "14_keybutton_1 copy 6",
        "documentation": {}
    },
    {
        "label": "init_ui",
        "kind": 2,
        "importPath": "14_keybutton_1 copy 6",
        "description": "14_keybutton_1 copy 6",
        "peekOfCode": "def init_ui(self):\n    self.setGeometry(100, 100, 400, 100)\n    self.setWindowTitle(\"Hotkey Setter\")\n    self.setWindowFlags(Qt.WindowStaysOnTopHint)\n    grid = QGridLayout()\n    self.setLayout(grid)\n    self.process_combo = QComboBox()\n    self.process_combo.addItems(self.get_processes())\n    grid.addWidget(self.process_combo, 0, 0)\n    bt_1 = QPushButton(\"Set Key\")",
        "detail": "14_keybutton_1 copy 6",
        "documentation": {}
    },
    {
        "label": "set_hotkey",
        "kind": 2,
        "importPath": "14_keybutton_1 copy 6",
        "description": "14_keybutton_1 copy 6",
        "peekOfCode": "def set_hotkey(self):\n    self.bt_1.setText(\"Input Key...\")\n    self.bt_1_label.setText(\"\")\n    keyboard.wait()\n    self.pressed_key = keyboard.read_event()[1]\n    self.bt_1.setText(self.pressed_key)\n    self.bt_1_label.setText(self.pressed_key)\ndef save_hotkey(self):\n    hotkey = {\n        \"name\": \"key 1\",",
        "detail": "14_keybutton_1 copy 6",
        "documentation": {}
    },
    {
        "label": "save_hotkey",
        "kind": 2,
        "importPath": "14_keybutton_1 copy 6",
        "description": "14_keybutton_1 copy 6",
        "peekOfCode": "def save_hotkey(self):\n    hotkey = {\n        \"name\": \"key 1\",\n        \"key\": self.pressed_key,\n        \"process_name\": self.process_combo.currentText(),\n        \"process_hwnd\": self.processes[self.process_combo.currentIndex()][1]\n    }\n    self.hotkeys.append(hotkey)\n    print(self.hotkeys)\nif __name__ == \"__main__\":",
        "detail": "14_keybutton_1 copy 6",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "kind": 6,
        "importPath": "14_keybutton_1 copy 7",
        "description": "14_keybutton_1 copy 7",
        "peekOfCode": "class MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.init_ui()\n        self.waiting_for_key = False\n        self.key_1 = None\n    def init_ui(self):\n        # Create bt_1 and its label\n        self.bt_1 = QPushButton(\"Set Key\", self)\n        self.bt_1_label = QLabel(\"\", self)",
        "detail": "14_keybutton_1 copy 7",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "14_keybutton_1 copy 7",
        "description": "14_keybutton_1 copy 7",
        "peekOfCode": "app = QApplication(sys.argv)\nwindow = MainWindow()\nwindow.show()\nsys.exit(app.exec_())",
        "detail": "14_keybutton_1 copy 7",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": "14_keybutton_1 copy 7",
        "description": "14_keybutton_1 copy 7",
        "peekOfCode": "window = MainWindow()\nwindow.show()\nsys.exit(app.exec_())",
        "detail": "14_keybutton_1 copy 7",
        "documentation": {}
    },
    {
        "label": "HotkeySetter",
        "kind": 6,
        "importPath": "14_keybutton_1 copy",
        "description": "14_keybutton_1 copy",
        "peekOfCode": "class HotkeySetter(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.hotkey = {}\n        self.init_ui()\n    def init_ui(self):\n        # Create the dropdown list of processes\n        self.process_combo = QComboBox(self)\n        self.process_combo.addItems(self.get_processes())\n        # Create the \"Set Key\" button",
        "detail": "14_keybutton_1 copy",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "kind": 6,
        "importPath": "14_keybutton_1",
        "description": "14_keybutton_1",
        "peekOfCode": "class MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.init_ui()\n        self.waiting_for_key = False\n        self.key_1 = None\n    def init_ui(self):\n        # Create bt_1 and its label\n        self.bt_1 = QPushButton(\"Set Key\", self)\n        self.bt_1_label = QLabel(\"\", self)",
        "detail": "14_keybutton_1",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "14_keybutton_1",
        "description": "14_keybutton_1",
        "peekOfCode": "app = QApplication(sys.argv)\nwindow = MainWindow()\nwindow.show()\nsys.exit(app.exec_())",
        "detail": "14_keybutton_1",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": "14_keybutton_1",
        "description": "14_keybutton_1",
        "peekOfCode": "window = MainWindow()\nwindow.show()\nsys.exit(app.exec_())",
        "detail": "14_keybutton_1",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "kind": 6,
        "importPath": "14_keybutton_1bk",
        "description": "14_keybutton_1bk",
        "peekOfCode": "class MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.init_ui()\n        self.waiting_for_key = False\n        self.key_1 = None\n    def init_ui(self):\n        # Create bt_1 and its label\n        self.bt_1 = QPushButton(\"Set Key\", self)\n        self.bt_1_label = QLabel(\"\", self)",
        "detail": "14_keybutton_1bk",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "14_keybutton_1bk",
        "description": "14_keybutton_1bk",
        "peekOfCode": "app = QApplication(sys.argv)\nwindow = MainWindow()\nwindow.show()\nsys.exit(app.exec_())",
        "detail": "14_keybutton_1bk",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": "14_keybutton_1bk",
        "description": "14_keybutton_1bk",
        "peekOfCode": "window = MainWindow()\nwindow.show()\nsys.exit(app.exec_())",
        "detail": "14_keybutton_1bk",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "kind": 6,
        "importPath": "14_keybutton_2_list copy",
        "description": "14_keybutton_2_list copy",
        "peekOfCode": "class MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.init_ui()\n        self.waiting_for_key = False\n        self.key_1 = None\n    def init_ui(self):\n        # Create bt_1 and its label\n        self.bt_1 = QPushButton(\"Set Key\", self)\n        self.bt_1_label = QLabel(\"\", self)",
        "detail": "14_keybutton_2_list copy",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "14_keybutton_2_list copy",
        "description": "14_keybutton_2_list copy",
        "peekOfCode": "app = QApplication(sys.argv)\nwindow = MainWindow()\nwindow.show()\nsys.exit(app.exec_())",
        "detail": "14_keybutton_2_list copy",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": "14_keybutton_2_list copy",
        "description": "14_keybutton_2_list copy",
        "peekOfCode": "window = MainWindow()\nwindow.show()\nsys.exit(app.exec_())",
        "detail": "14_keybutton_2_list copy",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "kind": 6,
        "importPath": "14_keybutton_2_list",
        "description": "14_keybutton_2_list",
        "peekOfCode": "class MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.init_ui()\n        self.waiting_for_key = False\n        self.key_1 = None\n    def init_ui(self):\n        # Create bt_1 and its label\n        self.bt_1 = QPushButton(\"Set Key\", self)\n        self.bt_1_label = QLabel(\"\", self)",
        "detail": "14_keybutton_2_list",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "14_keybutton_2_list",
        "description": "14_keybutton_2_list",
        "peekOfCode": "app = QApplication(sys.argv)\nwindow = MainWindow()\nwindow.show()\nsys.exit(app.exec_())",
        "detail": "14_keybutton_2_list",
        "documentation": {}
    },
    {
        "label": "window",
        "kind": 5,
        "importPath": "14_keybutton_2_list",
        "description": "14_keybutton_2_list",
        "peekOfCode": "window = MainWindow()\nwindow.show()\nsys.exit(app.exec_())",
        "detail": "14_keybutton_2_list",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "a",
        "description": "a",
        "peekOfCode": "class Window(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        self.selected_process_id = None\n        self.selected_process_name = None\n        self.key1_hotkey = None\n        self.key1_process_id = None\n        self.key1_process_name = None\n        self.key1_process_hwnd = None\n        self.initUI()",
        "detail": "a",
        "documentation": {}
    },
    {
        "label": "list_windows",
        "kind": 2,
        "importPath": "a",
        "description": "a",
        "peekOfCode": "def list_windows():\n    windows = []\n    def enum_windows(hwnd, result):\n        # Check if the window is visible and not minimized\n        if win32gui.IsWindowVisible(hwnd) and not win32gui.IsIconic(hwnd):\n            # Get the window title and process ID\n            title = win32gui.GetWindowText(hwnd)\n            pid = win32process.GetWindowThreadProcessId(hwnd)[1]\n            # Add the window to the list\n            windows.append((title, pid, hwnd))",
        "detail": "a",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "a",
        "description": "a",
        "peekOfCode": "def main():\n    # List all major programs that are able to be alt-tabbed into\n    windows = list_windows()\n    # Display the list of programs\n    for i, (title, pid, hwnd) in enumerate(windows):\n        print(f\"{i}: {title} ({pid}) ({hwnd})\")\n    # Get the user's selection\n    selection = int(\n        input(\"Enter the number of the program you want to select: \"))\n    # Get the selected program's name, process, and handle",
        "detail": "a",
        "documentation": {}
    },
    {
        "label": "save",
        "kind": 2,
        "importPath": "a",
        "description": "a",
        "peekOfCode": "def save(hotkeys):\n    config = configparser.ConfigParser()\n    config['HOTKEYS'] = {}\n    for i, hotkey in enumerate(hotkeys):\n        config['HOTKEYS'][f'hotkey{i}'] = ','.join(hotkey)\n        # config['HOTKEYS'][f'hotkey{i}'] = ','.join([str(x) for x in hotkey])  # save after converting all to string\n        # config['HOTKEYS'][f'hotkey{i}'] = ','.join(hotkey[:3]) #save only 3 elements\n    with open('test01.ini', 'w') as configfile:\n        config.write(configfile)\n# Function to load the hotkeys list from a file",
        "detail": "a",
        "documentation": {}
    },
    {
        "label": "load",
        "kind": 2,
        "importPath": "a",
        "description": "a",
        "peekOfCode": "def load():\n    config = configparser.ConfigParser()\n    config.read('test01.ini')\n    hotkeys = []\n    for key in config['HOTKEYS']:\n        hotkeys.append(config['HOTKEYS'][key].split(','))\n    return hotkeys\n# Initialize the hotkeys list\nif os.path.exists('test01.ini'):\n    hotkeys = load()",
        "detail": "a",
        "documentation": {}
    },
    {
        "label": "edit_file",
        "kind": 2,
        "importPath": "a",
        "description": "a",
        "peekOfCode": "def edit_file(hotkeys):\n    check_key = input(\"Change which key: \")\n    for i in range(len(hotkeys)):\n        hotkey = hotkeys[i]\n        key, action, program = hotkey\n        if check_key == key:\n            print(hotkeys[i])\n            type(hotkeys[i])\n            change_key = input(f\"\\033[34m{key}\\033[0m {action} {program}\")\n            hotkeys[i].key = change_key",
        "detail": "a",
        "documentation": {}
    },
    {
        "label": "get_window_by_title",
        "kind": 2,
        "importPath": "a",
        "description": "a",
        "peekOfCode": "def get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)\n    if hwnd:\n        return hwnd\n    return None\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return",
        "detail": "a",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "a",
        "description": "a",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return\n    if user32.IsWindowVisible(hwnd):\n        user32.ShowWindow(hwnd, 0)\n    else:\n        user32.ShowWindow(hwnd, 1)\n# wait for hotkey press\nkeyboard.wait()",
        "detail": "a",
        "documentation": {}
    },
    {
        "label": "get_window_by_title",
        "kind": 2,
        "importPath": "a",
        "description": "a",
        "peekOfCode": "def get_window_by_title(title):\n    \"\"\"Get the window handle for the window with the given title.\"\"\"\n    def callback(hwnd, window_list):\n        window_list.append(hwnd)\n    window_list = []\n    win32gui.EnumWindows(callback, window_list)\n    for hwnd in window_list:\n        if win32gui.GetWindowText(hwnd) == title:\n            return hwnd\n    return None",
        "detail": "a",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "a",
        "description": "a",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window with the given handle.\"\"\"\n    if win32gui.IsWindowVisible(hwnd):\n        win32gui.ShowWindow(hwnd, win32con.SW_HIDE)\n    else:\n        win32gui.ShowWindow(hwnd, win32con.SW_SHOW)\ndef edit_program_1():\n    \"\"\"Edit the value of program_1.\"\"\"\n    global program_1\n    print(\"[1][2]\")",
        "detail": "a",
        "documentation": {}
    },
    {
        "label": "edit_program_1",
        "kind": 2,
        "importPath": "a",
        "description": "a",
        "peekOfCode": "def edit_program_1():\n    \"\"\"Edit the value of program_1.\"\"\"\n    global program_1\n    print(\"[1][2]\")\ndef edit_program_1():\n    \"\"\"Edit the value of program_1.\"\"\"\n    global program_1\n    print(\"[1][2]\")\n    # key_settings = keyboard.read_hotkey()\n    # if key_settings == \"1\":",
        "detail": "a",
        "documentation": {}
    },
    {
        "label": "edit_program_1",
        "kind": 2,
        "importPath": "a",
        "description": "a",
        "peekOfCode": "def edit_program_1():\n    \"\"\"Edit the value of program_1.\"\"\"\n    global program_1\n    print(\"[1][2]\")\n    # key_settings = keyboard.read_hotkey()\n    # if key_settings == \"1\":\n    if 0 == 0:\n        # Read the current value of program_1 from start.ini\n        with open(\"start.ini\", \"r\") as f:\n            program_1 = f.readlines()[0].strip()",
        "detail": "a",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "a",
        "description": "a",
        "peekOfCode": "index = int(input(\"Enter the index of the list or tuple to modify (0-1): \"))\n# Get the part of the list or tuple to modify\npart = int(input(\"Enter the part of the list or tuple to modify (0-3): \")) - 1\nif part == -1:\n    print(\"penis\")\n    print(hotkeys[index][:])\n    # Get user input for the new list or tuple\n    value = input(\"Enter the new values separated by commas: \")\n    # Split the input into a list\n    value = value.split(',')",
        "detail": "a",
        "documentation": {}
    },
    {
        "label": "part",
        "kind": 5,
        "importPath": "a",
        "description": "a",
        "peekOfCode": "part = int(input(\"Enter the part of the list or tuple to modify (0-3): \")) - 1\nif part == -1:\n    print(\"penis\")\n    print(hotkeys[index][:])\n    # Get user input for the new list or tuple\n    value = input(\"Enter the new values separated by commas: \")\n    # Split the input into a list\n    value = value.split(',')\n    # Check the length and types of the values\n    if len(value) != 4:",
        "detail": "a",
        "documentation": {}
    },
    {
        "label": "hwnd",
        "kind": 5,
        "importPath": "a",
        "description": "a",
        "peekOfCode": "hwnd = ctypes.windll.kernel32.GetConsoleWindow()\n# set the console title using the window handle\nuser32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# Define the hotkeys\nhotkeys = [\n    (\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\"),\n    (\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\"),",
        "detail": "a",
        "documentation": {}
    },
    {
        "label": "user32",
        "kind": 5,
        "importPath": "a",
        "description": "a",
        "peekOfCode": "user32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# Define the hotkeys\nhotkeys = [\n    (\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\"),\n    (\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\"),\n    (\"ctrl+h\", \"lambda: subprocess.call({program})\",\n     [\"cmd\", \"/c\", \"notepad.exe\", \"bong.txt\"],)",
        "detail": "a",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "a",
        "description": "a",
        "peekOfCode": "hotkeys = [\n    (\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\"),\n    (\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\"),\n    (\"ctrl+h\", \"lambda: subprocess.call({program})\",\n     [\"cmd\", \"/c\", \"notepad.exe\", \"bong.txt\"],)\n]\n# Add the hotkeys\nfor hotkey in hotkeys:",
        "detail": "a",
        "documentation": {}
    },
    {
        "label": "hidden",
        "kind": 5,
        "importPath": "a",
        "description": "a",
        "peekOfCode": "hidden = False\ndef get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)\n    if hwnd:\n        return hwnd\n    return None\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:",
        "detail": "a",
        "documentation": {}
    },
    {
        "label": "program_1",
        "kind": 5,
        "importPath": "a",
        "description": "a",
        "peekOfCode": "program_1 = \"C:\\\\Program Files\\\\VideoLAN\\\\VLC\\\\vlc.exe\"\n# Set up the hotkeys\nkeyboard.add_hotkey(\n    \"ctrl+z\", lambda: toggle_window_visibility(get_window_by_title(\"opensesame\")))\nkeyboard.add_hotkey(\"ctrl+x\", lambda: exit())\nkeyboard.add_hotkey(\"ctrl+c\", lambda: keyboard.send(f\"open {program_1}\"))\nkeyboard.add_hotkey(\"ctrl+s\", lambda: edit_program_1())\n# Start the event loop\ntry:\n    # your code here",
        "detail": "a",
        "documentation": {}
    },
    {
        "label": "keys",
        "kind": 5,
        "importPath": "arraystests",
        "description": "arraystests",
        "peekOfCode": "keys = [\"key1\", \"key2\", \"key3\"]\nnames = [\"name1\", \"name2\", \"name3\"]\nbooks = [\"book1\", \"book2\", \"book3\"]\nfor i in range(len(keys)):\n    print(f\"{i+1}. Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\nhot_keys = [keys,names,books]\n#hot_keys[0] = [\"key1\", \"key2\", \"key3\"]\n#hot_keys[1] = [\"name1\", \"name2\", \"name3\"]\nhot_keys[2] =[\"book11\", \"book22\", \"book33\"]\n#hot_keys[3] =[\"book11\", \"book22\", \"book33\"]",
        "detail": "arraystests",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "arraystests",
        "description": "arraystests",
        "peekOfCode": "names = [\"name1\", \"name2\", \"name3\"]\nbooks = [\"book1\", \"book2\", \"book3\"]\nfor i in range(len(keys)):\n    print(f\"{i+1}. Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\nhot_keys = [keys,names,books]\n#hot_keys[0] = [\"key1\", \"key2\", \"key3\"]\n#hot_keys[1] = [\"name1\", \"name2\", \"name3\"]\nhot_keys[2] =[\"book11\", \"book22\", \"book33\"]\n#hot_keys[3] =[\"book11\", \"book22\", \"book33\"]\nfor i in range(len(hot_keys)):",
        "detail": "arraystests",
        "documentation": {}
    },
    {
        "label": "books",
        "kind": 5,
        "importPath": "arraystests",
        "description": "arraystests",
        "peekOfCode": "books = [\"book1\", \"book2\", \"book3\"]\nfor i in range(len(keys)):\n    print(f\"{i+1}. Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\nhot_keys = [keys,names,books]\n#hot_keys[0] = [\"key1\", \"key2\", \"key3\"]\n#hot_keys[1] = [\"name1\", \"name2\", \"name3\"]\nhot_keys[2] =[\"book11\", \"book22\", \"book33\"]\n#hot_keys[3] =[\"book11\", \"book22\", \"book33\"]\nfor i in range(len(hot_keys)):\n    print(f\"{i+1}. Key: {hot_keys[i]}, Name: {hot_keys[i]}, Book: {hot_keys[i]}\") ",
        "detail": "arraystests",
        "documentation": {}
    },
    {
        "label": "hot_keys",
        "kind": 5,
        "importPath": "arraystests",
        "description": "arraystests",
        "peekOfCode": "hot_keys = [keys,names,books]\n#hot_keys[0] = [\"key1\", \"key2\", \"key3\"]\n#hot_keys[1] = [\"name1\", \"name2\", \"name3\"]\nhot_keys[2] =[\"book11\", \"book22\", \"book33\"]\n#hot_keys[3] =[\"book11\", \"book22\", \"book33\"]\nfor i in range(len(hot_keys)):\n    print(f\"{i+1}. Key: {hot_keys[i]}, Name: {hot_keys[i]}, Book: {hot_keys[i]}\") \nhot_keys[1]=\"namealea\"\n#hot_keys[1].append(\"jammaa\")    \nprint(hot_keys[1][3])",
        "detail": "arraystests",
        "documentation": {}
    },
    {
        "label": "#hot_keys[0]",
        "kind": 5,
        "importPath": "arraystests",
        "description": "arraystests",
        "peekOfCode": "#hot_keys[0] = [\"key1\", \"key2\", \"key3\"]\n#hot_keys[1] = [\"name1\", \"name2\", \"name3\"]\nhot_keys[2] =[\"book11\", \"book22\", \"book33\"]\n#hot_keys[3] =[\"book11\", \"book22\", \"book33\"]\nfor i in range(len(hot_keys)):\n    print(f\"{i+1}. Key: {hot_keys[i]}, Name: {hot_keys[i]}, Book: {hot_keys[i]}\") \nhot_keys[1]=\"namealea\"\n#hot_keys[1].append(\"jammaa\")    \nprint(hot_keys[1][3])\n#input_two = input(\"Program 1: \")",
        "detail": "arraystests",
        "documentation": {}
    },
    {
        "label": "#hot_keys[1]",
        "kind": 5,
        "importPath": "arraystests",
        "description": "arraystests",
        "peekOfCode": "#hot_keys[1] = [\"name1\", \"name2\", \"name3\"]\nhot_keys[2] =[\"book11\", \"book22\", \"book33\"]\n#hot_keys[3] =[\"book11\", \"book22\", \"book33\"]\nfor i in range(len(hot_keys)):\n    print(f\"{i+1}. Key: {hot_keys[i]}, Name: {hot_keys[i]}, Book: {hot_keys[i]}\") \nhot_keys[1]=\"namealea\"\n#hot_keys[1].append(\"jammaa\")    \nprint(hot_keys[1][3])\n#input_two = input(\"Program 1: \")\n#for i in range(len(keys)):",
        "detail": "arraystests",
        "documentation": {}
    },
    {
        "label": "#input_two",
        "kind": 5,
        "importPath": "arraystests",
        "description": "arraystests",
        "peekOfCode": "#input_two = input(\"Program 1: \")\n#for i in range(len(keys)):\ncheck_key = input(\"change which key: \")\nchange_key = \"\"\n#Check if the user input matches any of the keys\nfor i in range(len(keys)):\n    if check_key == keys[i]:\n# Get the user input for the new key\n        change_key = input(f\"{'\\033[34m'}{keys[i]}{'\\033[0m'} {names[i]} {books[i]}: \")\n# Update the key",
        "detail": "arraystests",
        "documentation": {}
    },
    {
        "label": "check_key",
        "kind": 5,
        "importPath": "arraystests",
        "description": "arraystests",
        "peekOfCode": "check_key = input(\"change which key: \")\nchange_key = \"\"\n#Check if the user input matches any of the keys\nfor i in range(len(keys)):\n    if check_key == keys[i]:\n# Get the user input for the new key\n        change_key = input(f\"{'\\033[34m'}{keys[i]}{'\\033[0m'} {names[i]} {books[i]}: \")\n# Update the key\nkeys[i] = change_key\n# Print the updated key, name, and book",
        "detail": "arraystests",
        "documentation": {}
    },
    {
        "label": "change_key",
        "kind": 5,
        "importPath": "arraystests",
        "description": "arraystests",
        "peekOfCode": "change_key = \"\"\n#Check if the user input matches any of the keys\nfor i in range(len(keys)):\n    if check_key == keys[i]:\n# Get the user input for the new key\n        change_key = input(f\"{'\\033[34m'}{keys[i]}{'\\033[0m'} {names[i]} {books[i]}: \")\n# Update the key\nkeys[i] = change_key\n# Print the updated key, name, and book\nprint(f\"Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")",
        "detail": "arraystests",
        "documentation": {}
    },
    {
        "label": "keys[i]",
        "kind": 5,
        "importPath": "arraystests",
        "description": "arraystests",
        "peekOfCode": "keys[i] = change_key\n# Print the updated key, name, and book\nprint(f\"Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\nbreak\n#Print the updated list of keys, names, and books\nfor i in range(len(keys)):\nprint(f\"{i+1}. Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")",
        "detail": "arraystests",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "class1 copy 10",
        "description": "class1 copy 10",
        "peekOfCode": "class Item:\n    def __init__(self, name, cost, value):\n        self.name = name\n        self.cost = cost\n        self.value = value\nattributes = extract_attributes('Item')\nprint(attributes)\nprint(type(attributes))\nclass Weapon (Item):\n    def __init__(self, damage, *attributes):",
        "detail": "class1 copy 10",
        "documentation": {}
    },
    {
        "label": "Weapo",
        "kind": 6,
        "importPath": "class1 copy 10",
        "description": "class1 copy 10",
        "peekOfCode": "class Weapon (Item):\n    def __init__(self, damage, *attributes):\n        super().__init__(*attributes)\n        self.damage = damage\n# You can now create an instance of the Weapon class by passing the arguments in the order they are defined in the class definition\nredsword = Weapon(25, \"redsword\", 250, 18)\nprint(attributes)\nprint(redsword.__dict__)",
        "detail": "class1 copy 10",
        "documentation": {}
    },
    {
        "label": "extract_attributes",
        "kind": 2,
        "importPath": "class1 copy 10",
        "description": "class1 copy 10",
        "peekOfCode": "def extract_attributes(cls_name):\n    cls = globals()[cls_name]\n    cls_def = inspect.getsource(cls)\n    pattern = r\"def __init__\\((.*?)\\)\"\n    match = re.search(pattern, cls_def)\n    if match:\n        attrs = match.group(1).split(',')\n        return tuple(attr.strip().strip(\"'\") for attr in attrs[1:])\nclass Item:\n    def __init__(self, name, cost, value):",
        "detail": "class1 copy 10",
        "documentation": {}
    },
    {
        "label": "attributes",
        "kind": 5,
        "importPath": "class1 copy 10",
        "description": "class1 copy 10",
        "peekOfCode": "attributes = extract_attributes('Item')\nprint(attributes)\nprint(type(attributes))\nclass Weapon (Item):\n    def __init__(self, damage, *attributes):\n        super().__init__(*attributes)\n        self.damage = damage\n# You can now create an instance of the Weapon class by passing the arguments in the order they are defined in the class definition\nredsword = Weapon(25, \"redsword\", 250, 18)\nprint(attributes)",
        "detail": "class1 copy 10",
        "documentation": {}
    },
    {
        "label": "redsword",
        "kind": 5,
        "importPath": "class1 copy 10",
        "description": "class1 copy 10",
        "peekOfCode": "redsword = Weapon(25, \"redsword\", 250, 18)\nprint(attributes)\nprint(redsword.__dict__)",
        "detail": "class1 copy 10",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "class1 copy 2",
        "description": "class1 copy 2",
        "peekOfCode": "class Item:\n    def __init__(self, name, cost, value):\n        self.name = name\n        self.cost = cost\n        self.value = value\nattributes = extract_attributes('Item')\nclass Weapon (Item):\n    def __init__(self, *attributes, damage):\n        super().__init__(*attributes)\n        self.damage = damage",
        "detail": "class1 copy 2",
        "documentation": {}
    },
    {
        "label": "Weapo",
        "kind": 6,
        "importPath": "class1 copy 2",
        "description": "class1 copy 2",
        "peekOfCode": "class Weapon (Item):\n    def __init__(self, *attributes, damage):\n        super().__init__(*attributes)\n        self.damage = damage\n# You can now create an instance of the Weapon class by passing the arguments in the order they are defined in the class definition\nredsword = Weapon(\"redsword\", 250, 25, 18)",
        "detail": "class1 copy 2",
        "documentation": {}
    },
    {
        "label": "extract_attributes",
        "kind": 2,
        "importPath": "class1 copy 2",
        "description": "class1 copy 2",
        "peekOfCode": "def extract_attributes(cls_name):\n    cls = globals()[cls_name]\n    cls_def = inspect.getsource(cls)\n    pattern = r\"def __init__\\((.*?)\\)\"\n    match = re.search(pattern, cls_def)\n    if match:\n        attrs = match.group(1).split(',')\n        return tuple(attr.strip().strip(\"'\") for attr in attrs)\nclass Item:\n    def __init__(self, name, cost, value):",
        "detail": "class1 copy 2",
        "documentation": {}
    },
    {
        "label": "attributes",
        "kind": 5,
        "importPath": "class1 copy 2",
        "description": "class1 copy 2",
        "peekOfCode": "attributes = extract_attributes('Item')\nclass Weapon (Item):\n    def __init__(self, *attributes, damage):\n        super().__init__(*attributes)\n        self.damage = damage\n# You can now create an instance of the Weapon class by passing the arguments in the order they are defined in the class definition\nredsword = Weapon(\"redsword\", 250, 25, 18)",
        "detail": "class1 copy 2",
        "documentation": {}
    },
    {
        "label": "redsword",
        "kind": 5,
        "importPath": "class1 copy 2",
        "description": "class1 copy 2",
        "peekOfCode": "redsword = Weapon(\"redsword\", 250, 25, 18)",
        "detail": "class1 copy 2",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "class1 copy 3",
        "description": "class1 copy 3",
        "peekOfCode": "class Item:\n    def __init__(self, name, cost, value):\n        self.name = name\n        self.cost = cost\n        self.value = value\nattributes = extract_attributes('Item')\nclass Weapon(Item):\n    def __init__(self, *args, damage):\n        super().__init__(*args)\n        self.damage = damage",
        "detail": "class1 copy 3",
        "documentation": {}
    },
    {
        "label": "Weapon",
        "kind": 6,
        "importPath": "class1 copy 3",
        "description": "class1 copy 3",
        "peekOfCode": "class Weapon(Item):\n    def __init__(self, *args, damage):\n        super().__init__(*args)\n        self.damage = damage\n# You can now create an instance of the Weapon class by passing the arguments in the order they are defined in the class definition\nredsword = Weapon(\"redsword\", 250, 25, 18)",
        "detail": "class1 copy 3",
        "documentation": {}
    },
    {
        "label": "extract_attributes",
        "kind": 2,
        "importPath": "class1 copy 3",
        "description": "class1 copy 3",
        "peekOfCode": "def extract_attributes(cls_name):\n    cls = globals()[cls_name]\n    cls_def = inspect.getsource(cls)\n    pattern = r\"def __init__\\((.*?)\\)\"\n    match = re.search(pattern, cls_def)\n    if match:\n        attrs = match.group(1).split(',')\n        return tuple(attr.strip().strip(\"'\") for attr in attrs)\nclass Item:\n    def __init__(self, name, cost, value):",
        "detail": "class1 copy 3",
        "documentation": {}
    },
    {
        "label": "attributes",
        "kind": 5,
        "importPath": "class1 copy 3",
        "description": "class1 copy 3",
        "peekOfCode": "attributes = extract_attributes('Item')\nclass Weapon(Item):\n    def __init__(self, *args, damage):\n        super().__init__(*args)\n        self.damage = damage\n# You can now create an instance of the Weapon class by passing the arguments in the order they are defined in the class definition\nredsword = Weapon(\"redsword\", 250, 25, 18)",
        "detail": "class1 copy 3",
        "documentation": {}
    },
    {
        "label": "redsword",
        "kind": 5,
        "importPath": "class1 copy 3",
        "description": "class1 copy 3",
        "peekOfCode": "redsword = Weapon(\"redsword\", 250, 25, 18)",
        "detail": "class1 copy 3",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "class1 copy 4",
        "description": "class1 copy 4",
        "peekOfCode": "class Item:\n    def __init__(self, name, cost, value):\n        self.name = name\n        self.cost = cost\n        self.value = value\nattributes = extract_attributes('Item')\nclass Weapon (Item):\n    def __init__(self, damage, **attributes):\n        super().__init__(**attributes)\n        self.damage = damage",
        "detail": "class1 copy 4",
        "documentation": {}
    },
    {
        "label": "Weapo",
        "kind": 6,
        "importPath": "class1 copy 4",
        "description": "class1 copy 4",
        "peekOfCode": "class Weapon (Item):\n    def __init__(self, damage, **attributes):\n        super().__init__(**attributes)\n        self.damage = damage\n# You can now create an instance of the Weapon class by passing the arguments in the order they are defined in the class definition\nredsword = Weapon(25, name=\"redsword\", cost=250, value=18)\nprint(redsword.__dict__)",
        "detail": "class1 copy 4",
        "documentation": {}
    },
    {
        "label": "extract_attributes",
        "kind": 2,
        "importPath": "class1 copy 4",
        "description": "class1 copy 4",
        "peekOfCode": "def extract_attributes(cls_name):\n    cls = globals()[cls_name]\n    cls_def = inspect.getsource(cls)\n    pattern = r\"def __init__\\((.*?)\\)\"\n    match = re.search(pattern, cls_def)\n    if match:\n        attrs_str = match.group(1)\n        # Extract the default values for the attributes\n        defaults = {}\n        for attr in attrs_str.split(','):",
        "detail": "class1 copy 4",
        "documentation": {}
    },
    {
        "label": "attributes",
        "kind": 5,
        "importPath": "class1 copy 4",
        "description": "class1 copy 4",
        "peekOfCode": "attributes = extract_attributes('Item')\nclass Weapon (Item):\n    def __init__(self, damage, **attributes):\n        super().__init__(**attributes)\n        self.damage = damage\n# You can now create an instance of the Weapon class by passing the arguments in the order they are defined in the class definition\nredsword = Weapon(25, name=\"redsword\", cost=250, value=18)\nprint(redsword.__dict__)",
        "detail": "class1 copy 4",
        "documentation": {}
    },
    {
        "label": "redsword",
        "kind": 5,
        "importPath": "class1 copy 4",
        "description": "class1 copy 4",
        "peekOfCode": "redsword = Weapon(25, name=\"redsword\", cost=250, value=18)\nprint(redsword.__dict__)",
        "detail": "class1 copy 4",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "class1 copy 5",
        "description": "class1 copy 5",
        "peekOfCode": "class Item:\n    def __init__(self, name, cost, value):\n        self.name = name\n        self.cost = cost\n        self.value = value\nattributes = extract_attributes('Item')\nprint(attributes)\ntype(attributes)\nclass Weapon (Item):\n    def __init__(self, damage, *attributes):",
        "detail": "class1 copy 5",
        "documentation": {}
    },
    {
        "label": "Weapo",
        "kind": 6,
        "importPath": "class1 copy 5",
        "description": "class1 copy 5",
        "peekOfCode": "class Weapon (Item):\n    def __init__(self, damage, *attributes):\n        super().__init__(*attributes)\n        self.damage = damage\n# You can now create an instance of the Weapon class by passing the arguments in the order they are defined in the class definition\nredsword = Weapon(25, \"redsword\", 250, 18)\nprint(attributes)\nprint(redsword.__dict__)",
        "detail": "class1 copy 5",
        "documentation": {}
    },
    {
        "label": "extract_attributes",
        "kind": 2,
        "importPath": "class1 copy 5",
        "description": "class1 copy 5",
        "peekOfCode": "def extract_attributes(cls_name):\n    cls = globals()[cls_name]\n    cls_def = inspect.getsource(cls)\n    pattern = r\"def __init__\\((.*?)\\)\"\n    match = re.search(pattern, cls_def)\n    if match:\n        attrs = match.group(1).split(',')\n        return tuple(attr.strip().strip(\"'\") for attr in attrs)\nclass Item:\n    def __init__(self, name, cost, value):",
        "detail": "class1 copy 5",
        "documentation": {}
    },
    {
        "label": "attributes",
        "kind": 5,
        "importPath": "class1 copy 5",
        "description": "class1 copy 5",
        "peekOfCode": "attributes = extract_attributes('Item')\nprint(attributes)\ntype(attributes)\nclass Weapon (Item):\n    def __init__(self, damage, *attributes):\n        super().__init__(*attributes)\n        self.damage = damage\n# You can now create an instance of the Weapon class by passing the arguments in the order they are defined in the class definition\nredsword = Weapon(25, \"redsword\", 250, 18)\nprint(attributes)",
        "detail": "class1 copy 5",
        "documentation": {}
    },
    {
        "label": "redsword",
        "kind": 5,
        "importPath": "class1 copy 5",
        "description": "class1 copy 5",
        "peekOfCode": "redsword = Weapon(25, \"redsword\", 250, 18)\nprint(attributes)\nprint(redsword.__dict__)",
        "detail": "class1 copy 5",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "class1 copy 6",
        "description": "class1 copy 6",
        "peekOfCode": "class Item:\n    def __init__(self, name, cost, value):\n        self.name = name\n        self.cost = cost\n        self.value = value\nattributes = extract_attributes('Item')\nprint(attributes)\ntype(attributes)\nclass Weapon (Item):\n    def __init__(self, *attributes, damage):",
        "detail": "class1 copy 6",
        "documentation": {}
    },
    {
        "label": "Weapo",
        "kind": 6,
        "importPath": "class1 copy 6",
        "description": "class1 copy 6",
        "peekOfCode": "class Weapon (Item):\n    def __init__(self, *attributes, damage):\n        super().__init__(*attributes)\n        self.damage = damage\n# You can now create an instance of the Weapon class by passing the arguments in the order they are defined in the class definition\nredsword = Weapon(25, \"redsword\", 250, 18)\nprint(attributes)\nprint(redsword.__dict__)",
        "detail": "class1 copy 6",
        "documentation": {}
    },
    {
        "label": "extract_attributes",
        "kind": 2,
        "importPath": "class1 copy 6",
        "description": "class1 copy 6",
        "peekOfCode": "def extract_attributes(cls_name):\n    cls = globals()[cls_name]\n    cls_def = inspect.getsource(cls)\n    pattern = r\"def __init__\\((.*?)\\)\"\n    match = re.search(pattern, cls_def)\n    if match:\n        attrs = match.group(1).split(',')\n        return tuple(attr.strip().strip(\"'\") for attr in attrs)\nclass Item:\n    def __init__(self, name, cost, value):",
        "detail": "class1 copy 6",
        "documentation": {}
    },
    {
        "label": "attributes",
        "kind": 5,
        "importPath": "class1 copy 6",
        "description": "class1 copy 6",
        "peekOfCode": "attributes = extract_attributes('Item')\nprint(attributes)\ntype(attributes)\nclass Weapon (Item):\n    def __init__(self, *attributes, damage):\n        super().__init__(*attributes)\n        self.damage = damage\n# You can now create an instance of the Weapon class by passing the arguments in the order they are defined in the class definition\nredsword = Weapon(25, \"redsword\", 250, 18)\nprint(attributes)",
        "detail": "class1 copy 6",
        "documentation": {}
    },
    {
        "label": "redsword",
        "kind": 5,
        "importPath": "class1 copy 6",
        "description": "class1 copy 6",
        "peekOfCode": "redsword = Weapon(25, \"redsword\", 250, 18)\nprint(attributes)\nprint(redsword.__dict__)",
        "detail": "class1 copy 6",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "class1 copy 7",
        "description": "class1 copy 7",
        "peekOfCode": "class Item:\n    def __init__(self, name, cost, value):\n        self.name = name\n        self.cost = cost\n        self.value = value\nattributes = extract_attributes('Item')\nclass Weapon (Item):\n    def __init__(self, *attributes, damage):\n        super().__init__(*attributes)\n        self.damage = damage",
        "detail": "class1 copy 7",
        "documentation": {}
    },
    {
        "label": "Weapo",
        "kind": 6,
        "importPath": "class1 copy 7",
        "description": "class1 copy 7",
        "peekOfCode": "class Weapon (Item):\n    def __init__(self, *attributes, damage):\n        super().__init__(*attributes)\n        self.damage = damage\n# You can now create an instance of the Weapon class by passing the arguments in the order they are defined in the class definition\nredsword = Weapon(\"redsword\", 250, 25, 18)\nprint(redsword.__dict__)\nprint(attributes)\nprint(redsword.__dict__)",
        "detail": "class1 copy 7",
        "documentation": {}
    },
    {
        "label": "extract_attributes",
        "kind": 2,
        "importPath": "class1 copy 7",
        "description": "class1 copy 7",
        "peekOfCode": "def extract_attributes(cls_name):\n    cls = globals()[cls_name]\n    cls_def = inspect.getsource(cls)\n    pattern = r\"def __init__\\((.*?)\\)\"\n    match = re.search(pattern, cls_def)\n    if match:\n        attrs = match.group(1).split(',')\n        return tuple(attr.strip().strip(\"'\") for attr in attrs)\nclass Item:\n    def __init__(self, name, cost, value):",
        "detail": "class1 copy 7",
        "documentation": {}
    },
    {
        "label": "attributes",
        "kind": 5,
        "importPath": "class1 copy 7",
        "description": "class1 copy 7",
        "peekOfCode": "attributes = extract_attributes('Item')\nclass Weapon (Item):\n    def __init__(self, *attributes, damage):\n        super().__init__(*attributes)\n        self.damage = damage\n# You can now create an instance of the Weapon class by passing the arguments in the order they are defined in the class definition\nredsword = Weapon(\"redsword\", 250, 25, 18)\nprint(redsword.__dict__)\nprint(attributes)\nprint(redsword.__dict__)",
        "detail": "class1 copy 7",
        "documentation": {}
    },
    {
        "label": "redsword",
        "kind": 5,
        "importPath": "class1 copy 7",
        "description": "class1 copy 7",
        "peekOfCode": "redsword = Weapon(\"redsword\", 250, 25, 18)\nprint(redsword.__dict__)\nprint(attributes)\nprint(redsword.__dict__)",
        "detail": "class1 copy 7",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "class1 copy 8",
        "description": "class1 copy 8",
        "peekOfCode": "class Item:\n    def __init__(self, name, cost, value):\n        self.name = name\n        self.cost = cost\n        self.value = value\nattributes = extract_attributes('Item')\nclass Weapon (Item):\n    def __init__(self, damage, *attributes):\n        super().__init__(*attributes)\n        self.damage = damage",
        "detail": "class1 copy 8",
        "documentation": {}
    },
    {
        "label": "Weapo",
        "kind": 6,
        "importPath": "class1 copy 8",
        "description": "class1 copy 8",
        "peekOfCode": "class Weapon (Item):\n    def __init__(self, damage, *attributes):\n        super().__init__(*attributes)\n        self.damage = damage\nredsword = Weapon(25, \"redsword\", 250, 18)\nprint(redsword.__dict__)\nprint(Item.__dict__)\nprint(Weapon.__dict__)",
        "detail": "class1 copy 8",
        "documentation": {}
    },
    {
        "label": "extract_attributes",
        "kind": 2,
        "importPath": "class1 copy 8",
        "description": "class1 copy 8",
        "peekOfCode": "def extract_attributes(cls_name):\n    cls = globals()[cls_name]\n    cls_def = inspect.getsource(cls)\n    pattern = r\"def __init__\\((.*?)\\)\"\n    match = re.search(pattern, cls_def)\n    if match:\n        attrs = match.group(1).split(',')\n        return tuple(attr.strip().strip(\"'\") for attr in attrs)\nclass Item:\n    def __init__(self, name, cost, value):",
        "detail": "class1 copy 8",
        "documentation": {}
    },
    {
        "label": "attributes",
        "kind": 5,
        "importPath": "class1 copy 8",
        "description": "class1 copy 8",
        "peekOfCode": "attributes = extract_attributes('Item')\nclass Weapon (Item):\n    def __init__(self, damage, *attributes):\n        super().__init__(*attributes)\n        self.damage = damage\nredsword = Weapon(25, \"redsword\", 250, 18)\nprint(redsword.__dict__)\nprint(Item.__dict__)\nprint(Weapon.__dict__)",
        "detail": "class1 copy 8",
        "documentation": {}
    },
    {
        "label": "redsword",
        "kind": 5,
        "importPath": "class1 copy 8",
        "description": "class1 copy 8",
        "peekOfCode": "redsword = Weapon(25, \"redsword\", 250, 18)\nprint(redsword.__dict__)\nprint(Item.__dict__)\nprint(Weapon.__dict__)",
        "detail": "class1 copy 8",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "class1 copy 9",
        "description": "class1 copy 9",
        "peekOfCode": "class Item:\n    def __init__(self, name, cost, value):\n        self.name = name\n        self.cost = cost\n        self.value = value\nattributes = extract_attributes('Item')\nprint(attributes)\ntype(attributes)",
        "detail": "class1 copy 9",
        "documentation": {}
    },
    {
        "label": "extract_attributes",
        "kind": 2,
        "importPath": "class1 copy 9",
        "description": "class1 copy 9",
        "peekOfCode": "def extract_attributes(cls_name):\n    cls = globals()[cls_name]\n    cls_def = inspect.getsource(cls)\n    pattern = r\"def __init__\\((.*?)\\)\"\n    match = re.search(pattern, cls_def)\n    if match:\n        attrs = match.group(1).split(',')\n        return tuple(attr.strip().strip(\"'\") for attr in attrs[1:])\nclass Item:\n    def __init__(self, name, cost, value):",
        "detail": "class1 copy 9",
        "documentation": {}
    },
    {
        "label": "attributes",
        "kind": 5,
        "importPath": "class1 copy 9",
        "description": "class1 copy 9",
        "peekOfCode": "attributes = extract_attributes('Item')\nprint(attributes)\ntype(attributes)",
        "detail": "class1 copy 9",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "class1 copy",
        "description": "class1 copy",
        "peekOfCode": "class Item:\n    def __init__(self, name, cost, value):\n        self.name = name\n        self.cost = cost\n        self.value = value\nclass Weapon (Item):\n    def __init__(self, damage, **kwargs):\n        super().__init__(**kwargs)\n        self.damage = damage\n# Example usage:",
        "detail": "class1 copy",
        "documentation": {}
    },
    {
        "label": "Weapo",
        "kind": 6,
        "importPath": "class1 copy",
        "description": "class1 copy",
        "peekOfCode": "class Weapon (Item):\n    def __init__(self, damage, **kwargs):\n        super().__init__(**kwargs)\n        self.damage = damage\n# Example usage:\nredsword = Weapon(damage=25, name='redsword', cost=250, value=18)\n# Output: {'name': 'redsword', 'cost': 250, 'value': 18, 'damage': 25}\nprint(redsword.__dict__)",
        "detail": "class1 copy",
        "documentation": {}
    },
    {
        "label": "redsword",
        "kind": 5,
        "importPath": "class1 copy",
        "description": "class1 copy",
        "peekOfCode": "redsword = Weapon(damage=25, name='redsword', cost=250, value=18)\n# Output: {'name': 'redsword', 'cost': 250, 'value': 18, 'damage': 25}\nprint(redsword.__dict__)",
        "detail": "class1 copy",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "class1",
        "description": "class1",
        "peekOfCode": "class Item:\n    def __init__(self, name, cost, value):\n        self.name = name\n        self.cost = cost\n        self.value = value\nattributes = extract_attributes('Item')\nclass Weapon (Item):\n    def __init__(self, *attributes, damage):\n        super().__init__(*attributes)\n        self.damage = damage",
        "detail": "class1",
        "documentation": {}
    },
    {
        "label": "Weapo",
        "kind": 6,
        "importPath": "class1",
        "description": "class1",
        "peekOfCode": "class Weapon (Item):\n    def __init__(self, *attributes, damage):\n        super().__init__(*attributes)\n        self.damage = damage\n# You can now create an instance of the Weapon class by passing the arguments in the order they are defined in the class definition\nredsword = Weapon(\"redsword\", 250, 25, 18)\nprint(redsword.__dict__)",
        "detail": "class1",
        "documentation": {}
    },
    {
        "label": "extract_attributes",
        "kind": 2,
        "importPath": "class1",
        "description": "class1",
        "peekOfCode": "def extract_attributes(cls_name):\n    cls = globals()[cls_name]\n    cls_def = inspect.getsource(cls)\n    pattern = r\"def __init__\\((.*?)\\)\"\n    match = re.search(pattern, cls_def)\n    if match:\n        attrs = match.group(1).split(',')\n        return [attr.strip().strip(\"'\") for attr in attrs]\nclass Item:\n    def __init__(self, name, cost, value):",
        "detail": "class1",
        "documentation": {}
    },
    {
        "label": "attributes",
        "kind": 5,
        "importPath": "class1",
        "description": "class1",
        "peekOfCode": "attributes = extract_attributes('Item')\nclass Weapon (Item):\n    def __init__(self, *attributes, damage):\n        super().__init__(*attributes)\n        self.damage = damage\n# You can now create an instance of the Weapon class by passing the arguments in the order they are defined in the class definition\nredsword = Weapon(\"redsword\", 250, 25, 18)\nprint(redsword.__dict__)",
        "detail": "class1",
        "documentation": {}
    },
    {
        "label": "redsword",
        "kind": 5,
        "importPath": "class1",
        "description": "class1",
        "peekOfCode": "redsword = Weapon(\"redsword\", 250, 25, 18)\nprint(redsword.__dict__)",
        "detail": "class1",
        "documentation": {}
    },
    {
        "label": "get_window_by_title",
        "kind": 2,
        "importPath": "evaltest copy",
        "description": "evaltest copy",
        "peekOfCode": "def get_window_by_title(title):\n    \"\"\"Get the window handle for the window with the given title.\"\"\"\n    def callback(hwnd, window_list):\n        window_list.append(hwnd)\n    window_list = []\n    win32gui.EnumWindows(callback, window_list)\n    for hwnd in window_list:\n        if win32gui.GetWindowText(hwnd) == title:\n            return hwnd\n    return None",
        "detail": "evaltest copy",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "evaltest copy",
        "description": "evaltest copy",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window with the given handle.\"\"\"\n    if win32gui.IsWindowVisible(hwnd):\n        win32gui.ShowWindow(hwnd, win32con.SW_HIDE)\n    else:\n        win32gui.ShowWindow(hwnd, win32con.SW_SHOW)\ndef edit_program_1():\n    \"\"\"Edit the values in the start.ini file.\"\"\"\n    # Read the start.ini file\n    #with open(\"start.ini\", \"r\") as f:",
        "detail": "evaltest copy",
        "documentation": {}
    },
    {
        "label": "edit_program_1",
        "kind": 2,
        "importPath": "evaltest copy",
        "description": "evaltest copy",
        "peekOfCode": "def edit_program_1():\n    \"\"\"Edit the values in the start.ini file.\"\"\"\n    # Read the start.ini file\n    #with open(\"start.ini\", \"r\") as f:\n       # hotkey, action, program = f.read().strip().split(\", \")\n    # Get the new values from the user\n    print(\"[1][2]\")\n    key_settings = keyboard.read_hotkey()\n    if key_settings == \"1\":\n        hotkey = input(\"Hotkey: \")",
        "detail": "evaltest copy",
        "documentation": {}
    },
    {
        "label": "hotkey",
        "kind": 5,
        "importPath": "evaltest copy",
        "description": "evaltest copy",
        "peekOfCode": "hotkey = \"ctrl+c\"\naction = \"keyboard.send(f'explorer {program_1}')\"\nprogram = \"C:\\\\Program Files\\\\VideoLAN\\\\VLC\\\\vlc.exe\"\n# Set up the hotkeys\nkeyboard.add_hotkey(\"ctrl+z\", lambda: toggle_window_visibility(get_window_by_title(\"opensesame\")))\nkeyboard.add_hotkey(\"ctrl+x\", lambda: exit())\nkeyboard.add_hotkey(hotkey, lambda: eval(action))\nkeyboard.add_hotkey(\"ctrl+s\", lambda: edit_program_1())\n# Start the event loop\ntry:",
        "detail": "evaltest copy",
        "documentation": {}
    },
    {
        "label": "action",
        "kind": 5,
        "importPath": "evaltest copy",
        "description": "evaltest copy",
        "peekOfCode": "action = \"keyboard.send(f'explorer {program_1}')\"\nprogram = \"C:\\\\Program Files\\\\VideoLAN\\\\VLC\\\\vlc.exe\"\n# Set up the hotkeys\nkeyboard.add_hotkey(\"ctrl+z\", lambda: toggle_window_visibility(get_window_by_title(\"opensesame\")))\nkeyboard.add_hotkey(\"ctrl+x\", lambda: exit())\nkeyboard.add_hotkey(hotkey, lambda: eval(action))\nkeyboard.add_hotkey(\"ctrl+s\", lambda: edit_program_1())\n# Start the event loop\ntry:\n    # your code here",
        "detail": "evaltest copy",
        "documentation": {}
    },
    {
        "label": "program",
        "kind": 5,
        "importPath": "evaltest copy",
        "description": "evaltest copy",
        "peekOfCode": "program = \"C:\\\\Program Files\\\\VideoLAN\\\\VLC\\\\vlc.exe\"\n# Set up the hotkeys\nkeyboard.add_hotkey(\"ctrl+z\", lambda: toggle_window_visibility(get_window_by_title(\"opensesame\")))\nkeyboard.add_hotkey(\"ctrl+x\", lambda: exit())\nkeyboard.add_hotkey(hotkey, lambda: eval(action))\nkeyboard.add_hotkey(\"ctrl+s\", lambda: edit_program_1())\n# Start the event loop\ntry:\n    # your code here\n    keyboard.wait()",
        "detail": "evaltest copy",
        "documentation": {}
    },
    {
        "label": "get_window_by_title",
        "kind": 2,
        "importPath": "evaltest",
        "description": "evaltest",
        "peekOfCode": "def get_window_by_title(title):\n    \"\"\"Get the window handle for the window with the given title.\"\"\"\n    def callback(hwnd, window_list):\n        window_list.append(hwnd)\n    window_list = []\n    win32gui.EnumWindows(callback, window_list)\n    for hwnd in window_list:\n        if win32gui.GetWindowText(hwnd) == title:\n            return hwnd\n    return None",
        "detail": "evaltest",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "evaltest",
        "description": "evaltest",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window with the given handle.\"\"\"\n    if win32gui.IsWindowVisible(hwnd):\n        win32gui.ShowWindow(hwnd, win32con.SW_HIDE)\n    else:\n        win32gui.ShowWindow(hwnd, win32con.SW_SHOW)\ndef edit_program_1():\n    \"\"\"Edit the values in the start.ini file.\"\"\"\n    # Read the start.ini file\n    with open(\"eval.ini\", \"r\") as f:",
        "detail": "evaltest",
        "documentation": {}
    },
    {
        "label": "edit_program_1",
        "kind": 2,
        "importPath": "evaltest",
        "description": "evaltest",
        "peekOfCode": "def edit_program_1():\n    \"\"\"Edit the values in the start.ini file.\"\"\"\n    # Read the start.ini file\n    with open(\"eval.ini\", \"r\") as f:\n        hotkey, action, program = f.read().strip().split(\", \")\n    # Get the new values from the user\n    print(\"[1][2]\")\n    key_settings = keyboard.read_hotkey()\n    if key_settings == \"1\":\n        hotkey = input(\"Hotkey: \")",
        "detail": "evaltest",
        "documentation": {}
    },
    {
        "label": "hotkey",
        "kind": 5,
        "importPath": "evaltest",
        "description": "evaltest",
        "peekOfCode": "hotkey = \"ctrl+c\"\naction = \"keyboard.send(f'explorer {program_1}')\"",
        "detail": "evaltest",
        "documentation": {}
    },
    {
        "label": "action",
        "kind": 5,
        "importPath": "evaltest",
        "description": "evaltest",
        "peekOfCode": "action = \"keyboard.send(f'explorer {program_1}')\"",
        "detail": "evaltest",
        "documentation": {}
    },
    {
        "label": "bring_to_front",
        "kind": 2,
        "importPath": "last_tab_simple copy 2",
        "description": "last_tab_simple copy 2",
        "peekOfCode": "def bring_to_front(hwnd):\n    # Bring the window to the front\n    ctypes.windll.user32.SetForegroundWindow(hwnd)\ndef get_hwnd(program):\n    # Get the hwnd of the program\n    hwnd = ctypes.windll.user32.FindWindowW(None, program)\n    # Check if the program was found\n    if hwnd == 0:\n        print(f\"Error: Could not find {program}\")\n    else:",
        "detail": "last_tab_simple copy 2",
        "documentation": {}
    },
    {
        "label": "get_hwnd",
        "kind": 2,
        "importPath": "last_tab_simple copy 2",
        "description": "last_tab_simple copy 2",
        "peekOfCode": "def get_hwnd(program):\n    # Get the hwnd of the program\n    hwnd = ctypes.windll.user32.FindWindowW(None, program)\n    # Check if the program was found\n    if hwnd == 0:\n        print(f\"Error: Could not find {program}\")\n    else:\n        bring_to_front(hwnd)\n        return hwnd\n        redraw_keys()",
        "detail": "last_tab_simple copy 2",
        "documentation": {}
    },
    {
        "label": "redraw_keys",
        "kind": 2,
        "importPath": "last_tab_simple copy 2",
        "description": "last_tab_simple copy 2",
        "peekOfCode": "def redraw_keys():\n    for hotkey in hotkeys:\n        key, action, program, hwnd_id = hotkey\n        if action == \"bring_to_front\" and hwnd_id is not None:\n            hotkey[-1] = hwnd_id\n            keyboard.add_hotkey(key, lambda: bring_to_front(hwnd_id))\n            print(hotkey)\n        elif action == \"bring_to_front\":\n            keyboard.add_hotkey(key, lambda: get_hwnd(program))\n            print(hotkey)",
        "detail": "last_tab_simple copy 2",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "last_tab_simple copy 2",
        "description": "last_tab_simple copy 2",
        "peekOfCode": "hotkeys = [\n    [\"ctrl+e\", \"bring_to_front\", \"Untitled - Notepad\", None],\n    [\"ctrl+r\", \"bring_to_front\", \"VLC media player\", None]\n]\ndef redraw_keys():\n    for hotkey in hotkeys:\n        key, action, program, hwnd_id = hotkey\n        if action == \"bring_to_front\" and hwnd_id is not None:\n            hotkey[-1] = hwnd_id\n            keyboard.add_hotkey(key, lambda: bring_to_front(hwnd_id))",
        "detail": "last_tab_simple copy 2",
        "documentation": {}
    },
    {
        "label": "bring_to_front",
        "kind": 2,
        "importPath": "last_tab_simple copy 3",
        "description": "last_tab_simple copy 3",
        "peekOfCode": "def bring_to_front(hwnd):\n    # Bring the window to the front\n    ctypes.windll.user32.SetForegroundWindow(hwnd)\ndef get_hwnd(program):\n    # Get the hwnd of the program\n    hwnd = ctypes.windll.user32.FindWindowW(None, program)\n    # Check if the program was found\n    if hwnd == 0:\n        print(f\"Error: Could not find {program}\")\n        return None",
        "detail": "last_tab_simple copy 3",
        "documentation": {}
    },
    {
        "label": "get_hwnd",
        "kind": 2,
        "importPath": "last_tab_simple copy 3",
        "description": "last_tab_simple copy 3",
        "peekOfCode": "def get_hwnd(program):\n    # Get the hwnd of the program\n    hwnd = ctypes.windll.user32.FindWindowW(None, program)\n    # Check if the program was found\n    if hwnd == 0:\n        print(f\"Error: Could not find {program}\")\n        return None\n    else:\n        bring_to_front(hwnd)\n        return hwnd",
        "detail": "last_tab_simple copy 3",
        "documentation": {}
    },
    {
        "label": "redraw_keys",
        "kind": 2,
        "importPath": "last_tab_simple copy 3",
        "description": "last_tab_simple copy 3",
        "peekOfCode": "def redraw_keys():\n    for hotkey in hotkeys:\n        key, action, program, hwnd_id = hotkey\n        if action == \"bring_to_front\" and hwnd_id is not None:\n            # Use partial to capture the value of hwnd_id\n            hotkey_func = partial(bring_to_front, hwnd_id)\n            keyboard.add_hotkey(key, hotkey_func)\n        elif action == \"bring_to_front\":\n            # Use partial to capture the value of program\n            hotkey_func = partial(get_hwnd, program)",
        "detail": "last_tab_simple copy 3",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "last_tab_simple copy 3",
        "description": "last_tab_simple copy 3",
        "peekOfCode": "hotkeys = [\n    [\"ctrl+e\", \"bring_to_front\", \"Untitled - Notepad\", None],\n    [\"ctrl+r\", \"bring_to_front\", \"VLC media player\", None]\n]\ndef redraw_keys():\n    for hotkey in hotkeys:\n        key, action, program, hwnd_id = hotkey\n        if action == \"bring_to_front\" and hwnd_id is not None:\n            # Use partial to capture the value of hwnd_id\n            hotkey_func = partial(bring_to_front, hwnd_id)",
        "detail": "last_tab_simple copy 3",
        "documentation": {}
    },
    {
        "label": "bring_to_front",
        "kind": 2,
        "importPath": "last_tab_simple copy",
        "description": "last_tab_simple copy",
        "peekOfCode": "def bring_to_front(hwnd):\n    # Bring the window to the front\n    ctypes.windll.user32.SetForegroundWindow(hwnd)\ndef get_hwnd(program):\n    # Get the hwnd of the program\n    hwnd = ctypes.windll.user32.FindWindowW(None, program)\n    # Check if the program was found\n    if hwnd == 0:\n        print(f\"Error: Could not find {program}\")\n    else:",
        "detail": "last_tab_simple copy",
        "documentation": {}
    },
    {
        "label": "get_hwnd",
        "kind": 2,
        "importPath": "last_tab_simple copy",
        "description": "last_tab_simple copy",
        "peekOfCode": "def get_hwnd(program):\n    # Get the hwnd of the program\n    hwnd = ctypes.windll.user32.FindWindowW(None, program)\n    # Check if the program was found\n    if hwnd == 0:\n        print(f\"Error: Could not find {program}\")\n    else:\n        bring_to_front(hwnd)\n        return hwnd\n# Initialize the hotkeys list",
        "detail": "last_tab_simple copy",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "last_tab_simple copy",
        "description": "last_tab_simple copy",
        "peekOfCode": "hotkeys = [\n    [\"ctrl+e\", \"bring_to_front\", \"Untitled - Notepad\", None],\n    [\"ctrl+r\", \"bring_to_front\", \"VLC media player\", None]\n]\nfor hotkey in hotkeys:\n    key, action, program, hwnd_id = hotkey\n    if action == \"bring_to_front\" and hwnd_id is not None:\n        keyboard.add_hotkey(key, lambda: bring_to_front(hwnd_id))\n        print(hotkey)\n    else:",
        "detail": "last_tab_simple copy",
        "documentation": {}
    },
    {
        "label": "open_program",
        "kind": 2,
        "importPath": "last_tab_simple",
        "description": "last_tab_simple",
        "peekOfCode": "def open_program(program):\n    # Use the `os` library to open the program\n    import os\n    os.startfile(program)\n# Function to bring a program to the front\ndef bring_to_front(program):\n    # Use `ctypes` to get the handle of the program window\n    hwnd = ctypes.windll.user32.FindWindowW(None, program)\n    print(f\"bringtofront {hwnd}\")\n    # Use `ctypes` to bring the window to the front",
        "detail": "last_tab_simple",
        "documentation": {}
    },
    {
        "label": "bring_to_front",
        "kind": 2,
        "importPath": "last_tab_simple",
        "description": "last_tab_simple",
        "peekOfCode": "def bring_to_front(program):\n    # Use `ctypes` to get the handle of the program window\n    hwnd = ctypes.windll.user32.FindWindowW(None, program)\n    print(f\"bringtofront {hwnd}\")\n    # Use `ctypes` to bring the window to the front\n    ctypes.windll.user32.SetForegroundWindow(hwnd)\n# Iterate over the hotkeys and set up the appropriate action\nfor hotkey in hotkeys:\n    key, action, program = hotkey\n    if action == \"open\":",
        "detail": "last_tab_simple",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "last_tab_simple",
        "description": "last_tab_simple",
        "peekOfCode": "hotkeys = [\n    [\"ctrl+e\", \"open\", \"notepad\"],\n    [\"ctrl+r\", \"open\", \"vlc media player\"],\n    [\"ctrl+t\", \"bring_to_front\", \"Untitled - Notepad\"],\n    [\"ctrl+y\", \"bring_to_front\", \"vlc media player\"]\n]\n# Function to open a program\ndef open_program(program):\n    # Use the `os` library to open the program\n    import os",
        "detail": "last_tab_simple",
        "documentation": {}
    },
    {
        "label": "PROGRAM_1",
        "kind": 5,
        "importPath": "opensesame copy",
        "description": "opensesame copy",
        "peekOfCode": "PROGRAM_1 = \"\"\n# Check for start.ini file and set PROGRAM_1\nif os.path.exists(\"start.ini\"):\n    with open(\"start.ini\") as f:\n        PROGRAM_1 = f.read()\n# Display instructions\nprint(\"Hide: [ctrl][z] Close: [ctrl][x] Open [ctrl][c] Edit [ctrl][a]\")\nwhile True:\n    try:\n        # Wait for a key press",
        "detail": "opensesame copy",
        "documentation": {}
    },
    {
        "label": "hide_program",
        "kind": 2,
        "importPath": "opensesame exact",
        "description": "opensesame exact",
        "peekOfCode": "def hide_program():\n    keyboard.send('alt+tab')\ndef close_program():\n    exit()\ndef open_program_1():\n    os.startfile(program_1)\ndef edit_start_ini():\n    with open('start.ini', 'w') as f:\n        f.write(input(\"Enter the new location for program 1: \"))\n# Register keyboard shortcuts",
        "detail": "opensesame exact",
        "documentation": {}
    },
    {
        "label": "close_program",
        "kind": 2,
        "importPath": "opensesame exact",
        "description": "opensesame exact",
        "peekOfCode": "def close_program():\n    exit()\ndef open_program_1():\n    os.startfile(program_1)\ndef edit_start_ini():\n    with open('start.ini', 'w') as f:\n        f.write(input(\"Enter the new location for program 1: \"))\n# Register keyboard shortcuts\nkeyboard.add_hotkey('ctrl+z', hide_program)\nkeyboard.add_hotkey('ctrl+x', close_program)",
        "detail": "opensesame exact",
        "documentation": {}
    },
    {
        "label": "open_program_1",
        "kind": 2,
        "importPath": "opensesame exact",
        "description": "opensesame exact",
        "peekOfCode": "def open_program_1():\n    os.startfile(program_1)\ndef edit_start_ini():\n    with open('start.ini', 'w') as f:\n        f.write(input(\"Enter the new location for program 1: \"))\n# Register keyboard shortcuts\nkeyboard.add_hotkey('ctrl+z', hide_program)\nkeyboard.add_hotkey('ctrl+x', close_program)\nkeyboard.add_hotkey('ctrl+c', open_program_1)\nkeyboard.add_hotkey('ctrl+a', edit_start_ini)",
        "detail": "opensesame exact",
        "documentation": {}
    },
    {
        "label": "edit_start_ini",
        "kind": 2,
        "importPath": "opensesame exact",
        "description": "opensesame exact",
        "peekOfCode": "def edit_start_ini():\n    with open('start.ini', 'w') as f:\n        f.write(input(\"Enter the new location for program 1: \"))\n# Register keyboard shortcuts\nkeyboard.add_hotkey('ctrl+z', hide_program)\nkeyboard.add_hotkey('ctrl+x', close_program)\nkeyboard.add_hotkey('ctrl+c', open_program_1)\nkeyboard.add_hotkey('ctrl+a', edit_start_ini)\n# Wait for keyboard shortcuts to be triggered\ntry:",
        "detail": "opensesame exact",
        "documentation": {}
    },
    {
        "label": "hide_program",
        "kind": 2,
        "importPath": "opensesame",
        "description": "opensesame",
        "peekOfCode": "def hide_program():\n    keyboard.send('alt+tab')\ndef close_program():\n    exit()\ndef open_program_1():\n    os.startfile(program_1)\ndef edit_start_ini():\n    with open('start.ini', 'w') as f:\n        f.write(input(\"Enter the new location for program 1: \"))\n# Register keyboard shortcuts",
        "detail": "opensesame",
        "documentation": {}
    },
    {
        "label": "close_program",
        "kind": 2,
        "importPath": "opensesame",
        "description": "opensesame",
        "peekOfCode": "def close_program():\n    exit()\ndef open_program_1():\n    os.startfile(program_1)\ndef edit_start_ini():\n    with open('start.ini', 'w') as f:\n        f.write(input(\"Enter the new location for program 1: \"))\n# Register keyboard shortcuts\nkeyboard.add_hotkey('ctrl+z', hide_program)\nkeyboard.add_hotkey('ctrl+x', close_program)",
        "detail": "opensesame",
        "documentation": {}
    },
    {
        "label": "open_program_1",
        "kind": 2,
        "importPath": "opensesame",
        "description": "opensesame",
        "peekOfCode": "def open_program_1():\n    os.startfile(program_1)\ndef edit_start_ini():\n    with open('start.ini', 'w') as f:\n        f.write(input(\"Enter the new location for program 1: \"))\n# Register keyboard shortcuts\nkeyboard.add_hotkey('ctrl+z', hide_program)\nkeyboard.add_hotkey('ctrl+x', close_program)\nkeyboard.add_hotkey('ctrl+c', open_program_1)\nkeyboard.add_hotkey('ctrl+a', edit_start_ini)",
        "detail": "opensesame",
        "documentation": {}
    },
    {
        "label": "edit_start_ini",
        "kind": 2,
        "importPath": "opensesame",
        "description": "opensesame",
        "peekOfCode": "def edit_start_ini():\n    with open('start.ini', 'w') as f:\n        f.write(input(\"Enter the new location for program 1: \"))\n# Register keyboard shortcuts\nkeyboard.add_hotkey('ctrl+z', hide_program)\nkeyboard.add_hotkey('ctrl+x', close_program)\nkeyboard.add_hotkey('ctrl+c', open_program_1)\nkeyboard.add_hotkey('ctrl+a', edit_start_ini)\n# Wait for keyboard shortcuts to be triggered\ntry:",
        "detail": "opensesame",
        "documentation": {}
    },
    {
        "label": "edit_program_1",
        "kind": 2,
        "importPath": "opensesame3",
        "description": "opensesame3",
        "peekOfCode": "def edit_program_1():\n    print(\"[1] Edit Program 1\")\n    print(\"[2] Cancel\")\n    key_settings = keyboard.read_hotkey()\n    if key_settings == \"1\":\n        program_1 = input(\"Program 1: \")\n        # check if input is a string\n        if isinstance(program_1, str):\n            # save program_1 value to start.ini file\n            with open(\"start.ini\", \"w\") as f:",
        "detail": "opensesame3",
        "documentation": {}
    },
    {
        "label": "program_1",
        "kind": 5,
        "importPath": "opensesame3",
        "description": "opensesame3",
        "peekOfCode": "program_1 = \"\"\n# check for start.ini file and get program_1 value\ntry:\n    with open(\"start.ini\", \"r\") as f:\n        program_1 = f.readline().strip()\nexcept FileNotFoundError:\n    pass\n# print instructions\nprint(\"Hide: [ctrl][z] Close: [ctrl][x] Open [ctrl][c] Edit [ctrl][s] that will stay on the screen.\")\n# key bindings",
        "detail": "opensesame3",
        "documentation": {}
    },
    {
        "label": "get_window_by_title",
        "kind": 2,
        "importPath": "opses4 - Copy",
        "description": "opses4 - Copy",
        "peekOfCode": "def get_window_by_title(title):\n    \"\"\"Get the window handle for the window with the given title.\"\"\"\n    def callback(hwnd, window_list):\n        window_list.append(hwnd)\n    window_list = []\n    win32gui.EnumWindows(callback, window_list)\n    for hwnd in window_list:\n        if win32gui.GetWindowText(hwnd) == title:\n            return hwnd\n    return None",
        "detail": "opses4 - Copy",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "opses4 - Copy",
        "description": "opses4 - Copy",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window with the given handle.\"\"\"\n    if win32gui.IsWindowVisible(hwnd):\n        win32gui.ShowWindow(hwnd, win32con.SW_HIDE)\n    else:\n        win32gui.ShowWindow(hwnd, win32con.SW_SHOW)\ndef edit_program_1():\n    \"\"\"Edit the value of program_1.\"\"\"\n    global program_1\n    print(\"[1][2]\")",
        "detail": "opses4 - Copy",
        "documentation": {}
    },
    {
        "label": "edit_program_1",
        "kind": 2,
        "importPath": "opses4 - Copy",
        "description": "opses4 - Copy",
        "peekOfCode": "def edit_program_1():\n    \"\"\"Edit the value of program_1.\"\"\"\n    global program_1\n    print(\"[1][2]\")\ndef edit_program_1():\n    \"\"\"Edit the value of program_1.\"\"\"\n    global program_1\n    print(\"[1][2]\")\n    # key_settings = keyboard.read_hotkey()\n    # if key_settings == \"1\":",
        "detail": "opses4 - Copy",
        "documentation": {}
    },
    {
        "label": "edit_program_1",
        "kind": 2,
        "importPath": "opses4 - Copy",
        "description": "opses4 - Copy",
        "peekOfCode": "def edit_program_1():\n    \"\"\"Edit the value of program_1.\"\"\"\n    global program_1\n    print(\"[1][2]\")\n    # key_settings = keyboard.read_hotkey()\n    # if key_settings == \"1\":\n    if 0 == 0:\n        # Read the current value of program_1 from start.ini\n        with open(\"start.ini\", \"r\") as f:\n            program_1 = f.readlines()[0].strip()",
        "detail": "opses4 - Copy",
        "documentation": {}
    },
    {
        "label": "program_1",
        "kind": 5,
        "importPath": "opses4 - Copy",
        "description": "opses4 - Copy",
        "peekOfCode": "program_1 = \"C:\\\\Program Files\\\\VideoLAN\\\\VLC\\\\vlc.exe\"\n# Set up the hotkeys\nkeyboard.add_hotkey(\n    \"ctrl+z\", lambda: toggle_window_visibility(get_window_by_title(\"opensesame\")))\nkeyboard.add_hotkey(\"ctrl+x\", lambda: exit())\nkeyboard.add_hotkey(\"ctrl+c\", lambda: keyboard.send(f\"open {program_1}\"))\nkeyboard.add_hotkey(\"ctrl+s\", lambda: edit_program_1())\n# Start the event loop\ntry:\n    # your code here",
        "detail": "opses4 - Copy",
        "documentation": {}
    },
    {
        "label": "get_window_by_title",
        "kind": 2,
        "importPath": "opses4",
        "description": "opses4",
        "peekOfCode": "def get_window_by_title(title):\n    \"\"\"Get the window handle for the window with the given title.\"\"\"\n    def callback(hwnd, window_list):\n        window_list.append(hwnd)\n    window_list = []\n    win32gui.EnumWindows(callback, window_list)\n    for hwnd in window_list:\n        if win32gui.GetWindowText(hwnd) == title:\n            return hwnd\n    return None",
        "detail": "opses4",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "opses4",
        "description": "opses4",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window with the given handle.\"\"\"\n    if win32gui.IsWindowVisible(hwnd):\n        win32gui.ShowWindow(hwnd, win32con.SW_HIDE)\n    else:\n        win32gui.ShowWindow(hwnd, win32con.SW_SHOW)\ndef edit_program_1():\n    \"\"\"Edit the value of program_1.\"\"\"\n    global program_1\n    print(\"[1][2]\")",
        "detail": "opses4",
        "documentation": {}
    },
    {
        "label": "edit_program_1",
        "kind": 2,
        "importPath": "opses4",
        "description": "opses4",
        "peekOfCode": "def edit_program_1():\n    \"\"\"Edit the value of program_1.\"\"\"\n    global program_1\n    print(\"[1][2]\")\ndef edit_program_1():\n    \"\"\"Edit the value of program_1.\"\"\"\n    global program_1\n    print(\"[1][2]\")\n    ###key_settings = keyboard.read_hotkey()\n    #if key_settings == \"1\":",
        "detail": "opses4",
        "documentation": {}
    },
    {
        "label": "edit_program_1",
        "kind": 2,
        "importPath": "opses4",
        "description": "opses4",
        "peekOfCode": "def edit_program_1():\n    \"\"\"Edit the value of program_1.\"\"\"\n    global program_1\n    print(\"[1][2]\")\n    ###key_settings = keyboard.read_hotkey()\n    #if key_settings == \"1\":\n    if 0 == 0:\n        # Read the current value of program_1 from start.ini\n        with open(\"start.ini\", \"r\") as f:\n            program_1 = f.readlines()[0].strip()",
        "detail": "opses4",
        "documentation": {}
    },
    {
        "label": "program_1",
        "kind": 5,
        "importPath": "opses4",
        "description": "opses4",
        "peekOfCode": "program_1 = \"C:\\\\Program Files\\\\VideoLAN\\\\VLC\\\\vlc.exe\"\n# Set up the hotkeys\nkeyboard.add_hotkey(\"ctrl+z\", lambda: toggle_window_visibility(get_window_by_title(\"opensesame\")))\nkeyboard.add_hotkey(\"ctrl+x\", lambda: exit())\nkeyboard.add_hotkey(\"ctrl+c\", lambda: keyboard.send(f\"open {program_1}\"))\nkeyboard.add_hotkey(\"ctrl+s\", lambda: edit_program_1())\n# Start the event loop\ntry:\n    # your code here\n    keyboard.wait()",
        "detail": "opses4",
        "documentation": {}
    },
    {
        "label": "edit_file",
        "kind": 2,
        "importPath": "pyman1",
        "description": "pyman1",
        "peekOfCode": "def edit_file():\n    # check if bong.txt exists\n    if not os.path.exists(\"bong.txt\"):\n        # create the file\n        open(\"bong.txt\", \"a\").close()\n    # open bong.txt in the command terminal\n    subprocess.Popen([\"nano\", \"bong.txt\"])\ndef toggle_window_visibility():\n    global hidden\n    hidden = not hidden",
        "detail": "pyman1",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "pyman1",
        "description": "pyman1",
        "peekOfCode": "def toggle_window_visibility():\n    global hidden\n    hidden = not hidden\n    if hidden:\n        # hide the program\n        subprocess.Popen([\"cmd\", \"/c\", \"taskkill\", \"/f\", \"/im\", \"pyman1.exe\"])\n    else:\n        # bring the program back\n        bring_to_front()\ndef bring_to_front():",
        "detail": "pyman1",
        "documentation": {}
    },
    {
        "label": "bring_to_front",
        "kind": 2,
        "importPath": "pyman1",
        "description": "pyman1",
        "peekOfCode": "def bring_to_front():\n    # get the handle of the current instance of the Python interpreter\n    hwnd = win32gui.FindWindow(None, \"pyman1.exe\")\n    # set the window as the foreground window\n    win32gui.SetForegroundWindow(hwnd)\n# keep the program running\nwhile True:\n    pass",
        "detail": "pyman1",
        "documentation": {}
    },
    {
        "label": "hidden",
        "kind": 5,
        "importPath": "pyman1",
        "description": "pyman1",
        "peekOfCode": "hidden = False\n# register the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: edit_file())\nkeyboard.add_hotkey(\"ctrl+e\", lambda: toggle_window_visibility())\ndef edit_file():\n    # check if bong.txt exists\n    if not os.path.exists(\"bong.txt\"):\n        # create the file\n        open(\"bong.txt\", \"a\").close()\n    # open bong.txt in the command terminal",
        "detail": "pyman1",
        "documentation": {}
    },
    {
        "label": "hidden",
        "kind": 5,
        "importPath": "rewind - Copy",
        "description": "rewind - Copy",
        "peekOfCode": "hidden = False\n# listen for keypresses\nwhile True:\n    # check for ctrl+q\n    if keyboard.is_pressed(\"ctrl+q\"):\n        # open bong.txt in the command terminal\n        subprocess.Popen([\"nano\", \"bong.txt\"])\n    # check for ctrl+e\n    elif keyboard.is_pressed(\"ctrl+e\"):\n        # toggle the hidden flag",
        "detail": "rewind - Copy",
        "documentation": {}
    },
    {
        "label": "hidden",
        "kind": 5,
        "importPath": "rewind",
        "description": "rewind",
        "peekOfCode": "hidden = False\n# listen for keypresses\nwhile True:\n    # check for ctrl+q\n    if keyboard.is_pressed(\"ctrl+q\"):\n        # open bong.txt in the command terminal\n        subprocess.Popen([\"nano\", \"bong.txt\"])\n    # check for ctrl+e\n    elif keyboard.is_pressed(\"ctrl+e\"):\n        # toggle the hidden flag",
        "detail": "rewind",
        "documentation": {}
    },
    {
        "label": "edit_file",
        "kind": 2,
        "importPath": "rewind2 pt 2 - Copy",
        "description": "rewind2 pt 2 - Copy",
        "peekOfCode": "def edit_file():\n    # check if bong.txt exists\n    if not os.path.exists(\"bong.txt\"):\n        # create the file\n        open(\"bong.txt\", \"a\").close()\n    # open bong.txt in the command terminal\n    subprocess.Popen([\"nano\", \"bong.txt\"])\ndef toggle_window_visibility():\n    global hidden\n    hidden = not hidden",
        "detail": "rewind2 pt 2 - Copy",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewind2 pt 2 - Copy",
        "description": "rewind2 pt 2 - Copy",
        "peekOfCode": "def toggle_window_visibility():\n    global hidden\n    hidden = not hidden\n    if hidden:\n        # hide the program\n        subprocess.Popen([\"cmd\", \"/c\", \"taskkill\", \"/f\", \"/im\", \"python.exe\"])\n    else:\n        # bring the program back\n        subprocess.call([\"cmd\", \"/c\", \"python\", \"-i\"], shell=True)\n# keep the program running",
        "detail": "rewind2 pt 2 - Copy",
        "documentation": {}
    },
    {
        "label": "hidden",
        "kind": 5,
        "importPath": "rewind2 pt 2 - Copy",
        "description": "rewind2 pt 2 - Copy",
        "peekOfCode": "hidden = False\n# register the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: edit_file())\nkeyboard.add_hotkey(\"ctrl+e\", lambda: toggle_window_visibility())\ndef edit_file():\n    # check if bong.txt exists\n    if not os.path.exists(\"bong.txt\"):\n        # create the file\n        open(\"bong.txt\", \"a\").close()\n    # open bong.txt in the command terminal",
        "detail": "rewind2 pt 2 - Copy",
        "documentation": {}
    },
    {
        "label": "edit_file",
        "kind": 2,
        "importPath": "rewind2 pt 2",
        "description": "rewind2 pt 2",
        "peekOfCode": "def edit_file():\n    # check if bong.txt exists\n    if not os.path.exists(\"bong.txt\"):\n        # create the file\n        open(\"bong.txt\", \"a\").close()\n    # open bong.txt in the command terminal\n    subprocess.Popen([\"nano\", \"bong.txt\"])\ndef toggle_window_visibility():\n    global hidden\n    hidden = not hidden",
        "detail": "rewind2 pt 2",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewind2 pt 2",
        "description": "rewind2 pt 2",
        "peekOfCode": "def toggle_window_visibility():\n    global hidden\n    hidden = not hidden\n    if hidden:\n        # hide the program\n        subprocess.Popen([\"cmd\", \"/c\", \"taskkill\", \"/f\", \"/im\", \"python.exe\"])\n    else:\n        # bring the program back\n        subprocess.call([\"cmd\", \"/c\", \"start\", \"python\", \"-i\"], shell=True)\n# keep the program running",
        "detail": "rewind2 pt 2",
        "documentation": {}
    },
    {
        "label": "hidden",
        "kind": 5,
        "importPath": "rewind2 pt 2",
        "description": "rewind2 pt 2",
        "peekOfCode": "hidden = False\n# register the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: edit_file())\nkeyboard.add_hotkey(\"ctrl+e\", lambda: toggle_window_visibility())\ndef edit_file():\n    # check if bong.txt exists\n    if not os.path.exists(\"bong.txt\"):\n        # create the file\n        open(\"bong.txt\", \"a\").close()\n    # open bong.txt in the command terminal",
        "detail": "rewind2 pt 2",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewind2",
        "description": "rewind2",
        "peekOfCode": "def toggle_window_visibility():\n    global hidden\n    hidden = not hidden\n    if hidden:\n        # hide the program\n        subprocess.Popen([\"cmd\", \"/c\", \"taskkill\", \"/f\", \"/im\", \"python.exe\"])\n    else:\n        # bring the program back\n        subprocess.Popen([\"python\", \"-i\"], shell=True)\n# keep the program running",
        "detail": "rewind2",
        "documentation": {}
    },
    {
        "label": "hidden",
        "kind": 5,
        "importPath": "rewind2",
        "description": "rewind2",
        "peekOfCode": "hidden = False\n# register the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: subprocess.Popen([\"nano\", \"bong.txt\"]))\nkeyboard.add_hotkey(\"ctrl+e\", lambda: toggle_window_visibility())\ndef toggle_window_visibility():\n    global hidden\n    hidden = not hidden\n    if hidden:\n        # hide the program\n        subprocess.Popen([\"cmd\", \"/c\", \"taskkill\", \"/f\", \"/im\", \"python.exe\"])",
        "detail": "rewind2",
        "documentation": {}
    },
    {
        "label": "edit_file",
        "kind": 2,
        "importPath": "rewind3 - Copy",
        "description": "rewind3 - Copy",
        "peekOfCode": "def edit_file():\n    # check if bong.txt exists\n    if not os.path.exists(\"bong.txt\"):\n        # create the file\n        open(\"bong.txt\", \"a\").close()\n    # open bong.txt in the command terminal\n    subprocess.Popen([\"nano\", \"bong.txt\"])\ndef toggle_window_visibility():\n    global hidden\n    hidden = not hidden",
        "detail": "rewind3 - Copy",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewind3 - Copy",
        "description": "rewind3 - Copy",
        "peekOfCode": "def toggle_window_visibility():\n    global hidden\n    hidden = not hidden\n    if hidden:\n        # hide the program\n        subprocess.Popen([\"cmd\", \"/c\", \"taskkill\", \"/f\", \"/im\", \"pyman1.exe\"])\n    else:\n        # bring the program back\n        bring_to_front()\ndef bring_to_front():",
        "detail": "rewind3 - Copy",
        "documentation": {}
    },
    {
        "label": "bring_to_front",
        "kind": 2,
        "importPath": "rewind3 - Copy",
        "description": "rewind3 - Copy",
        "peekOfCode": "def bring_to_front():\n    # get the handle of the current instance of the Python interpreter\n    hwnd = win32gui.FindWindow(None, \"pyman1.exe\")\n    # set the window as the foreground window\n    win32gui.SetForegroundWindow(hwnd)\n# keep the program running\nwhile True:\n    pass",
        "detail": "rewind3 - Copy",
        "documentation": {}
    },
    {
        "label": "hidden",
        "kind": 5,
        "importPath": "rewind3 - Copy",
        "description": "rewind3 - Copy",
        "peekOfCode": "hidden = False\n# register the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: edit_file())\nkeyboard.add_hotkey(\"ctrl+e\", lambda: toggle_window_visibility())\ndef edit_file():\n    # check if bong.txt exists\n    if not os.path.exists(\"bong.txt\"):\n        # create the file\n        open(\"bong.txt\", \"a\").close()\n    # open bong.txt in the command terminal",
        "detail": "rewind3 - Copy",
        "documentation": {}
    },
    {
        "label": "get_window_by_title",
        "kind": 2,
        "importPath": "rewind3-ultra copy 2",
        "description": "rewind3-ultra copy 2",
        "peekOfCode": "def get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)\n    if hwnd:\n        return hwnd\n    return None\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return",
        "detail": "rewind3-ultra copy 2",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewind3-ultra copy 2",
        "description": "rewind3-ultra copy 2",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return\n    if user32.IsWindowVisible(hwnd):\n        user32.ShowWindow(hwnd, 0)\n    else:\n        user32.ShowWindow(hwnd, 1)\n# wait for hotkey press\nkeyboard.wait()",
        "detail": "rewind3-ultra copy 2",
        "documentation": {}
    },
    {
        "label": "hwnd",
        "kind": 5,
        "importPath": "rewind3-ultra copy 2",
        "description": "rewind3-ultra copy 2",
        "peekOfCode": "hwnd = ctypes.windll.kernel32.GetConsoleWindow()\n# set the console title using the window handle\nuser32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# print instructions on the screen\nprint(\"Edit: ctrl+q Hide: ctrl+w\")\n# define the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: subprocess.call([\"nano\", \"bong.txt\"]))\nkeyboard.add_hotkey(\n    \"ctrl+w\", lambda: toggle_window_visibility(get_window_by_title(\"pyman1.exe\")))",
        "detail": "rewind3-ultra copy 2",
        "documentation": {}
    },
    {
        "label": "user32",
        "kind": 5,
        "importPath": "rewind3-ultra copy 2",
        "description": "rewind3-ultra copy 2",
        "peekOfCode": "user32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# print instructions on the screen\nprint(\"Edit: ctrl+q Hide: ctrl+w\")\n# define the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: subprocess.call([\"nano\", \"bong.txt\"]))\nkeyboard.add_hotkey(\n    \"ctrl+w\", lambda: toggle_window_visibility(get_window_by_title(\"pyman1.exe\")))\ndef get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"",
        "detail": "rewind3-ultra copy 2",
        "documentation": {}
    },
    {
        "label": "get_window_by_title",
        "kind": 2,
        "importPath": "rewind3-ultra copy",
        "description": "rewind3-ultra copy",
        "peekOfCode": "def get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)\n    if hwnd:\n        return hwnd\n    return None\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return",
        "detail": "rewind3-ultra copy",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewind3-ultra copy",
        "description": "rewind3-ultra copy",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return\n    if user32.IsWindowVisible(hwnd):\n        user32.ShowWindow(hwnd, 0)\n    else:\n        user32.ShowWindow(hwnd, 1)\n# keep the program running\nwhile True:",
        "detail": "rewind3-ultra copy",
        "documentation": {}
    },
    {
        "label": "hwnd",
        "kind": 5,
        "importPath": "rewind3-ultra copy",
        "description": "rewind3-ultra copy",
        "peekOfCode": "hwnd = ctypes.windll.kernel32.GetConsoleWindow()\n# set the console title using the window handle\nuser32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# define the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: subprocess.call([\"cmd\", \"/c\", \"notepad.exe\", \"bong.txt\"]))\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility(get_window_by_title(\"pyman1.exe\")))\ndef get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)",
        "detail": "rewind3-ultra copy",
        "documentation": {}
    },
    {
        "label": "user32",
        "kind": 5,
        "importPath": "rewind3-ultra copy",
        "description": "rewind3-ultra copy",
        "peekOfCode": "user32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# define the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: subprocess.call([\"cmd\", \"/c\", \"notepad.exe\", \"bong.txt\"]))\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility(get_window_by_title(\"pyman1.exe\")))\ndef get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)\n    if hwnd:\n        return hwnd",
        "detail": "rewind3-ultra copy",
        "documentation": {}
    },
    {
        "label": "get_window_by_title",
        "kind": 2,
        "importPath": "rewind3-ultra",
        "description": "rewind3-ultra",
        "peekOfCode": "def get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)\n    if hwnd:\n        return hwnd\n    return None\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return",
        "detail": "rewind3-ultra",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewind3-ultra",
        "description": "rewind3-ultra",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return\n    if user32.IsWindowVisible(hwnd):\n        user32.ShowWindow(hwnd, 0)\n    else:\n        user32.ShowWindow(hwnd, 1)\n# wait for hotkey press\nkeyboard.wait()",
        "detail": "rewind3-ultra",
        "documentation": {}
    },
    {
        "label": "hwnd",
        "kind": 5,
        "importPath": "rewind3-ultra",
        "description": "rewind3-ultra",
        "peekOfCode": "hwnd = ctypes.windll.kernel32.GetConsoleWindow()\n# set the console title using the window handle\nuser32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# define the hotkeys\nkeyboard.add_hotkey(\n    \"ctrl+q\", lambda: subprocess.call([\"cmd\", \"/c\", \"notepad.exe\", \"bong.txt\"]))\nkeyboard.add_hotkey(\n    \"ctrl+w\", lambda: toggle_window_visibility(get_window_by_title(\"pyman1.exe\")))\ndef get_window_by_title(title):",
        "detail": "rewind3-ultra",
        "documentation": {}
    },
    {
        "label": "user32",
        "kind": 5,
        "importPath": "rewind3-ultra",
        "description": "rewind3-ultra",
        "peekOfCode": "user32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# define the hotkeys\nkeyboard.add_hotkey(\n    \"ctrl+q\", lambda: subprocess.call([\"cmd\", \"/c\", \"notepad.exe\", \"bong.txt\"]))\nkeyboard.add_hotkey(\n    \"ctrl+w\", lambda: toggle_window_visibility(get_window_by_title(\"pyman1.exe\")))\ndef get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)",
        "detail": "rewind3-ultra",
        "documentation": {}
    },
    {
        "label": "edit_file",
        "kind": 2,
        "importPath": "rewind3",
        "description": "rewind3",
        "peekOfCode": "def edit_file():\n    # check if bong.txt exists\n    if not os.path.exists(\"bong.txt\"):\n        # create the file\n        open(\"bong.txt\", \"a\").close()\n    # open bong.txt in the command terminal\n    subprocess.Popen([\"nano\", \"bong.txt\"])\ndef toggle_window_visibility():\n    global hidden\n    hidden = not hidden",
        "detail": "rewind3",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewind3",
        "description": "rewind3",
        "peekOfCode": "def toggle_window_visibility():\n    global hidden\n    hidden = not hidden\n    if hidden:\n        # hide the program\n        process_name = psutil.Process().name()\n        subprocess.Popen([\"cmd\", \"/c\", \"taskkill\", \"/f\", \"/im\", process_name])\n    else:\n        # bring the program back\n        bring_to_front()",
        "detail": "rewind3",
        "documentation": {}
    },
    {
        "label": "bring_to_front",
        "kind": 2,
        "importPath": "rewind3",
        "description": "rewind3",
        "peekOfCode": "def bring_to_front():\n    # get the handle of the current instance of the Python interpreter\n    hwnd = win32gui.FindWindow(None, process_name)\n    # set the window as the foreground window\n    win32gui.SetForegroundWindow(hwnd)\n# keep the program running\nwhile True:\n    pass",
        "detail": "rewind3",
        "documentation": {}
    },
    {
        "label": "hidden",
        "kind": 5,
        "importPath": "rewind3",
        "description": "rewind3",
        "peekOfCode": "hidden = False\n# register the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: edit_file())\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility())\ndef edit_file():\n    # check if bong.txt exists\n    if not os.path.exists(\"bong.txt\"):\n        # create the file\n        open(\"bong.txt\", \"a\").close()\n    # open bong.txt in the command terminal",
        "detail": "rewind3",
        "documentation": {}
    },
    {
        "label": "get_window_by_title",
        "kind": 2,
        "importPath": "rewind3_cool_double_func - Copy",
        "description": "rewind3_cool_double_func - Copy",
        "peekOfCode": "def get_window_by_title(title):\n\"\"\"Get the window handle by title.\"\"\"\nhwnd = user32.FindWindowW(None, title)\nif hwnd:\nreturn hwnd\nreturn None\ndef toggle_window_visibility(hwnd):\n\"\"\"Toggle the visibility of the window.\"\"\"\nif not hwnd:\nreturn",
        "detail": "rewind3_cool_double_func - Copy",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewind3_cool_double_func - Copy",
        "description": "rewind3_cool_double_func - Copy",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n\"\"\"Toggle the visibility of the window.\"\"\"\nif not hwnd:\nreturn\nif user32.IsWindowVisible(hwnd):\nuser32.ShowWindow(hwnd, 0)\nelse:\nuser32.ShowWindow(hwnd, 1)\nwait for hotkey press\nwhile True:",
        "detail": "rewind3_cool_double_func - Copy",
        "documentation": {}
    },
    {
        "label": "hwnd",
        "kind": 5,
        "importPath": "rewind3_cool_double_func - Copy",
        "description": "rewind3_cool_double_func - Copy",
        "peekOfCode": "hwnd = ctypes.windll.kernel32.GetConsoleWindow()\nset the console title using the window handle\nuser32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\ndefine the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: subprocess.call([\"cmd\", \"/c\", \"notepad.exe\", \"bong.txt\"]))\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility(get_window_by_title(\"pyman1.exe\")))\ndef get_window_by_title(title):\n\"\"\"Get the window handle by title.\"\"\"\nhwnd = user32.FindWindowW(None, title)",
        "detail": "rewind3_cool_double_func - Copy",
        "documentation": {}
    },
    {
        "label": "user32",
        "kind": 5,
        "importPath": "rewind3_cool_double_func - Copy",
        "description": "rewind3_cool_double_func - Copy",
        "peekOfCode": "user32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\ndefine the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: subprocess.call([\"cmd\", \"/c\", \"notepad.exe\", \"bong.txt\"]))\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility(get_window_by_title(\"pyman1.exe\")))\ndef get_window_by_title(title):\n\"\"\"Get the window handle by title.\"\"\"\nhwnd = user32.FindWindowW(None, title)\nif hwnd:\nreturn hwnd",
        "detail": "rewind3_cool_double_func - Copy",
        "documentation": {}
    },
    {
        "label": "hwnd",
        "kind": 5,
        "importPath": "rewind3_cool_double_func - Copy",
        "description": "rewind3_cool_double_func - Copy",
        "peekOfCode": "hwnd = user32.FindWindowW(None, title)\nif hwnd:\nreturn hwnd\nreturn None\ndef toggle_window_visibility(hwnd):\n\"\"\"Toggle the visibility of the window.\"\"\"\nif not hwnd:\nreturn\nif user32.IsWindowVisible(hwnd):\nuser32.ShowWindow(hwnd, 0)",
        "detail": "rewind3_cool_double_func - Copy",
        "documentation": {}
    },
    {
        "label": "get_window_by_title",
        "kind": 2,
        "importPath": "rewind3_cool_double_func copy",
        "description": "rewind3_cool_double_func copy",
        "peekOfCode": "def get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)\n    if hwnd:\n        return hwnd\n    return None\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return",
        "detail": "rewind3_cool_double_func copy",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewind3_cool_double_func copy",
        "description": "rewind3_cool_double_func copy",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return\n    if user32.IsWindowVisible(hwnd):\n        user32.ShowWindow(hwnd, 0)\n    else:\n        user32.ShowWindow(hwnd, 1)\n# wait for hotkey press\nkeyboard.wait()",
        "detail": "rewind3_cool_double_func copy",
        "documentation": {}
    },
    {
        "label": "hwnd",
        "kind": 5,
        "importPath": "rewind3_cool_double_func copy",
        "description": "rewind3_cool_double_func copy",
        "peekOfCode": "hwnd = ctypes.windll.kernel32.GetConsoleWindow()\n# set the console title using the window handle\nuser32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# define the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: subprocess.call([\"cmd\", \"/c\", \"notepad.exe\", \"bong.txt\"]))\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility(get_window_by_title(\"pyman1.exe\")))\ndef get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)",
        "detail": "rewind3_cool_double_func copy",
        "documentation": {}
    },
    {
        "label": "user32",
        "kind": 5,
        "importPath": "rewind3_cool_double_func copy",
        "description": "rewind3_cool_double_func copy",
        "peekOfCode": "user32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# define the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: subprocess.call([\"cmd\", \"/c\", \"notepad.exe\", \"bong.txt\"]))\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility(get_window_by_title(\"pyman1.exe\")))\ndef get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)\n    if hwnd:\n        return hwnd",
        "detail": "rewind3_cool_double_func copy",
        "documentation": {}
    },
    {
        "label": "get_window_by_title",
        "kind": 2,
        "importPath": "rewind3_cool_double_func",
        "description": "rewind3_cool_double_func",
        "peekOfCode": "def get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)\n    if hwnd:\n        return hwnd\n    return None\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return",
        "detail": "rewind3_cool_double_func",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewind3_cool_double_func",
        "description": "rewind3_cool_double_func",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return\n    if user32.IsWindowVisible(hwnd):\n        user32.ShowWindow(hwnd, 0)\n    else:\n        user32.ShowWindow(hwnd, 1)\n# wait for hotkey press\nkeyboard.wait()",
        "detail": "rewind3_cool_double_func",
        "documentation": {}
    },
    {
        "label": "hwnd",
        "kind": 5,
        "importPath": "rewind3_cool_double_func",
        "description": "rewind3_cool_double_func",
        "peekOfCode": "hwnd = ctypes.windll.kernel32.GetConsoleWindow()\n# set the console title using the window handle\nuser32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# define the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: subprocess.call([\"cmd\", \"/c\", \"notepad.exe\", \"bong.txt\"]))\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility(get_window_by_title(\"pyman1.exe\")))\ndef get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)",
        "detail": "rewind3_cool_double_func",
        "documentation": {}
    },
    {
        "label": "user32",
        "kind": 5,
        "importPath": "rewind3_cool_double_func",
        "description": "rewind3_cool_double_func",
        "peekOfCode": "user32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# define the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: subprocess.call([\"cmd\", \"/c\", \"notepad.exe\", \"bong.txt\"]))\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility(get_window_by_title(\"pyman1.exe\")))\ndef get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)\n    if hwnd:\n        return hwnd",
        "detail": "rewind3_cool_double_func",
        "documentation": {}
    },
    {
        "label": "edit_file",
        "kind": 2,
        "importPath": "rewind4pt1",
        "description": "rewind4pt1",
        "peekOfCode": "def edit_file():\n    # check if bong.txt exists\n    if not os.path.exists(\"bong.txt\"):\n        # create the file\n        open(\"bong.txt\", \"a\").close()\n    # open bong.txt in the command terminal\n    subprocess.Popen([\"nano\", \"bong.txt\"])\ndef toggle_window_visibility():\n    global hidden\n    hidden = not hidden",
        "detail": "rewind4pt1",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewind4pt1",
        "description": "rewind4pt1",
        "peekOfCode": "def toggle_window_visibility():\n    global hidden\n    hidden = not hidden\n    if hidden:\n        # hide the program\n        process_name = psutil.Process().name()\n        subprocess.Popen([\"cmd\", \"/c\", \"taskkill\", \"/f\", \"/im\", process_name])\n    else:\n        # bring the program back\n        bring_to_front()",
        "detail": "rewind4pt1",
        "documentation": {}
    },
    {
        "label": "bring_to_front",
        "kind": 2,
        "importPath": "rewind4pt1",
        "description": "rewind4pt1",
        "peekOfCode": "def bring_to_front():\n    # get the handle of the current instance of the Python interpreter\n    hwnd = win32gui.FindWindow(None, process_name)\n    # set the window as the foreground window\n    win32gui.SetForegroundWindow(hwnd)\n# keep the program running\nwhile True:\n    pass",
        "detail": "rewind4pt1",
        "documentation": {}
    },
    {
        "label": "hidden",
        "kind": 5,
        "importPath": "rewind4pt1",
        "description": "rewind4pt1",
        "peekOfCode": "hidden = False\n# register the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: edit_file())\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility())\ndef edit_file():\n    # check if bong.txt exists\n    if not os.path.exists(\"bong.txt\"):\n        # create the file\n        open(\"bong.txt\", \"a\").close()\n    # open bong.txt in the command terminal",
        "detail": "rewind4pt1",
        "documentation": {}
    },
    {
        "label": "edit_file",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 10",
        "description": "rewindUltra1 - Copy copy 10",
        "peekOfCode": "def edit_file(hotkeys):\n    check_key = input(\"Change which key: \")\n    for hotkey in hotkeys:\n        key, action, program = hotkey\n        if check_key == key:\n            change_key = input(f\"\\033[34m{key}\\033[0m {action} {program}\")\n            hotkey = (change_key, action, program)\n            print(f\"Key: {key}, Name: {action}, Book: {program}\")\n        elif check_key == action:\n            change_key = input(f\"\\033[34m{key}\\033[0m {action} {program}\")",
        "detail": "rewindUltra1 - Copy copy 10",
        "documentation": {}
    },
    {
        "label": "hwnd",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 10",
        "description": "rewindUltra1 - Copy copy 10",
        "peekOfCode": "hwnd = ctypes.windll.kernel32.GetConsoleWindow()\n# set the console title using the window handle\nuser32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# Define the hotkeys\nhotkeys = [\n    (\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\"),\n    (\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\")",
        "detail": "rewindUltra1 - Copy copy 10",
        "documentation": {}
    },
    {
        "label": "user32",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 10",
        "description": "rewindUltra1 - Copy copy 10",
        "peekOfCode": "user32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# Define the hotkeys\nhotkeys = [\n    (\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\"),\n    (\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\")\n]\n# Add the hotkeys",
        "detail": "rewindUltra1 - Copy copy 10",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 10",
        "description": "rewindUltra1 - Copy copy 10",
        "peekOfCode": "hotkeys = [\n    (\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\"),\n    (\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\")\n]\n# Add the hotkeys\nfor hotkey in hotkeys:\n    key, action, program = hotkey\n    keyboard.add_hotkey(key, eval(action))",
        "detail": "rewindUltra1 - Copy copy 10",
        "documentation": {}
    },
    {
        "label": "hidden",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 10",
        "description": "rewindUltra1 - Copy copy 10",
        "peekOfCode": "hidden =",
        "detail": "rewindUltra1 - Copy copy 10",
        "documentation": {}
    },
    {
        "label": "edit_file",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 11",
        "description": "rewindUltra1 - Copy copy 11",
        "peekOfCode": "def edit_file(hotkeys):\n    check_key = input(\"Change which key: \")\n    for hotkey in hotkeys:\n        key, action, program, id = hotkey\n        if check_key == key:\n            change_key = input(f\"\\033[34m{key}\\033[0m {action} {program}\")\n            hotkey = (change_key, action, program)\n            print(f\"Key: {key}, Name: {action}, Book: {program}\")\n        elif check_key == action:\n            change_key = input(f\"\\033[34m{key}\\033[0m {action} {program}\")",
        "detail": "rewindUltra1 - Copy copy 11",
        "documentation": {}
    },
    {
        "label": "get_window_by_title",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 11",
        "description": "rewindUltra1 - Copy copy 11",
        "peekOfCode": "def get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)\n    if hwnd:\n        return hwnd\n    return None\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return",
        "detail": "rewindUltra1 - Copy copy 11",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 11",
        "description": "rewindUltra1 - Copy copy 11",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return\n    if user32.IsWindowVisible(hwnd):\n        user32.ShowWindow(hwnd, 0)\n    else:\n        user32.ShowWindow(hwnd, 1)\n# wait for hotkey press\nkeyboard.wait()",
        "detail": "rewindUltra1 - Copy copy 11",
        "documentation": {}
    },
    {
        "label": "hwnd",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 11",
        "description": "rewindUltra1 - Copy copy 11",
        "peekOfCode": "hwnd = ctypes.windll.kernel32.GetConsoleWindow()\n# set the console title using the window handle\nuser32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# Define the hotkeys\nhotkeys = [\n    (\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\", \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\", 1),\n    (\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\", \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\", 2)\n]\n# Add the hotkeys",
        "detail": "rewindUltra1 - Copy copy 11",
        "documentation": {}
    },
    {
        "label": "user32",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 11",
        "description": "rewindUltra1 - Copy copy 11",
        "peekOfCode": "user32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# Define the hotkeys\nhotkeys = [\n    (\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\", \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\", 1),\n    (\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\", \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\", 2)\n]\n# Add the hotkeys\nfor hotkey in hotkeys:\n    key, action, program, id = hotkey",
        "detail": "rewindUltra1 - Copy copy 11",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 11",
        "description": "rewindUltra1 - Copy copy 11",
        "peekOfCode": "hotkeys = [\n    (\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\", \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\", 1),\n    (\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\", \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\", 2)\n]\n# Add the hotkeys\nfor hotkey in hotkeys:\n    key, action, program, id = hotkey\n    keyboard.add_hotkey(key, eval(action))\n# define the edit function\ndef edit_file(hotkeys):",
        "detail": "rewindUltra1 - Copy copy 11",
        "documentation": {}
    },
    {
        "label": "hidden",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 11",
        "description": "rewindUltra1 - Copy copy 11",
        "peekOfCode": "hidden = False\ndef get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)\n    if hwnd:\n        return hwnd\n    return None\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:",
        "detail": "rewindUltra1 - Copy copy 11",
        "documentation": {}
    },
    {
        "label": "edit_file",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 12",
        "description": "rewindUltra1 - Copy copy 12",
        "peekOfCode": "def edit_file(hotkeys):\n    check_key = input(\"Change which key: \")\n    for i in range(len(hotkeys)):\n        hotkey = hotkeys[i]\n        key, action, program = hotkey\n        if check_key == key:\n            print(hotkeys[i])\n            type(hotkeys[i])\n            change_key = input(f\"\\033[34m{key}\\033[0m {action} {program}\")\n            hotkeys[i] = change_key",
        "detail": "rewindUltra1 - Copy copy 12",
        "documentation": {}
    },
    {
        "label": "get_window_by_title",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 12",
        "description": "rewindUltra1 - Copy copy 12",
        "peekOfCode": "def get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)\n    if hwnd:\n        return hwnd\n    return None\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return",
        "detail": "rewindUltra1 - Copy copy 12",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 12",
        "description": "rewindUltra1 - Copy copy 12",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return\n    if user32.IsWindowVisible(hwnd):\n        user32.ShowWindow(hwnd, 0)\n    else:\n        user32.ShowWindow(hwnd, 1)\n# wait for hotkey press\nkeyboard.wait()",
        "detail": "rewindUltra1 - Copy copy 12",
        "documentation": {}
    },
    {
        "label": "hwnd",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 12",
        "description": "rewindUltra1 - Copy copy 12",
        "peekOfCode": "hwnd = ctypes.windll.kernel32.GetConsoleWindow()\n# set the console title using the window handle\nuser32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# Define the hotkeys\nhotkeys = [\n    (\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\"),\n    (\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\\\Program Files\\\\VideoLAN\\VLC\\\\vlc.exe\",)",
        "detail": "rewindUltra1 - Copy copy 12",
        "documentation": {}
    },
    {
        "label": "user32",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 12",
        "description": "rewindUltra1 - Copy copy 12",
        "peekOfCode": "user32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# Define the hotkeys\nhotkeys = [\n    (\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\"),\n    (\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\\\Program Files\\\\VideoLAN\\VLC\\\\vlc.exe\",)\n]\n# Add the hotkeys",
        "detail": "rewindUltra1 - Copy copy 12",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 12",
        "description": "rewindUltra1 - Copy copy 12",
        "peekOfCode": "hotkeys = [\n    (\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\"),\n    (\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\\\Program Files\\\\VideoLAN\\VLC\\\\vlc.exe\",)\n]\n# Add the hotkeys\nfor hotkey in hotkeys:\n    key, action, program = hotkey\n    keyboard.add_hotkey(key, eval(action))",
        "detail": "rewindUltra1 - Copy copy 12",
        "documentation": {}
    },
    {
        "label": "hidden",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 12",
        "description": "rewindUltra1 - Copy copy 12",
        "peekOfCode": "hidden = False\ndef get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)\n    if hwnd:\n        return hwnd\n    return None\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:",
        "detail": "rewindUltra1 - Copy copy 12",
        "documentation": {}
    },
    {
        "label": "edit_file",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 13",
        "description": "rewindUltra1 - Copy copy 13",
        "peekOfCode": "def edit_file(hotkeys):\n    check_key = input(\"Change which key: \")\n    for i in range(len(hotkeys)):\n        hotkey = hotkeys[i]\n        key, action, program = hotkey\n        if check_key == key:\n            print(hotkeys[i])\n            print(type(hotkeys[i]))\n            change_key = input(f\"\\033[34m{key}\\033[0m {action} {program}\")\n            hotkeys[i].key = change_key",
        "detail": "rewindUltra1 - Copy copy 13",
        "documentation": {}
    },
    {
        "label": "get_window_by_title",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 13",
        "description": "rewindUltra1 - Copy copy 13",
        "peekOfCode": "def get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)\n    if hwnd:\n        return hwnd\n    return None\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return",
        "detail": "rewindUltra1 - Copy copy 13",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 13",
        "description": "rewindUltra1 - Copy copy 13",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return\n    if user32.IsWindowVisible(hwnd):\n        user32.ShowWindow(hwnd, 0)\n    else:\n        user32.ShowWindow(hwnd, 1)\n# wait for hotkey press\nkeyboard.wait()",
        "detail": "rewindUltra1 - Copy copy 13",
        "documentation": {}
    },
    {
        "label": "hwnd",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 13",
        "description": "rewindUltra1 - Copy copy 13",
        "peekOfCode": "hwnd = ctypes.windll.kernel32.GetConsoleWindow()\n# set the console title using the window handle\nuser32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# Define the hotkeys\nhotkeys = [\n    (\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\"),\n    (\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\", \"notepad.exe\",)\n]",
        "detail": "rewindUltra1 - Copy copy 13",
        "documentation": {}
    },
    {
        "label": "user32",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 13",
        "description": "rewindUltra1 - Copy copy 13",
        "peekOfCode": "user32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# Define the hotkeys\nhotkeys = [\n    (\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\"),\n    (\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\", \"notepad.exe\",)\n]\n# Add the hotkeys\nfor hotkey in hotkeys:",
        "detail": "rewindUltra1 - Copy copy 13",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 13",
        "description": "rewindUltra1 - Copy copy 13",
        "peekOfCode": "hotkeys = [\n    (\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\"),\n    (\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\", \"notepad.exe\",)\n]\n# Add the hotkeys\nfor hotkey in hotkeys:\n    key, action, program = hotkey\n    keyboard.add_hotkey(key, eval(action))\n# define the edit function",
        "detail": "rewindUltra1 - Copy copy 13",
        "documentation": {}
    },
    {
        "label": "hidden",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 13",
        "description": "rewindUltra1 - Copy copy 13",
        "peekOfCode": "hidden = False\ndef get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)\n    if hwnd:\n        return hwnd\n    return None\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:",
        "detail": "rewindUltra1 - Copy copy 13",
        "documentation": {}
    },
    {
        "label": "edit_file",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 14",
        "description": "rewindUltra1 - Copy copy 14",
        "peekOfCode": "def edit_file(hotkeys):\n    check_key = input(\"Change which key: \")\n    for i in range(len(hotkeys)):\n        hotkey = hotkeys[i]\n        key, action, program = hotkey\n        if check_key == key:\n            print(hotkeys[i])\n            type(hotkeys[i])\n            change_key = input(f\"\\033[34m{key}\\033[0m {action} {program}\")\n            hotkeys[i].key = change_key",
        "detail": "rewindUltra1 - Copy copy 14",
        "documentation": {}
    },
    {
        "label": "get_window_by_title",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 14",
        "description": "rewindUltra1 - Copy copy 14",
        "peekOfCode": "def get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)\n    if hwnd:\n        return hwnd\n    return None\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return",
        "detail": "rewindUltra1 - Copy copy 14",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 14",
        "description": "rewindUltra1 - Copy copy 14",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return\n    if user32.IsWindowVisible(hwnd):\n        user32.ShowWindow(hwnd, 0)\n    else:\n        user32.ShowWindow(hwnd, 1)\n# wait for hotkey press\nkeyboard.wait()",
        "detail": "rewindUltra1 - Copy copy 14",
        "documentation": {}
    },
    {
        "label": "hwnd",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 14",
        "description": "rewindUltra1 - Copy copy 14",
        "peekOfCode": "hwnd = ctypes.windll.kernel32.GetConsoleWindow()\n# set the console title using the window handle\nuser32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# Define the hotkeys\nhotkeys = [\n    (\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\"),\n    (\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\"),",
        "detail": "rewindUltra1 - Copy copy 14",
        "documentation": {}
    },
    {
        "label": "user32",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 14",
        "description": "rewindUltra1 - Copy copy 14",
        "peekOfCode": "user32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# Define the hotkeys\nhotkeys = [\n    (\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\"),\n    (\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\"),\n    (\"ctrl+h\", \"lambda: subprocess.call({program})\",\n     [\"cmd\", \"/c\", \"notepad.exe\", \"bong.txt\"],)",
        "detail": "rewindUltra1 - Copy copy 14",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 14",
        "description": "rewindUltra1 - Copy copy 14",
        "peekOfCode": "hotkeys = [\n    (\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\"),\n    (\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\"),\n    (\"ctrl+h\", \"lambda: subprocess.call({program})\",\n     [\"cmd\", \"/c\", \"notepad.exe\", \"bong.txt\"],)\n]\n# Add the hotkeys\nfor hotkey in hotkeys:",
        "detail": "rewindUltra1 - Copy copy 14",
        "documentation": {}
    },
    {
        "label": "hidden",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 14",
        "description": "rewindUltra1 - Copy copy 14",
        "peekOfCode": "hidden = False\ndef get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)\n    if hwnd:\n        return hwnd\n    return None\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:",
        "detail": "rewindUltra1 - Copy copy 14",
        "documentation": {}
    },
    {
        "label": "edit_file",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 15",
        "description": "rewindUltra1 - Copy copy 15",
        "peekOfCode": "def edit_file(hotkeys):\n    check_key = input(\"Change which key: \")\n    for i in range(len(hotkeys)):\n        hotkey = hotkeys[i]\n        key, action, program = hotkey\n        if check_key == key:\n            print(hotkeys[i])\n            type(hotkeys[i])\n            change_key = input(f\"\\033[34m{key}\\033[0m {action} {program}\")\n            hotkeys[i].key = change_key",
        "detail": "rewindUltra1 - Copy copy 15",
        "documentation": {}
    },
    {
        "label": "get_window_by_title",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 15",
        "description": "rewindUltra1 - Copy copy 15",
        "peekOfCode": "def get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)\n    if hwnd:\n        return hwnd\n    return None\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return",
        "detail": "rewindUltra1 - Copy copy 15",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 15",
        "description": "rewindUltra1 - Copy copy 15",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return\n    if user32.IsWindowVisible(hwnd):\n        user32.ShowWindow(hwnd, 0)\n    else:\n        user32.ShowWindow(hwnd, 1)\n# wait for hotkey press\nkeyboard.wait()",
        "detail": "rewindUltra1 - Copy copy 15",
        "documentation": {}
    },
    {
        "label": "hwnd",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 15",
        "description": "rewindUltra1 - Copy copy 15",
        "peekOfCode": "hwnd = ctypes.windll.kernel32.GetConsoleWindow()\n# set the console title using the window handle\nuser32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# Define the hotkeys\nhotkeys = [\n    (\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\"),\n    (\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\", \"notepad.exe\",),\n    (\"ctrl+k\", \"lambda: keyboard.send(f'open {program}')\",",
        "detail": "rewindUltra1 - Copy copy 15",
        "documentation": {}
    },
    {
        "label": "user32",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 15",
        "description": "rewindUltra1 - Copy copy 15",
        "peekOfCode": "user32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# Define the hotkeys\nhotkeys = [\n    (\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\"),\n    (\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\", \"notepad.exe\",),\n    (\"ctrl+k\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Windows\\system32\\notepad.exe\"),\n    [\"ctrl+p\",",
        "detail": "rewindUltra1 - Copy copy 15",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 15",
        "description": "rewindUltra1 - Copy copy 15",
        "peekOfCode": "hotkeys = [\n    (\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\"),\n    (\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\", \"notepad.exe\",),\n    (\"ctrl+k\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Windows\\system32\\notepad.exe\"),\n    [\"ctrl+p\",\n        \"lambda: subprocess.call({program})\", \"notepad.exe\"],\n    [\"ctrl+h\", \"lambda: subprocess.call(program)\", \"notepad.exe\"]\n]",
        "detail": "rewindUltra1 - Copy copy 15",
        "documentation": {}
    },
    {
        "label": "hidden",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 15",
        "description": "rewindUltra1 - Copy copy 15",
        "peekOfCode": "hidden = False\ndef get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)\n    if hwnd:\n        return hwnd\n    return None\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:",
        "detail": "rewindUltra1 - Copy copy 15",
        "documentation": {}
    },
    {
        "label": "edit_file",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 16",
        "description": "rewindUltra1 - Copy copy 16",
        "peekOfCode": "def edit_file(hotkeys):\n    check_key = input(\"Change which key: \")\n    for i in range(len(hotkeys)):\n        hotkey = hotkeys[i]\n        key, action, program = hotkey\n        if check_key == key:\n            print(hotkeys[i])\n            type(hotkeys[i])\n            change_key = input(f\"\\033[34m{key}\\033[0m {action} {program}\")\n            hotkeys[i] = (key, change_key, program)",
        "detail": "rewindUltra1 - Copy copy 16",
        "documentation": {}
    },
    {
        "label": "get_window_by_title",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 16",
        "description": "rewindUltra1 - Copy copy 16",
        "peekOfCode": "def get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)\n    if hwnd:\n        return hwnd\n    return None\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return",
        "detail": "rewindUltra1 - Copy copy 16",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 16",
        "description": "rewindUltra1 - Copy copy 16",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return\n    if user32.IsWindowVisible(hwnd):\n        user32.ShowWindow(hwnd, 0)\n    else:\n        user32.ShowWindow(hwnd, 1)\n# wait for hotkey press\nkeyboard.wait()",
        "detail": "rewindUltra1 - Copy copy 16",
        "documentation": {}
    },
    {
        "label": "hwnd",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 16",
        "description": "rewindUltra1 - Copy copy 16",
        "peekOfCode": "hwnd = ctypes.windll.kernel32.GetConsoleWindow()\n# set the console title using the window handle\nuser32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# Define the hotkeys\nhotkeys = [\n    (\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\"),\n    (\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\", \"notepad.exe\",),\n    (\"ctrl+k\", \"lambda: keyboard.send(f'open {program}')\",",
        "detail": "rewindUltra1 - Copy copy 16",
        "documentation": {}
    },
    {
        "label": "user32",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 16",
        "description": "rewindUltra1 - Copy copy 16",
        "peekOfCode": "user32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# Define the hotkeys\nhotkeys = [\n    (\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\"),\n    (\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\", \"notepad.exe\",),\n    (\"ctrl+k\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Windows\\system32\\notepad.exe\"),\n    [\"ctrl+p\",",
        "detail": "rewindUltra1 - Copy copy 16",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 16",
        "description": "rewindUltra1 - Copy copy 16",
        "peekOfCode": "hotkeys = [\n    (\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\"),\n    (\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\", \"notepad.exe\",),\n    (\"ctrl+k\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Windows\\system32\\notepad.exe\"),\n    [\"ctrl+p\",\n        \"lambda: subprocess.call({program})\", \"notepad.exe\"],\n    [\"ctrl+h\", \"lambda: subprocess.call(program)\", \"notepad.exe\"]\n]",
        "detail": "rewindUltra1 - Copy copy 16",
        "documentation": {}
    },
    {
        "label": "hidden",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 16",
        "description": "rewindUltra1 - Copy copy 16",
        "peekOfCode": "hidden = False\ndef get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)\n    if hwnd:\n        return hwnd\n    return None\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:",
        "detail": "rewindUltra1 - Copy copy 16",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 2",
        "description": "rewindUltra1 - Copy copy 2",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return\n    if user32.IsWindowVisible(hwnd):\n        user32.ShowWindow(hwnd, 0)\n    else:\n        user32.ShowWindow(hwnd, 1)\n# wait for hotkey press\nkeyboard.wait()",
        "detail": "rewindUltra1 - Copy copy 2",
        "documentation": {}
    },
    {
        "label": "hwnd",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 2",
        "description": "rewindUltra1 - Copy copy 2",
        "peekOfCode": "hwnd = ctypes.windll.kernel32.GetConsoleWindow()\n# set the console title using the window handle\nuser32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# print instructions on the screen\nprint(\"Edit: ctrl+q Hide: ctrl+w\")\n# define the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: subprocess.call([\"cmd\", \"/c\", \"nano.exe\", \"bong.txt\"]))\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility(hwnd))\ndef toggle_window_visibility(hwnd):",
        "detail": "rewindUltra1 - Copy copy 2",
        "documentation": {}
    },
    {
        "label": "user32",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 2",
        "description": "rewindUltra1 - Copy copy 2",
        "peekOfCode": "user32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# print instructions on the screen\nprint(\"Edit: ctrl+q Hide: ctrl+w\")\n# define the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: subprocess.call([\"cmd\", \"/c\", \"nano.exe\", \"bong.txt\"]))\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility(hwnd))\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:",
        "detail": "rewindUltra1 - Copy copy 2",
        "documentation": {}
    },
    {
        "label": "edit_file",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 3",
        "description": "rewindUltra1 - Copy copy 3",
        "peekOfCode": "def edit_file():\n    global keys, names, books\n    check_key = input(\"Change which key: \")\n    for i in range(len(keys)):\n        if check_key == keys[i]:\n            change_key = input(f\"\\033[34m{keys[i]}\\033[0m {names[i]} {books[i]}\")\n            keys[i] = change_key\n            print(f\"Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\ndef get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"",
        "detail": "rewindUltra1 - Copy copy 3",
        "documentation": {}
    },
    {
        "label": "get_window_by_title",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 3",
        "description": "rewindUltra1 - Copy copy 3",
        "peekOfCode": "def get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)\n    if hwnd:\n        return hwnd\n    return None\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return",
        "detail": "rewindUltra1 - Copy copy 3",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 3",
        "description": "rewindUltra1 - Copy copy 3",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return\n    if user32.IsWindowVisible(hwnd):\n        user32.ShowWindow(hwnd, 0)\n    else:\n        user32.ShowWindow(hwnd, 1)\n# wait for hotkey press\nkeyboard.wait()",
        "detail": "rewindUltra1 - Copy copy 3",
        "documentation": {}
    },
    {
        "label": "hwnd",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 3",
        "description": "rewindUltra1 - Copy copy 3",
        "peekOfCode": "hwnd = ctypes.windll.kernel32.GetConsoleWindow()\n# set the console title using the window handle\nuser32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# define the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: edit_file())\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility(get_window_by_title(\"pyman1.exe\")))\n# print instructions on the screen\nprint(\"Edit: ctrl+q Hide: ctrl+w\")\n# create a flag to track whether the program is hidden or not",
        "detail": "rewindUltra1 - Copy copy 3",
        "documentation": {}
    },
    {
        "label": "user32",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 3",
        "description": "rewindUltra1 - Copy copy 3",
        "peekOfCode": "user32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# define the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: edit_file())\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility(get_window_by_title(\"pyman1.exe\")))\n# print instructions on the screen\nprint(\"Edit: ctrl+q Hide: ctrl+w\")\n# create a flag to track whether the program is hidden or not\nhidden = False\n# define the key, name, and book lists",
        "detail": "rewindUltra1 - Copy copy 3",
        "documentation": {}
    },
    {
        "label": "hidden",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 3",
        "description": "rewindUltra1 - Copy copy 3",
        "peekOfCode": "hidden = False\n# define the key, name, and book lists\nkeys = [\"key1\", \"key2\", \"key3\"]\nnames = [\"name1\", \"name2\", \"name3\"]\nbooks = [\"book1\", \"book2\", \"book3\"]\n# print the key, name, and book list with numbered items\nfor i in range(len(keys)):\n    print(f\"{i+1}. Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\ndef edit_file():\n    global keys, names, books",
        "detail": "rewindUltra1 - Copy copy 3",
        "documentation": {}
    },
    {
        "label": "keys",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 3",
        "description": "rewindUltra1 - Copy copy 3",
        "peekOfCode": "keys = [\"key1\", \"key2\", \"key3\"]\nnames = [\"name1\", \"name2\", \"name3\"]\nbooks = [\"book1\", \"book2\", \"book3\"]\n# print the key, name, and book list with numbered items\nfor i in range(len(keys)):\n    print(f\"{i+1}. Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\ndef edit_file():\n    global keys, names, books\n    check_key = input(\"Change which key: \")\n    for i in range(len(keys)):",
        "detail": "rewindUltra1 - Copy copy 3",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 3",
        "description": "rewindUltra1 - Copy copy 3",
        "peekOfCode": "names = [\"name1\", \"name2\", \"name3\"]\nbooks = [\"book1\", \"book2\", \"book3\"]\n# print the key, name, and book list with numbered items\nfor i in range(len(keys)):\n    print(f\"{i+1}. Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\ndef edit_file():\n    global keys, names, books\n    check_key = input(\"Change which key: \")\n    for i in range(len(keys)):\n        if check_key == keys[i]:",
        "detail": "rewindUltra1 - Copy copy 3",
        "documentation": {}
    },
    {
        "label": "books",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 3",
        "description": "rewindUltra1 - Copy copy 3",
        "peekOfCode": "books = [\"book1\", \"book2\", \"book3\"]\n# print the key, name, and book list with numbered items\nfor i in range(len(keys)):\n    print(f\"{i+1}. Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\ndef edit_file():\n    global keys, names, books\n    check_key = input(\"Change which key: \")\n    for i in range(len(keys)):\n        if check_key == keys[i]:\n            change_key = input(f\"\\033[34m{keys[i]}\\033[0m {names[i]} {books[i]}\")",
        "detail": "rewindUltra1 - Copy copy 3",
        "documentation": {}
    },
    {
        "label": "edit_file",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 4",
        "description": "rewindUltra1 - Copy copy 4",
        "peekOfCode": "def edit_file():\n    global keys, names, books\n    check_key = input(\"Change which key: \")\n    for i in range(len(keys)):\n        if check_key == keys[i]:\n            change_key = input(f\"\\033[34m{keys[i]}\\033[0m {names[i]} {books[i]}\")\n            keys[i] = change_key\n            print(f\"Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\ndef get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"",
        "detail": "rewindUltra1 - Copy copy 4",
        "documentation": {}
    },
    {
        "label": "get_window_by_title",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 4",
        "description": "rewindUltra1 - Copy copy 4",
        "peekOfCode": "def get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)\n    if hwnd:\n        return hwnd\n    return None\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return",
        "detail": "rewindUltra1 - Copy copy 4",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 4",
        "description": "rewindUltra1 - Copy copy 4",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return\n    if user32.IsWindowVisible(hwnd):\n        user32.ShowWindow(hwnd, 0)\n    else:\n        user32.ShowWindow(hwnd, 1)\n# wait for hotkey press\nkeyboard.wait()",
        "detail": "rewindUltra1 - Copy copy 4",
        "documentation": {}
    },
    {
        "label": "hwnd",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 4",
        "description": "rewindUltra1 - Copy copy 4",
        "peekOfCode": "hwnd = ctypes.windll.kernel32.GetConsoleWindow()\n# set the console title using the window handle\nuser32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# define the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: edit_file())\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility(get_window_by_title(\"pyman1.exe\")))\n# print instructions on the screen\nprint(\"Edit: ctrl+q Hide: ctrl+w\")\n# create a flag to track whether the program is hidden or not",
        "detail": "rewindUltra1 - Copy copy 4",
        "documentation": {}
    },
    {
        "label": "user32",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 4",
        "description": "rewindUltra1 - Copy copy 4",
        "peekOfCode": "user32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# define the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: edit_file())\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility(get_window_by_title(\"pyman1.exe\")))\n# print instructions on the screen\nprint(\"Edit: ctrl+q Hide: ctrl+w\")\n# create a flag to track whether the program is hidden or not\nhidden = False\n# define the key, name, and book lists",
        "detail": "rewindUltra1 - Copy copy 4",
        "documentation": {}
    },
    {
        "label": "hidden",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 4",
        "description": "rewindUltra1 - Copy copy 4",
        "peekOfCode": "hidden = False\n# define the key, name, and book lists\nkeys = [\"key1\", \"key2\", \"key3\"]\nnames = [\"name1\", \"name2\", \"name3\"]\nbooks = [\"book1\", \"book2\", \"book3\"]\n# print the key, name, and book list with numbered items\nfor i in range(len(keys)):\n    print(f\"{i+1}. Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\ndef edit_file():\n    global keys, names, books",
        "detail": "rewindUltra1 - Copy copy 4",
        "documentation": {}
    },
    {
        "label": "keys",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 4",
        "description": "rewindUltra1 - Copy copy 4",
        "peekOfCode": "keys = [\"key1\", \"key2\", \"key3\"]\nnames = [\"name1\", \"name2\", \"name3\"]\nbooks = [\"book1\", \"book2\", \"book3\"]\n# print the key, name, and book list with numbered items\nfor i in range(len(keys)):\n    print(f\"{i+1}. Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\ndef edit_file():\n    global keys, names, books\n    check_key = input(\"Change which key: \")\n    for i in range(len(keys)):",
        "detail": "rewindUltra1 - Copy copy 4",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 4",
        "description": "rewindUltra1 - Copy copy 4",
        "peekOfCode": "names = [\"name1\", \"name2\", \"name3\"]\nbooks = [\"book1\", \"book2\", \"book3\"]\n# print the key, name, and book list with numbered items\nfor i in range(len(keys)):\n    print(f\"{i+1}. Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\ndef edit_file():\n    global keys, names, books\n    check_key = input(\"Change which key: \")\n    for i in range(len(keys)):\n        if check_key == keys[i]:",
        "detail": "rewindUltra1 - Copy copy 4",
        "documentation": {}
    },
    {
        "label": "books",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 4",
        "description": "rewindUltra1 - Copy copy 4",
        "peekOfCode": "books = [\"book1\", \"book2\", \"book3\"]\n# print the key, name, and book list with numbered items\nfor i in range(len(keys)):\n    print(f\"{i+1}. Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\ndef edit_file():\n    global keys, names, books\n    check_key = input(\"Change which key: \")\n    for i in range(len(keys)):\n        if check_key == keys[i]:\n            change_key = input(f\"\\033[34m{keys[i]}\\033[0m {names[i]} {books[i]}\")",
        "detail": "rewindUltra1 - Copy copy 4",
        "documentation": {}
    },
    {
        "label": "edit_file",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 5",
        "description": "rewindUltra1 - Copy copy 5",
        "peekOfCode": "def edit_file():\n    global keys, names, books\n    check_key = input(\"Change which key: \")\n    for i in range(len(keys)):\n        if check_key == keys[i]:\n            change_key = input(f\"\\033[34m{keys[i]}\\033[0m {names[i]} {books[i]}\")\n            keys[i] = change_key\n            print(f\"Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\n        elif check_key == names[i]:\n            change_key = input(f\"\\033[34m{keys[i]}\\033[0m {names[i]} {books[i]}\")",
        "detail": "rewindUltra1 - Copy copy 5",
        "documentation": {}
    },
    {
        "label": "get_window_by_title",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 5",
        "description": "rewindUltra1 - Copy copy 5",
        "peekOfCode": "def get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)\n    if hwnd:\n        return hwnd\n    return None\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return",
        "detail": "rewindUltra1 - Copy copy 5",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 5",
        "description": "rewindUltra1 - Copy copy 5",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return\n    if user32.IsWindowVisible(hwnd):\n        user32.ShowWindow(hwnd, 0)\n    else:\n        user32.ShowWindow(hwnd, 1)\n# wait for hotkey press\nkeyboard.wait()",
        "detail": "rewindUltra1 - Copy copy 5",
        "documentation": {}
    },
    {
        "label": "hwnd",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 5",
        "description": "rewindUltra1 - Copy copy 5",
        "peekOfCode": "hwnd = ctypes.windll.kernel32.GetConsoleWindow()\n# set the console title using the window handle\nuser32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# define the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: edit_file())\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility(get_window_by_title(\"pyman1.exe\")))\n# print instructions on the screen\nprint(\"Edit: ctrl+q Hide: ctrl+w\")\n# create a flag to track whether the program is hidden or not",
        "detail": "rewindUltra1 - Copy copy 5",
        "documentation": {}
    },
    {
        "label": "user32",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 5",
        "description": "rewindUltra1 - Copy copy 5",
        "peekOfCode": "user32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# define the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: edit_file())\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility(get_window_by_title(\"pyman1.exe\")))\n# print instructions on the screen\nprint(\"Edit: ctrl+q Hide: ctrl+w\")\n# create a flag to track whether the program is hidden or not\nhidden = False\n# define the key, name, and book lists",
        "detail": "rewindUltra1 - Copy copy 5",
        "documentation": {}
    },
    {
        "label": "hidden",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 5",
        "description": "rewindUltra1 - Copy copy 5",
        "peekOfCode": "hidden = False\n# define the key, name, and book lists\nkeys = [\"key1\", \"key2\", \"key3\"]\nnames = [\"name1\", \"name2\", \"name3\"]\nbooks = [\"book1\", \"book2\", \"book3\"]\n# print the key, name, and book list with numbered items\nfor i in range(len(keys)):\n    print(f\"{i+1}. Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\ndef edit_file():\n    global keys, names, books",
        "detail": "rewindUltra1 - Copy copy 5",
        "documentation": {}
    },
    {
        "label": "keys",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 5",
        "description": "rewindUltra1 - Copy copy 5",
        "peekOfCode": "keys = [\"key1\", \"key2\", \"key3\"]\nnames = [\"name1\", \"name2\", \"name3\"]\nbooks = [\"book1\", \"book2\", \"book3\"]\n# print the key, name, and book list with numbered items\nfor i in range(len(keys)):\n    print(f\"{i+1}. Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\ndef edit_file():\n    global keys, names, books\n    check_key = input(\"Change which key: \")\n    for i in range(len(keys)):",
        "detail": "rewindUltra1 - Copy copy 5",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 5",
        "description": "rewindUltra1 - Copy copy 5",
        "peekOfCode": "names = [\"name1\", \"name2\", \"name3\"]\nbooks = [\"book1\", \"book2\", \"book3\"]\n# print the key, name, and book list with numbered items\nfor i in range(len(keys)):\n    print(f\"{i+1}. Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\ndef edit_file():\n    global keys, names, books\n    check_key = input(\"Change which key: \")\n    for i in range(len(keys)):\n        if check_key == keys[i]:",
        "detail": "rewindUltra1 - Copy copy 5",
        "documentation": {}
    },
    {
        "label": "books",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 5",
        "description": "rewindUltra1 - Copy copy 5",
        "peekOfCode": "books = [\"book1\", \"book2\", \"book3\"]\n# print the key, name, and book list with numbered items\nfor i in range(len(keys)):\n    print(f\"{i+1}. Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\ndef edit_file():\n    global keys, names, books\n    check_key = input(\"Change which key: \")\n    for i in range(len(keys)):\n        if check_key == keys[i]:\n            change_key = input(f\"\\033[34m{keys[i]}\\033[0m {names[i]} {books[i]}\")",
        "detail": "rewindUltra1 - Copy copy 5",
        "documentation": {}
    },
    {
        "label": "edit_file",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 6",
        "description": "rewindUltra1 - Copy copy 6",
        "peekOfCode": "def edit_file():\n    global keys, names, books\n    check_key = input(\"Change which key: \")\n    for i in range(len(keys)):\n        if check_key == keys[i]:\n            change_key = input(f\"\\033[34m{keys[i]}\\033[0m {names[i]} {books[i]}\")\n            keys[i] = change_key\n            print(f\"Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\n        elif check_key == names[i]:\n            change_key = input(f\"\\033[34m{keys[i]}\\033[0m {names[i]} {books[i]}\")",
        "detail": "rewindUltra1 - Copy copy 6",
        "documentation": {}
    },
    {
        "label": "get_window_by_title",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 6",
        "description": "rewindUltra1 - Copy copy 6",
        "peekOfCode": "def get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)\n    if hwnd:\n        return hwnd\n    return None\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return",
        "detail": "rewindUltra1 - Copy copy 6",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 6",
        "description": "rewindUltra1 - Copy copy 6",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return\n    if user32.IsWindowVisible(hwnd):\n        user32.ShowWindow(hwnd, 0)\n    else:\n        user32.ShowWindow(hwnd, 1)\n# wait for hotkey press\nkeyboard.wait()",
        "detail": "rewindUltra1 - Copy copy 6",
        "documentation": {}
    },
    {
        "label": "hwnd",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 6",
        "description": "rewindUltra1 - Copy copy 6",
        "peekOfCode": "hwnd = ctypes.windll.kernel32.GetConsoleWindow()\n# set the console title using the window handle\nuser32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# define the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: edit_file())\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility(get_window_by_title(\"pyman1.exe\")))\n# print instructions on the screen\nprint(\"Edit: ctrl+q Hide: ctrl+w\")\n# create a flag to track whether the program is hidden or not",
        "detail": "rewindUltra1 - Copy copy 6",
        "documentation": {}
    },
    {
        "label": "user32",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 6",
        "description": "rewindUltra1 - Copy copy 6",
        "peekOfCode": "user32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# define the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: edit_file())\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility(get_window_by_title(\"pyman1.exe\")))\n# print instructions on the screen\nprint(\"Edit: ctrl+q Hide: ctrl+w\")\n# create a flag to track whether the program is hidden or not\nhidden = False\n# define the key, name, and book lists",
        "detail": "rewindUltra1 - Copy copy 6",
        "documentation": {}
    },
    {
        "label": "hidden",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 6",
        "description": "rewindUltra1 - Copy copy 6",
        "peekOfCode": "hidden = False\n# define the key, name, and book lists\nkeys = [\"key1\", \"key2\", \"key3\"]\nnames = [\"name1\", \"name2\", \"name3\"]\nbooks = [\"book1\", \"book2\", \"book3\"]\nk1 = keys\nn1=names\nb1=books\n# print the key, name, and book list with numbered items\nfor i in range(len(keys)):",
        "detail": "rewindUltra1 - Copy copy 6",
        "documentation": {}
    },
    {
        "label": "keys",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 6",
        "description": "rewindUltra1 - Copy copy 6",
        "peekOfCode": "keys = [\"key1\", \"key2\", \"key3\"]\nnames = [\"name1\", \"name2\", \"name3\"]\nbooks = [\"book1\", \"book2\", \"book3\"]\nk1 = keys\nn1=names\nb1=books\n# print the key, name, and book list with numbered items\nfor i in range(len(keys)):\n    print(f\"{i+1}. Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\ndef edit_file():",
        "detail": "rewindUltra1 - Copy copy 6",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 6",
        "description": "rewindUltra1 - Copy copy 6",
        "peekOfCode": "names = [\"name1\", \"name2\", \"name3\"]\nbooks = [\"book1\", \"book2\", \"book3\"]\nk1 = keys\nn1=names\nb1=books\n# print the key, name, and book list with numbered items\nfor i in range(len(keys)):\n    print(f\"{i+1}. Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\ndef edit_file():\n    global keys, names, books",
        "detail": "rewindUltra1 - Copy copy 6",
        "documentation": {}
    },
    {
        "label": "books",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 6",
        "description": "rewindUltra1 - Copy copy 6",
        "peekOfCode": "books = [\"book1\", \"book2\", \"book3\"]\nk1 = keys\nn1=names\nb1=books\n# print the key, name, and book list with numbered items\nfor i in range(len(keys)):\n    print(f\"{i+1}. Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\ndef edit_file():\n    global keys, names, books\n    check_key = input(\"Change which key: \")",
        "detail": "rewindUltra1 - Copy copy 6",
        "documentation": {}
    },
    {
        "label": "k1",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 6",
        "description": "rewindUltra1 - Copy copy 6",
        "peekOfCode": "k1 = keys\nn1=names\nb1=books\n# print the key, name, and book list with numbered items\nfor i in range(len(keys)):\n    print(f\"{i+1}. Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\ndef edit_file():\n    global keys, names, books\n    check_key = input(\"Change which key: \")\n    for i in range(len(keys)):",
        "detail": "rewindUltra1 - Copy copy 6",
        "documentation": {}
    },
    {
        "label": "penz",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 7",
        "description": "rewindUltra1 - Copy copy 7",
        "peekOfCode": "def penz():\n    for i in range(len(keys)):\n        print(f\"{i+1}. Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\npenz()\ndef edit_file():\n    global keys, names, books\n    check_key = input(\"Change which key: \")\n    for i in range(len(keys)):\n        if check_key == keys[i]:\n            change_key = input(f\"\\033[34m{keys[i]}\\033[0m {names[i]} {books[i]}\")",
        "detail": "rewindUltra1 - Copy copy 7",
        "documentation": {}
    },
    {
        "label": "edit_file",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 7",
        "description": "rewindUltra1 - Copy copy 7",
        "peekOfCode": "def edit_file():\n    global keys, names, books\n    check_key = input(\"Change which key: \")\n    for i in range(len(keys)):\n        if check_key == keys[i]:\n            change_key = input(f\"\\033[34m{keys[i]}\\033[0m {names[i]} {books[i]}\")\n            keys[i] = change_key\n            print(f\"Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\n            os.system(\"cls\" if os.name == \"nt\" else \"clear\")\n            penz()",
        "detail": "rewindUltra1 - Copy copy 7",
        "documentation": {}
    },
    {
        "label": "get_window_by_title",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 7",
        "description": "rewindUltra1 - Copy copy 7",
        "peekOfCode": "def get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)\n    if hwnd:\n        return hwnd\n    return None\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return",
        "detail": "rewindUltra1 - Copy copy 7",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 7",
        "description": "rewindUltra1 - Copy copy 7",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return\n    if user32.IsWindowVisible(hwnd):\n        user32.ShowWindow(hwnd, 0)\n    else:\n        user32.ShowWindow(hwnd, 1)\n# wait for hotkey press\nkeyboard.wait()",
        "detail": "rewindUltra1 - Copy copy 7",
        "documentation": {}
    },
    {
        "label": "hwnd",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 7",
        "description": "rewindUltra1 - Copy copy 7",
        "peekOfCode": "hwnd = ctypes.windll.kernel32.GetConsoleWindow()\n# set the console title using the window handle\nuser32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# define the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: edit_file())\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility(get_window_by_title(\"pyman1.exe\")))\n# print instructions on the screen\nprint(\"Edit: ctrl+q Hide: ctrl+w\")\n# create a flag to track whether the program is hidden or not",
        "detail": "rewindUltra1 - Copy copy 7",
        "documentation": {}
    },
    {
        "label": "user32",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 7",
        "description": "rewindUltra1 - Copy copy 7",
        "peekOfCode": "user32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# define the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: edit_file())\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility(get_window_by_title(\"pyman1.exe\")))\n# print instructions on the screen\nprint(\"Edit: ctrl+q Hide: ctrl+w\")\n# create a flag to track whether the program is hidden or not\nhidden = False\n# define the key, name, and book lists",
        "detail": "rewindUltra1 - Copy copy 7",
        "documentation": {}
    },
    {
        "label": "hidden",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 7",
        "description": "rewindUltra1 - Copy copy 7",
        "peekOfCode": "hidden = False\n# define the key, name, and book lists\nkeys = [\"key1\", \"key2\", \"key3\"]\nnames = [\"name1\", \"name2\", \"name3\"]\nbooks = [\"book1\", \"book2\", \"book3\"]\n# print the key, name, and book list with numbered items\ndef penz():\n    for i in range(len(keys)):\n        print(f\"{i+1}. Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\npenz()",
        "detail": "rewindUltra1 - Copy copy 7",
        "documentation": {}
    },
    {
        "label": "keys",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 7",
        "description": "rewindUltra1 - Copy copy 7",
        "peekOfCode": "keys = [\"key1\", \"key2\", \"key3\"]\nnames = [\"name1\", \"name2\", \"name3\"]\nbooks = [\"book1\", \"book2\", \"book3\"]\n# print the key, name, and book list with numbered items\ndef penz():\n    for i in range(len(keys)):\n        print(f\"{i+1}. Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\npenz()\ndef edit_file():\n    global keys, names, books",
        "detail": "rewindUltra1 - Copy copy 7",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 7",
        "description": "rewindUltra1 - Copy copy 7",
        "peekOfCode": "names = [\"name1\", \"name2\", \"name3\"]\nbooks = [\"book1\", \"book2\", \"book3\"]\n# print the key, name, and book list with numbered items\ndef penz():\n    for i in range(len(keys)):\n        print(f\"{i+1}. Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\npenz()\ndef edit_file():\n    global keys, names, books\n    check_key = input(\"Change which key: \")",
        "detail": "rewindUltra1 - Copy copy 7",
        "documentation": {}
    },
    {
        "label": "books",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 7",
        "description": "rewindUltra1 - Copy copy 7",
        "peekOfCode": "books = [\"book1\", \"book2\", \"book3\"]\n# print the key, name, and book list with numbered items\ndef penz():\n    for i in range(len(keys)):\n        print(f\"{i+1}. Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\npenz()\ndef edit_file():\n    global keys, names, books\n    check_key = input(\"Change which key: \")\n    for i in range(len(keys)):",
        "detail": "rewindUltra1 - Copy copy 7",
        "documentation": {}
    },
    {
        "label": "edit_file",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 8",
        "description": "rewindUltra1 - Copy copy 8",
        "peekOfCode": "def edit_file():\n    global keys, names, books\n    check_key = input(\"Change which key: \")\n    for i in range(len(keys)):\n        if check_key == keys[i]:\n            change_key = input(f\"\\033[34m{keys[i]}\\033[0m {names[i]} {books[i]}\")\n            keys[i] = change_key\n            print(f\"Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\n        elif check_key == names[i]:\n            change_key = input(f\"\\033[34m{keys[i]}\\033[0m {names[i]} {books[i]}\")",
        "detail": "rewindUltra1 - Copy copy 8",
        "documentation": {}
    },
    {
        "label": "get_window_by_title",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 8",
        "description": "rewindUltra1 - Copy copy 8",
        "peekOfCode": "def get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)\n    if hwnd:\n        return hwnd\n    return None\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return",
        "detail": "rewindUltra1 - Copy copy 8",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy 8",
        "description": "rewindUltra1 - Copy copy 8",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return\n    if user32.IsWindowVisible(hwnd):\n        user32.ShowWindow(hwnd, 0)\n    else:\n        user32.ShowWindow(hwnd, 1)\n# wait for hotkey press\nkeyboard.wait()",
        "detail": "rewindUltra1 - Copy copy 8",
        "documentation": {}
    },
    {
        "label": "hwnd",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 8",
        "description": "rewindUltra1 - Copy copy 8",
        "peekOfCode": "hwnd = ctypes.windll.kernel32.GetConsoleWindow()\n# set the console title using the window handle\nuser32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# define the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: edit_file())\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility(get_window_by_title(\"pyman1.exe\")))\n# print instructions on the screen\nprint(\"Edit: ctrl+q Hide: ctrl+w\")\n# create a flag to track whether the program is hidden or not",
        "detail": "rewindUltra1 - Copy copy 8",
        "documentation": {}
    },
    {
        "label": "user32",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 8",
        "description": "rewindUltra1 - Copy copy 8",
        "peekOfCode": "user32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# define the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: edit_file())\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility(get_window_by_title(\"pyman1.exe\")))\n# print instructions on the screen\nprint(\"Edit: ctrl+q Hide: ctrl+w\")\n# create a flag to track whether the program is hidden or not\nhidden = False\n# define the key, name, and book lists",
        "detail": "rewindUltra1 - Copy copy 8",
        "documentation": {}
    },
    {
        "label": "hidden",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 8",
        "description": "rewindUltra1 - Copy copy 8",
        "peekOfCode": "hidden = False\n# define the key, name, and book lists\nkeys = [\"key1\", \"key2\", \"key3\"]\nnames = [\"name1\", \"name2\", \"name3\"]\nbooks = [\"book1\", \"book2\", \"book3\"]\n# print the key, name, and book list with numbered items\nfor i in range(len(keys)):\n    print(f\"{i+1}. Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\ndef edit_file():\n    global keys, names, books",
        "detail": "rewindUltra1 - Copy copy 8",
        "documentation": {}
    },
    {
        "label": "keys",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 8",
        "description": "rewindUltra1 - Copy copy 8",
        "peekOfCode": "keys = [\"key1\", \"key2\", \"key3\"]\nnames = [\"name1\", \"name2\", \"name3\"]\nbooks = [\"book1\", \"book2\", \"book3\"]\n# print the key, name, and book list with numbered items\nfor i in range(len(keys)):\n    print(f\"{i+1}. Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\ndef edit_file():\n    global keys, names, books\n    check_key = input(\"Change which key: \")\n    for i in range(len(keys)):",
        "detail": "rewindUltra1 - Copy copy 8",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 8",
        "description": "rewindUltra1 - Copy copy 8",
        "peekOfCode": "names = [\"name1\", \"name2\", \"name3\"]\nbooks = [\"book1\", \"book2\", \"book3\"]\n# print the key, name, and book list with numbered items\nfor i in range(len(keys)):\n    print(f\"{i+1}. Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\ndef edit_file():\n    global keys, names, books\n    check_key = input(\"Change which key: \")\n    for i in range(len(keys)):\n        if check_key == keys[i]:",
        "detail": "rewindUltra1 - Copy copy 8",
        "documentation": {}
    },
    {
        "label": "books",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 8",
        "description": "rewindUltra1 - Copy copy 8",
        "peekOfCode": "books = [\"book1\", \"book2\", \"book3\"]\n# print the key, name, and book list with numbered items\nfor i in range(len(keys)):\n    print(f\"{i+1}. Key: {keys[i]}, Name: {names[i]}, Book: {books[i]}\")\ndef edit_file():\n    global keys, names, books\n    check_key = input(\"Change which key: \")\n    for i in range(len(keys)):\n        if check_key == keys[i]:\n            change_key = input(f\"\\033[34m{keys[i]}\\033[0m {names[i]} {books[i]}\")",
        "detail": "rewindUltra1 - Copy copy 8",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy 9",
        "description": "rewindUltra1 - Copy copy 9",
        "peekOfCode": "hotkeys = [\n    (\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\", \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\"),\n    (\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\", \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\")\n]\n# Add the hotkeys\nfor hotkey in hotkeys:\n    key, action, program = hotkey\n    keyboard.add_hotkey(key, eval(action))",
        "detail": "rewindUltra1 - Copy copy 9",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy copy",
        "description": "rewindUltra1 - Copy copy",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return\n    if user32.IsWindowVisible(hwnd):\n        user32.ShowWindow(hwnd, 0)\n    else:\n        user32.ShowWindow(hwnd, 1)\n# wait for hotkey press\nkeyboard.wait()",
        "detail": "rewindUltra1 - Copy copy",
        "documentation": {}
    },
    {
        "label": "hwnd",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy",
        "description": "rewindUltra1 - Copy copy",
        "peekOfCode": "hwnd = ctypes.windll.kernel32.GetConsoleWindow()\n# set the console title using the window handle\nuser32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# print instructions on the screen\nprint(\"Edit: ctrl+q Hide: ctrl+w\")\n# define the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: subprocess.call([\"cmd\", \"/c\", \"nano.exe\", \"bong.txt\"]))\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility(hwnd))\ndef toggle_window_visibility(hwnd):",
        "detail": "rewindUltra1 - Copy copy",
        "documentation": {}
    },
    {
        "label": "user32",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy copy",
        "description": "rewindUltra1 - Copy copy",
        "peekOfCode": "user32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# print instructions on the screen\nprint(\"Edit: ctrl+q Hide: ctrl+w\")\n# define the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: subprocess.call([\"cmd\", \"/c\", \"nano.exe\", \"bong.txt\"]))\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility(hwnd))\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:",
        "detail": "rewindUltra1 - Copy copy",
        "documentation": {}
    },
    {
        "label": "get_window_by_title",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy",
        "description": "rewindUltra1 - Copy",
        "peekOfCode": "def get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)\n    if hwnd:\n        return hwnd\n    return None\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return",
        "detail": "rewindUltra1 - Copy",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewindUltra1 - Copy",
        "description": "rewindUltra1 - Copy",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return\n    if user32.IsWindowVisible(hwnd):\n        user32.ShowWindow(hwnd, 0)\n    else:\n        user32.ShowWindow(hwnd, 1)\n# wait for hotkey press\nkeyboard.wait()",
        "detail": "rewindUltra1 - Copy",
        "documentation": {}
    },
    {
        "label": "hwnd",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy",
        "description": "rewindUltra1 - Copy",
        "peekOfCode": "hwnd = ctypes.windll.kernel32.GetConsoleWindow()\n# set the console title using the window handle\nuser32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# print instructions on the screen\nprint(\"Edit: ctrl+q Hide: ctrl+w\")\n# define the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: subprocess.call([\"C:\\usr\\bin\\nano.exe\", \"bong.txt\"]))\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility(get_window_by_title(\"pyman1.exe\")))\ndef get_window_by_title(title):",
        "detail": "rewindUltra1 - Copy",
        "documentation": {}
    },
    {
        "label": "user32",
        "kind": 5,
        "importPath": "rewindUltra1 - Copy",
        "description": "rewindUltra1 - Copy",
        "peekOfCode": "user32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# print instructions on the screen\nprint(\"Edit: ctrl+q Hide: ctrl+w\")\n# define the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: subprocess.call([\"C:\\usr\\bin\\nano.exe\", \"bong.txt\"]))\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility(get_window_by_title(\"pyman1.exe\")))\ndef get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)",
        "detail": "rewindUltra1 - Copy",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewindUltra1-day2-good-togglewind copy",
        "description": "rewindUltra1-day2-good-togglewind copy",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return\n    if user32.IsWindowVisible(hwnd):\n        user32.ShowWindow(hwnd, 0)\n    else:\n        user32.ShowWindow(hwnd, 1)\n# wait for hotkey press\nkeyboard.wait()",
        "detail": "rewindUltra1-day2-good-togglewind copy",
        "documentation": {}
    },
    {
        "label": "hwnd",
        "kind": 5,
        "importPath": "rewindUltra1-day2-good-togglewind copy",
        "description": "rewindUltra1-day2-good-togglewind copy",
        "peekOfCode": "hwnd = ctypes.windll.kernel32.GetConsoleWindow()\n# print instructions on the screen\nprint(\"Edit: ctrl+q Hide: ctrl+w\")\n# set the console title using the window handle\nuser32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# hotkeys = [\n# [\"ctrl+q\", \"open, \"[\"cmd\", \"/c\", \"notepad.exe\", \"bong.txt\"]\"]]\n# ]\n# define the hotkeys",
        "detail": "rewindUltra1-day2-good-togglewind copy",
        "documentation": {}
    },
    {
        "label": "user32",
        "kind": 5,
        "importPath": "rewindUltra1-day2-good-togglewind copy",
        "description": "rewindUltra1-day2-good-togglewind copy",
        "peekOfCode": "user32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# hotkeys = [\n# [\"ctrl+q\", \"open, \"[\"cmd\", \"/c\", \"notepad.exe\", \"bong.txt\"]\"]]\n# ]\n# define the hotkeys\nkeyboard.add_hotkey(\n    \"ctrl+q\", lambda: subprocess.call([\"cmd\", \"/c\", \"notepad.exe\", \"bong.txt\"]))\nkeyboard.add_hotkey(\"ctrl+w\", lambda: subprocess.call([\"nano\", \"bong.txt\"]))\nkeyboard.add_hotkey(\"ctrl+e\", lambda: toggle_window_visibility(hwnd))",
        "detail": "rewindUltra1-day2-good-togglewind copy",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewindUltra1-day2-good-togglewind",
        "description": "rewindUltra1-day2-good-togglewind",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return\n    if user32.IsWindowVisible(hwnd):\n        user32.ShowWindow(hwnd, 0)\n    else:\n        user32.ShowWindow(hwnd, 1)\n# wait for hotkey press\nkeyboard.wait()",
        "detail": "rewindUltra1-day2-good-togglewind",
        "documentation": {}
    },
    {
        "label": "hwnd",
        "kind": 5,
        "importPath": "rewindUltra1-day2-good-togglewind",
        "description": "rewindUltra1-day2-good-togglewind",
        "peekOfCode": "hwnd = ctypes.windll.kernel32.GetConsoleWindow()\n# print instructions on the screen\nprint(\"Edit: ctrl+q Hide: ctrl+w\")\n# set the console title using the window handle\nuser32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# define the hotkeys\nkeyboard.add_hotkey(\n    \"ctrl+q\", lambda: subprocess.call([\"cmd\", \"/c\", \"notepad.exe\", \"bong.txt\"]))\nkeyboard.add_hotkey(\"ctrl+w\", lambda: subprocess.call([\"nano\", \"bong.txt\"]))",
        "detail": "rewindUltra1-day2-good-togglewind",
        "documentation": {}
    },
    {
        "label": "user32",
        "kind": 5,
        "importPath": "rewindUltra1-day2-good-togglewind",
        "description": "rewindUltra1-day2-good-togglewind",
        "peekOfCode": "user32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# define the hotkeys\nkeyboard.add_hotkey(\n    \"ctrl+q\", lambda: subprocess.call([\"cmd\", \"/c\", \"notepad.exe\", \"bong.txt\"]))\nkeyboard.add_hotkey(\"ctrl+w\", lambda: subprocess.call([\"nano\", \"bong.txt\"]))\nkeyboard.add_hotkey(\"ctrl+e\", lambda: toggle_window_visibility(hwnd))\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:",
        "detail": "rewindUltra1-day2-good-togglewind",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewindUltra1-day2",
        "description": "rewindUltra1-day2",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return\n    if user32.IsWindowVisible(hwnd):\n        user32.ShowWindow(hwnd, 0)\n    else:\n        user32.ShowWindow(hwnd, 1)\n# wait for hotkey press\nkeyboard.wait()",
        "detail": "rewindUltra1-day2",
        "documentation": {}
    },
    {
        "label": "hwnd",
        "kind": 5,
        "importPath": "rewindUltra1-day2",
        "description": "rewindUltra1-day2",
        "peekOfCode": "hwnd = ctypes.windll.kernel32.GetConsoleWindow()\n# print instructions on the screen\nprint(\"Edit: ctrl+q Hide: ctrl+w\")\n# set the console title using the window handle\nuser32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# define the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: subprocess.call([\"nano\", \"bong.txt\"]))\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility(hwnd))\ndef toggle_window_visibility(hwnd):",
        "detail": "rewindUltra1-day2",
        "documentation": {}
    },
    {
        "label": "user32",
        "kind": 5,
        "importPath": "rewindUltra1-day2",
        "description": "rewindUltra1-day2",
        "peekOfCode": "user32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# define the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: subprocess.call([\"nano\", \"bong.txt\"]))\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility(hwnd))\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return\n    if user32.IsWindowVisible(hwnd):",
        "detail": "rewindUltra1-day2",
        "documentation": {}
    },
    {
        "label": "get_window_by_title",
        "kind": 2,
        "importPath": "rewindUltra1",
        "description": "rewindUltra1",
        "peekOfCode": "def get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)\n    if hwnd:\n        return hwnd\n    return None\ndef toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return",
        "detail": "rewindUltra1",
        "documentation": {}
    },
    {
        "label": "toggle_window_visibility",
        "kind": 2,
        "importPath": "rewindUltra1",
        "description": "rewindUltra1",
        "peekOfCode": "def toggle_window_visibility(hwnd):\n    \"\"\"Toggle the visibility of the window.\"\"\"\n    if not hwnd:\n        return\n    if user32.IsWindowVisible(hwnd):\n        user32.ShowWindow(hwnd, 0)\n    else:\n        user32.ShowWindow(hwnd, 1)\n# wait for hotkey press\nkeyboard.wait()",
        "detail": "rewindUltra1",
        "documentation": {}
    },
    {
        "label": "hwnd",
        "kind": 5,
        "importPath": "rewindUltra1",
        "description": "rewindUltra1",
        "peekOfCode": "hwnd = ctypes.windll.kernel32.GetConsoleWindow()\n# set the console title using the window handle\nuser32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# print instructions on the screen\nprint(\"Edit: ctrl+q Hide: ctrl+w\")\n# define the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: subprocess.call([\"nano\", \"bong.txt\"]))\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility(get_window_by_title(\"pyman1.exe\")))\ndef get_window_by_title(title):",
        "detail": "rewindUltra1",
        "documentation": {}
    },
    {
        "label": "user32",
        "kind": 5,
        "importPath": "rewindUltra1",
        "description": "rewindUltra1",
        "peekOfCode": "user32 = ctypes.WinDLL('user32')\nuser32.SetWindowTextW(hwnd, \"pyman1.exe\")\n# print instructions on the screen\nprint(\"Edit: ctrl+q Hide: ctrl+w\")\n# define the hotkeys\nkeyboard.add_hotkey(\"ctrl+q\", lambda: subprocess.call([\"nano\", \"bong.txt\"]))\nkeyboard.add_hotkey(\"ctrl+w\", lambda: toggle_window_visibility(get_window_by_title(\"pyman1.exe\")))\ndef get_window_by_title(title):\n    \"\"\"Get the window handle by title.\"\"\"\n    hwnd = user32.FindWindowW(None, title)",
        "detail": "rewindUltra1",
        "documentation": {}
    },
    {
        "label": "edit_file",
        "kind": 2,
        "importPath": "tuples copy 3",
        "description": "tuples copy 3",
        "peekOfCode": "def edit_file(hotkeys):\n    check_key = input(\"Change which key: \")\n    for hotkey in hotkeys:\n        key, action, program, id = hotkey\n        if check_key == key:\n            change_key = input(f\"\\033[34m{key}\\033[0m {action} {program}\")\n            hotkeys[hotkeys.index(hotkey)] = (change_key, action, program)\n            print (type(hotkey))\n            print(f\"Key: {key}, Name: {action}, Book: {program}\")\n        elif check_key == action:",
        "detail": "tuples copy 3",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "tuples copy 3",
        "description": "tuples copy 3",
        "peekOfCode": "hotkeys = [\n    (\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\", \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\", 1),\n    (\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\", \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\", 2)\n]\n# Add the hotkeys\n#for hotkey in hotkeys:\n#    key, action, program = hotkey\n#    keyboard.add_hotkey(key, eval(action))\nfor hotkeyy in hotkeys:\n    key, action, program, id= hotkeyy",
        "detail": "tuples copy 3",
        "documentation": {}
    },
    {
        "label": "edit_file",
        "kind": 2,
        "importPath": "tuples copy 4",
        "description": "tuples copy 4",
        "peekOfCode": "def edit_file(hotkeys):\n    check_key = input(\"Change which key: \")\n    for hotkey in hotkeys:\n        key, action, program, name, id = hotkey\n        if check_key == key:\n            change_key = input(f\"\\033[34m{key}\\033[0m {action} {program}\")\n            hotkey = (change_key, action, program)\n            print(f\"Key: {key}, Name: {action}, Book: {program}\")\n        elif check_key == action:\n            change_key = input(f\"\\033[34m{key}\\033[0m {action} {program}\")",
        "detail": "tuples copy 4",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "tuples copy 4",
        "description": "tuples copy 4",
        "peekOfCode": "hotkeys = [\n    (\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\", \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\", \"name\", \"id\"),\n    (\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\", \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\", \"name\", \"id\")\n]\n# Add the hotkeys\n#for hotkey in hotkeys:\n#    key, action, program = hotkey\n#    keyboard.add_hotkey(key, eval(action))\nfor hotkeyy in hotkeys:\n    key, action, program, name, id = hotkeyy",
        "detail": "tuples copy 4",
        "documentation": {}
    },
    {
        "label": "bg",
        "kind": 2,
        "importPath": "tuples enhance copy 2",
        "description": "tuples enhance copy 2",
        "peekOfCode": "def bg():\n    for hotkeyy in hotkeys:\n        key, action, program, name, id = hotkeyy\n        print(hotkeyy)\n        print(hotkeyy)\nbg()\n# define the edit function\n# define the edit function\ndef edit_file(hotkeys):\n    check_key = input(\"Change which key: \")",
        "detail": "tuples enhance copy 2",
        "documentation": {}
    },
    {
        "label": "edit_file",
        "kind": 2,
        "importPath": "tuples enhance copy 2",
        "description": "tuples enhance copy 2",
        "peekOfCode": "def edit_file(hotkeys):\n    check_key = input(\"Change which key: \")\n    for i, hotkey in enumerate(hotkeys):\n        key, action, program, name, id = hotkey\n        if check_key == key:\n            change_key = input(f\"\\033[34m{key}\\033[0m {action} {program}\")\n            hotkeys[i][:] = (change_key, action, program, name, id)\n            print(i)\n            print(key)\n            print(f\"Key: {key}, Name: {action}, Book: {program}\")",
        "detail": "tuples enhance copy 2",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "tuples enhance copy 2",
        "description": "tuples enhance copy 2",
        "peekOfCode": "hotkeys = [\n    [\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\", \"name\", \"id\"],\n    [\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\", \"name\", \"id\"]\n]\n# Add the hotkeys\n# for hotkey in hotkeys:\n#    key, action, program = hotkey\n#    keyboard.add_hotkey(key, eval(action))",
        "detail": "tuples enhance copy 2",
        "documentation": {}
    },
    {
        "label": "bg",
        "kind": 2,
        "importPath": "tuples enhance copy 3",
        "description": "tuples enhance copy 3",
        "peekOfCode": "def bg():\n    for hotkeyy in hotkeys:\n        key, action, program = hotkeyy\n        print(hotkeyy)\n        print(hotkeyy)\nbg()\n# define the edit function\n# define the edit function\ndef edit_file(hotkeys):\n    check_key = input(\"Change which key: \")",
        "detail": "tuples enhance copy 3",
        "documentation": {}
    },
    {
        "label": "edit_file",
        "kind": 2,
        "importPath": "tuples enhance copy 3",
        "description": "tuples enhance copy 3",
        "peekOfCode": "def edit_file(hotkeys):\n    check_key = input(\"Change which key: \")\n    for i, hotkey in enumerate(hotkeys):\n        key, action, program, = hotkey\n        if check_key == key:\n            change_key = input(f\"\\033[34m{key}\\033[0m {action} {program}\")\n            hotkeys[i][:] = (change_key, action, program, name, id)\n            print(i)\n            print(key)\n            print(f\"Key: {key}, Name: {action}, Book: {program}\")",
        "detail": "tuples enhance copy 3",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "tuples enhance copy 3",
        "description": "tuples enhance copy 3",
        "peekOfCode": "hotkeys = [\n    [\"ctrl+e\", lambda: keyboard.send(f'open {program}'),\n     \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\",],\n    [\"ctrl+r\", lambda: keyboard.send(f'open {program}'),\n     \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\",],\n    [\"ctrl+h\", lambda: subprocess.call(program), \"notepad.exe\"],\n    [\"ctrl+r\", lambda: keyboard.send(f'open {program}'),\n     \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\",]\n]\n# Add the hotkeys",
        "detail": "tuples enhance copy 3",
        "documentation": {}
    },
    {
        "label": "bg",
        "kind": 2,
        "importPath": "tuples enhance copy 4",
        "description": "tuples enhance copy 4",
        "peekOfCode": "def bg():\n    for hotkeyy in hotkeys:\n        key, action, program = hotkeyy\n        print(hotkeyy)\n        print(hotkeyy)\nbg()\n# define the edit function\n# define the edit function\ndef edit_file(hotkeys):\n    check_key = input(\"Change which key: \")",
        "detail": "tuples enhance copy 4",
        "documentation": {}
    },
    {
        "label": "edit_file",
        "kind": 2,
        "importPath": "tuples enhance copy 4",
        "description": "tuples enhance copy 4",
        "peekOfCode": "def edit_file(hotkeys):\n    check_key = input(\"Change which key: \")\n    for i, hotkey in enumerate(hotkeys):\n        key, action, program, = hotkey\n        if check_key == key:\n            change_key = input(f\"\\033[34m{key}\\033[0m {action} {program}\")\n            hotkeys[i][:] = (change_key, action, program, name, id)\n            print(i)\n            print(key)\n            print(f\"Key: {key}, Name: {action}, Book: {program}\")",
        "detail": "tuples enhance copy 4",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "tuples enhance copy 4",
        "description": "tuples enhance copy 4",
        "peekOfCode": "hotkeys = [\n    [\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\",],\n    [\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\",],\n    [\"ctrl+h\", \"lambda: subprocess.call(program)\", \"notepad.exe\"],\n]\n# Add the hotkeys\nfor hotkey in hotkeys:\n    key, action, program = hotkey",
        "detail": "tuples enhance copy 4",
        "documentation": {}
    },
    {
        "label": "get_action",
        "kind": 2,
        "importPath": "tuples enhance copy 5",
        "description": "tuples enhance copy 5",
        "peekOfCode": "def get_action(arg):\n    if arg == \"open\":\n        return lambda: subprocess.call()\n    # if arg == \"toggle\":\n       # return lambda program: subprocess.call #toggle_window_visibility_by_hwnd\nfor hotkey in hotkeys:\n    key, action, program = hotkey\n    print(key)\n    print(get_action(action))\n    print(program)",
        "detail": "tuples enhance copy 5",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "tuples enhance copy 5",
        "description": "tuples enhance copy 5",
        "peekOfCode": "hotkeys = [\n    [\"ctrl+r\", \"toggle\", \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\"],\n    [\"ctrl+h\", \"open\", \"notepad.exe\"],\n]\ndef get_action(arg):\n    if arg == \"open\":\n        return lambda: subprocess.call()\n    # if arg == \"toggle\":\n       # return lambda program: subprocess.call #toggle_window_visibility_by_hwnd\nfor hotkey in hotkeys:",
        "detail": "tuples enhance copy 5",
        "documentation": {}
    },
    {
        "label": "get_action",
        "kind": 2,
        "importPath": "tuples enhance copy 6",
        "description": "tuples enhance copy 6",
        "peekOfCode": "def get_action(argss):\n    if argss == \"open\":\n        print(action)\n        return lambda: subprocess.call(program)\n    if argss == \"toggle\":\n        return lambda: subprocess.call  # toggle_window_visibility_by_hwnd\nfor hotkey in hotkeys:\n    key, action, program = hotkey\n    keyboard.add_hotkey(key, get_action(action))\nkeyboard.wait()",
        "detail": "tuples enhance copy 6",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "tuples enhance copy 6",
        "description": "tuples enhance copy 6",
        "peekOfCode": "hotkeys = [\n    [\"ctrl+r\", \"toggle\", \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\"],\n    [\"ctrl+h\", \"open\", \"notepad.exe\"],\n]\ndef get_action(argss):\n    if argss == \"open\":\n        print(action)\n        return lambda: subprocess.call(program)\n    if argss == \"toggle\":\n        return lambda: subprocess.call  # toggle_window_visibility_by_hwnd",
        "detail": "tuples enhance copy 6",
        "documentation": {}
    },
    {
        "label": "bg",
        "kind": 2,
        "importPath": "tuples enhance copy",
        "description": "tuples enhance copy",
        "peekOfCode": "def bg():\n    for hotkeyy in hotkeys:\n        key, action, program, name, id = hotkeyy\n        print(hotkeyy)\n        print(hotkeyy)\nbg()\n# define the edit function\n# define the edit function\ndef edit_file(hotkeys):\n    check_key = input(\"Change which key: \")",
        "detail": "tuples enhance copy",
        "documentation": {}
    },
    {
        "label": "edit_file",
        "kind": 2,
        "importPath": "tuples enhance copy",
        "description": "tuples enhance copy",
        "peekOfCode": "def edit_file(hotkeys):\n    check_key = input(\"Change which key: \")\n    for i, hotkey in enumerate(hotkeys):\n        key, action, program, name, id = hotkey\n        if check_key == key:\n            change_key = input(f\"\\033[34m{key}\\033[0m {action} {program}\")\n            hotkeys[i] = (change_key, action, program, name, id)\n            print(key)\n            print(f\"Key: {key}, Name: {action}, Book: {program}\")\n            print(\"hotkey\")",
        "detail": "tuples enhance copy",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "tuples enhance copy",
        "description": "tuples enhance copy",
        "peekOfCode": "hotkeys = [\n    [\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\", \"name\", \"id\"],\n    [\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\", \"name\", \"id\"]\n]\n# Add the hotkeys\n# for hotkey in hotkeys:\n#    key, action, program = hotkey\n#    keyboard.add_hotkey(key, eval(action))",
        "detail": "tuples enhance copy",
        "documentation": {}
    },
    {
        "label": "edit_file",
        "kind": 2,
        "importPath": "tuples enhance",
        "description": "tuples enhance",
        "peekOfCode": "def edit_file(hotkeys):\n    check_key = input(\"Change which key: \")\n    for hotkey in hotkeys:\n        key, action, program, name, id = hotkey\n        if check_key == key:\n            change_key = input(f\"\\033[34m{key}\\033[0m {action} {program}\")\n            # = change_key\n            hotkey = (change_key, action, program)\n            print(key)\n            print(f\"Key: {key}, Name: {action}, Book: {program}\")",
        "detail": "tuples enhance",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "tuples enhance",
        "description": "tuples enhance",
        "peekOfCode": "hotkeys = [\n    [\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\", \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\", \"name\", \"id\"],\n    [\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\", \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\", \"name\", \"id\"]\n]\n# Add the hotkeys\n#for hotkey in hotkeys:\n#    key, action, program = hotkey\n#    keyboard.add_hotkey(key, eval(action))\nfor hotkeyy in hotkeys:\n    key, action, program, name, id = hotkeyy",
        "detail": "tuples enhance",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "tuples lesson1",
        "description": "tuples lesson1",
        "peekOfCode": "hotkeys = [\n    (\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\", \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\", 1),\n    (\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\", \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\", 2)\n]\n# Display all hotkeys\nfor i, hotkey in enumerate(hotkeys):\n    print(f\"{i}: {hotkey}\")\n# Get user input of which part of the hotkey to change\nindex = int(input(\"Enter the index of the hotkey you want to change: \"))\npart = int(input(\"Enter the part of the hotkey you want to change (0-3): \"))",
        "detail": "tuples lesson1",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "tuples lesson1",
        "description": "tuples lesson1",
        "peekOfCode": "index = int(input(\"Enter the index of the hotkey you want to change: \"))\npart = int(input(\"Enter the part of the hotkey you want to change (0-3): \"))\nvalue = input(\"Enter the new value: \")\n# Modify the hotkey\nhotkeys[index][part] = value\n# Print the modified list of tuples\nprint(hotkeys)\nkeyboard.wait()",
        "detail": "tuples lesson1",
        "documentation": {}
    },
    {
        "label": "part",
        "kind": 5,
        "importPath": "tuples lesson1",
        "description": "tuples lesson1",
        "peekOfCode": "part = int(input(\"Enter the part of the hotkey you want to change (0-3): \"))\nvalue = input(\"Enter the new value: \")\n# Modify the hotkey\nhotkeys[index][part] = value\n# Print the modified list of tuples\nprint(hotkeys)\nkeyboard.wait()",
        "detail": "tuples lesson1",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": "tuples lesson1",
        "description": "tuples lesson1",
        "peekOfCode": "value = input(\"Enter the new value: \")\n# Modify the hotkey\nhotkeys[index][part] = value\n# Print the modified list of tuples\nprint(hotkeys)\nkeyboard.wait()",
        "detail": "tuples lesson1",
        "documentation": {}
    },
    {
        "label": "hotkeys[index][part]",
        "kind": 5,
        "importPath": "tuples lesson1",
        "description": "tuples lesson1",
        "peekOfCode": "hotkeys[index][part] = value\n# Print the modified list of tuples\nprint(hotkeys)\nkeyboard.wait()",
        "detail": "tuples lesson1",
        "documentation": {}
    },
    {
        "label": "edit_file",
        "kind": 2,
        "importPath": "tuples",
        "description": "tuples",
        "peekOfCode": "def edit_file(hotkeys):\n    check_key = input(\"Change which key: \")\n    for hotkey in hotkeys:\n        key, action, program, name, id = hotkey\n        if check_key == key:\n            change_key = input(f\"\\033[34m{key}\\033[0m {action} {program}\")\n            hotkey = (change_key, action, program)\n            print(f\"Key: {key}, Name: {action}, Book: {program}\")\n        elif check_key == action:\n            change_key = input(f\"\\033[34m{key}\\033[0m {action} {program}\")",
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "tuples",
        "description": "tuples",
        "peekOfCode": "hotkeys = [\n    (\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\", \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\", \"name\", \"id\"),\n    (\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\", \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\", \"name\", \"id\")\n]\n# Add the hotkeys\n#for hotkey in hotkeys:\n#    key, action, program = hotkey\n#    keyboard.add_hotkey(key, eval(action))\nfor hotkeyy in hotkeys:\n    key, action, program, name, id = hotkeyy",
        "detail": "tuples",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "tuples_lesson_2_ch_list copy 2",
        "description": "tuples_lesson_2_ch_list copy 2",
        "peekOfCode": "hotkeys = [\n     [\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\", \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\", 1],\n     [\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\", \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\", 2]\n]\n# Get user input of which part of the hotkey to change\nindex = int(input(\"Enter the index of the hotkey you want to change: \"))\npart = int(input(\"Enter the part of the hotkey you want to change (1-4): \")) - 1\nif part == -1:\n    # Get user input for the new list or tuple\n    value = input(\"Enter the new values separated by commas: \")",
        "detail": "tuples_lesson_2_ch_list copy 2",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "tuples_lesson_2_ch_list copy 2",
        "description": "tuples_lesson_2_ch_list copy 2",
        "peekOfCode": "index = int(input(\"Enter the index of the hotkey you want to change: \"))\npart = int(input(\"Enter the part of the hotkey you want to change (1-4): \")) - 1\nif part == -1:\n    # Get user input for the new list or tuple\n    value = input(\"Enter the new values separated by commas: \")\n    # Split the input into a list\n    value = value.split(',')\n    # Convert the elements to the correct type (if necessary)\n    value = [int(x) if x.isdigit() else x for x in value]\nelse:",
        "detail": "tuples_lesson_2_ch_list copy 2",
        "documentation": {}
    },
    {
        "label": "part",
        "kind": 5,
        "importPath": "tuples_lesson_2_ch_list copy 2",
        "description": "tuples_lesson_2_ch_list copy 2",
        "peekOfCode": "part = int(input(\"Enter the part of the hotkey you want to change (1-4): \")) - 1\nif part == -1:\n    # Get user input for the new list or tuple\n    value = input(\"Enter the new values separated by commas: \")\n    # Split the input into a list\n    value = value.split(',')\n    # Convert the elements to the correct type (if necessary)\n    value = [int(x) if x.isdigit() else x for x in value]\nelse:\n    # Get user input for the new value",
        "detail": "tuples_lesson_2_ch_list copy 2",
        "documentation": {}
    },
    {
        "label": "hotkeys[index][part]",
        "kind": 5,
        "importPath": "tuples_lesson_2_ch_list copy 2",
        "description": "tuples_lesson_2_ch_list copy 2",
        "peekOfCode": "hotkeys[index][part] = value\n# Print the modified list or tuple\nprint(hotkeys[index])\nprint (\"blah\")\nprint (hotkeys)",
        "detail": "tuples_lesson_2_ch_list copy 2",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "tuples_lesson_2_ch_list copy 3",
        "description": "tuples_lesson_2_ch_list copy 3",
        "peekOfCode": "hotkeys = [\n    [\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\", 1],\n    [\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\", 2]\n]\nprint(hotkeys[1][0])\n# Get user input of which part of the hotkey to change\nindex = int(input(\"Enter the index of the hotkey you want to change: \"))\npart = int(input(\"Enter the part of the hotkey you want to change (1-4): \")) - 1",
        "detail": "tuples_lesson_2_ch_list copy 3",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "tuples_lesson_2_ch_list copy 3",
        "description": "tuples_lesson_2_ch_list copy 3",
        "peekOfCode": "index = int(input(\"Enter the index of the hotkey you want to change: \"))\npart = int(input(\"Enter the part of the hotkey you want to change (1-4): \")) - 1\nif 0 == 0:\nif part == -1:\n    print(hotkeys[index][:])\n    # Get user input for the new list or tuple\n    value = input(\"Enter the new values separated by commas: \")\n    # Split the input into a list\n    print(value)\n    value = value.split(',')",
        "detail": "tuples_lesson_2_ch_list copy 3",
        "documentation": {}
    },
    {
        "label": "part",
        "kind": 5,
        "importPath": "tuples_lesson_2_ch_list copy 3",
        "description": "tuples_lesson_2_ch_list copy 3",
        "peekOfCode": "part = int(input(\"Enter the part of the hotkey you want to change (1-4): \")) - 1\nif 0 == 0:\nif part == -1:\n    print(hotkeys[index][:])\n    # Get user input for the new list or tuple\n    value = input(\"Enter the new values separated by commas: \")\n    # Split the input into a list\n    print(value)\n    value = value.split(',')\n    # Convert the elements to the correct type (if necessary)",
        "detail": "tuples_lesson_2_ch_list copy 3",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "tuples_lesson_2_ch_list copy 4 w loop",
        "description": "tuples_lesson_2_ch_list copy 4 w loop",
        "peekOfCode": "hotkeys = [\n    [\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\", 1],\n    [\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\", 2]\n]\n# Get the index of the list or tuple to modify\nindex = int(input(\"Enter the index of the list or tuple to modify (0-1): \"))\n# Get the part of the list or tuple to modify\npart = int(input(\"Enter the part of the list or tuple to modify (0-3): \")) - 1",
        "detail": "tuples_lesson_2_ch_list copy 4 w loop",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "tuples_lesson_2_ch_list copy 4 w loop",
        "description": "tuples_lesson_2_ch_list copy 4 w loop",
        "peekOfCode": "index = int(input(\"Enter the index of the list or tuple to modify (0-1): \"))\n# Get the part of the list or tuple to modify\npart = int(input(\"Enter the part of the list or tuple to modify (0-3): \")) - 1\nwhile True:\n    if part == -1:\n        print(\"penis\")\n        print(hotkeys[index][:])\n        # Get user input for the new list or tuple\n        value = input(\"Enter the new values separated by commas: \")\n        # Split the input into a list",
        "detail": "tuples_lesson_2_ch_list copy 4 w loop",
        "documentation": {}
    },
    {
        "label": "part",
        "kind": 5,
        "importPath": "tuples_lesson_2_ch_list copy 4 w loop",
        "description": "tuples_lesson_2_ch_list copy 4 w loop",
        "peekOfCode": "part = int(input(\"Enter the part of the list or tuple to modify (0-3): \")) - 1\nwhile True:\n    if part == -1:\n        print(\"penis\")\n        print(hotkeys[index][:])\n        # Get user input for the new list or tuple\n        value = input(\"Enter the new values separated by commas: \")\n        # Split the input into a list\n        value = value.split(',')\n        # Check the length and types of the values",
        "detail": "tuples_lesson_2_ch_list copy 4 w loop",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "tuples_lesson_2_ch_list copy",
        "description": "tuples_lesson_2_ch_list copy",
        "peekOfCode": "hotkeys = [\n     [\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\", \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\", 1],\n     [\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\", \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\", 2]\n]\n# Get user input of which part of the hotkey to change\nindex = int(input(\"Enter the index of the hotkey you want to change: \"))\npart = int(input(\"Enter the part of the hotkey you want to change (0-4): \"))\nif part == 0:\n    # Get user input for the new list or tuple\n    value = input(\"Enter the new values separated by commas: \")",
        "detail": "tuples_lesson_2_ch_list copy",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "tuples_lesson_2_ch_list copy",
        "description": "tuples_lesson_2_ch_list copy",
        "peekOfCode": "index = int(input(\"Enter the index of the hotkey you want to change: \"))\npart = int(input(\"Enter the part of the hotkey you want to change (0-4): \"))\nif part == 0:\n    # Get user input for the new list or tuple\n    value = input(\"Enter the new values separated by commas: \")\n    # Split the input into a list\n    value = value.split(',')\n    # Convert the elements to the correct type (if necessary)\n    value = [int(x) if x.isdigit() else x for x in value]\nelse:",
        "detail": "tuples_lesson_2_ch_list copy",
        "documentation": {}
    },
    {
        "label": "part",
        "kind": 5,
        "importPath": "tuples_lesson_2_ch_list copy",
        "description": "tuples_lesson_2_ch_list copy",
        "peekOfCode": "part = int(input(\"Enter the part of the hotkey you want to change (0-4): \"))\nif part == 0:\n    # Get user input for the new list or tuple\n    value = input(\"Enter the new values separated by commas: \")\n    # Split the input into a list\n    value = value.split(',')\n    # Convert the elements to the correct type (if necessary)\n    value = [int(x) if x.isdigit() else x for x in value]\nelse:\n    # Get user input for the new value",
        "detail": "tuples_lesson_2_ch_list copy",
        "documentation": {}
    },
    {
        "label": "hotkeys[index][part]",
        "kind": 5,
        "importPath": "tuples_lesson_2_ch_list copy",
        "description": "tuples_lesson_2_ch_list copy",
        "peekOfCode": "hotkeys[index][part] = value\n# Print the modified list or tuple\nprint(hotkeys[index])",
        "detail": "tuples_lesson_2_ch_list copy",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "tuples_lesson_2_ch_list",
        "description": "tuples_lesson_2_ch_list",
        "peekOfCode": "hotkeys = [\n     [\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\", \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\", 1],\n     [\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\", \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\", 2]\n]\n# Get user input of which part of the hotkey to change\nindex = int(input(\"Enter the index of the hotkey you want to change: \"))\npart = int(input(\"Enter the part of the hotkey you want to change (0-3): \"))\nvalue = input(\"Enter the new value: \")\n# Modify the element of the list\nhotkeys[index][part] = value",
        "detail": "tuples_lesson_2_ch_list",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "tuples_lesson_2_ch_list",
        "description": "tuples_lesson_2_ch_list",
        "peekOfCode": "index = int(input(\"Enter the index of the hotkey you want to change: \"))\npart = int(input(\"Enter the part of the hotkey you want to change (0-3): \"))\nvalue = input(\"Enter the new value: \")\n# Modify the element of the list\nhotkeys[index][part] = value\n# Print the modified list of lists\nprint(hotkeys)",
        "detail": "tuples_lesson_2_ch_list",
        "documentation": {}
    },
    {
        "label": "part",
        "kind": 5,
        "importPath": "tuples_lesson_2_ch_list",
        "description": "tuples_lesson_2_ch_list",
        "peekOfCode": "part = int(input(\"Enter the part of the hotkey you want to change (0-3): \"))\nvalue = input(\"Enter the new value: \")\n# Modify the element of the list\nhotkeys[index][part] = value\n# Print the modified list of lists\nprint(hotkeys)",
        "detail": "tuples_lesson_2_ch_list",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": "tuples_lesson_2_ch_list",
        "description": "tuples_lesson_2_ch_list",
        "peekOfCode": "value = input(\"Enter the new value: \")\n# Modify the element of the list\nhotkeys[index][part] = value\n# Print the modified list of lists\nprint(hotkeys)",
        "detail": "tuples_lesson_2_ch_list",
        "documentation": {}
    },
    {
        "label": "hotkeys[index][part]",
        "kind": 5,
        "importPath": "tuples_lesson_2_ch_list",
        "description": "tuples_lesson_2_ch_list",
        "peekOfCode": "hotkeys[index][part] = value\n# Print the modified list of lists\nprint(hotkeys)",
        "detail": "tuples_lesson_2_ch_list",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "tuples_lesson_2_t_immut",
        "description": "tuples_lesson_2_t_immut",
        "peekOfCode": "hotkeys = [\n    (\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\", \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\", 1),\n    (\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\", \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\", 2)\n]\n# Get user input of which part of the hotkey to change\nindex = int(input(\"Enter the index of the hotkey you want to change: \"))\npart = int(input(\"Enter the part of the hotkey you want to change (0-3): \"))\nvalue = input(\"Enter the new value: \")\n# Create a new tuple with the modified values\nhotkey = hotkeys[index]",
        "detail": "tuples_lesson_2_t_immut",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "tuples_lesson_2_t_immut",
        "description": "tuples_lesson_2_t_immut",
        "peekOfCode": "index = int(input(\"Enter the index of the hotkey you want to change: \"))\npart = int(input(\"Enter the part of the hotkey you want to change (0-3): \"))\nvalue = input(\"Enter the new value: \")\n# Create a new tuple with the modified values\nhotkey = hotkeys[index]\nhotkey = hotkey[:part] + (value,) + hotkey[part+1:]\n# Replace the old tuple with the new one\nhotkeys[index] = hotkey\n# Print the modified list of tuples\nprint(hotkeys)",
        "detail": "tuples_lesson_2_t_immut",
        "documentation": {}
    },
    {
        "label": "part",
        "kind": 5,
        "importPath": "tuples_lesson_2_t_immut",
        "description": "tuples_lesson_2_t_immut",
        "peekOfCode": "part = int(input(\"Enter the part of the hotkey you want to change (0-3): \"))\nvalue = input(\"Enter the new value: \")\n# Create a new tuple with the modified values\nhotkey = hotkeys[index]\nhotkey = hotkey[:part] + (value,) + hotkey[part+1:]\n# Replace the old tuple with the new one\nhotkeys[index] = hotkey\n# Print the modified list of tuples\nprint(hotkeys)",
        "detail": "tuples_lesson_2_t_immut",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": "tuples_lesson_2_t_immut",
        "description": "tuples_lesson_2_t_immut",
        "peekOfCode": "value = input(\"Enter the new value: \")\n# Create a new tuple with the modified values\nhotkey = hotkeys[index]\nhotkey = hotkey[:part] + (value,) + hotkey[part+1:]\n# Replace the old tuple with the new one\nhotkeys[index] = hotkey\n# Print the modified list of tuples\nprint(hotkeys)",
        "detail": "tuples_lesson_2_t_immut",
        "documentation": {}
    },
    {
        "label": "hotkey",
        "kind": 5,
        "importPath": "tuples_lesson_2_t_immut",
        "description": "tuples_lesson_2_t_immut",
        "peekOfCode": "hotkey = hotkeys[index]\nhotkey = hotkey[:part] + (value,) + hotkey[part+1:]\n# Replace the old tuple with the new one\nhotkeys[index] = hotkey\n# Print the modified list of tuples\nprint(hotkeys)",
        "detail": "tuples_lesson_2_t_immut",
        "documentation": {}
    },
    {
        "label": "hotkey",
        "kind": 5,
        "importPath": "tuples_lesson_2_t_immut",
        "description": "tuples_lesson_2_t_immut",
        "peekOfCode": "hotkey = hotkey[:part] + (value,) + hotkey[part+1:]\n# Replace the old tuple with the new one\nhotkeys[index] = hotkey\n# Print the modified list of tuples\nprint(hotkeys)",
        "detail": "tuples_lesson_2_t_immut",
        "documentation": {}
    },
    {
        "label": "hotkeys[index]",
        "kind": 5,
        "importPath": "tuples_lesson_2_t_immut",
        "description": "tuples_lesson_2_t_immut",
        "peekOfCode": "hotkeys[index] = hotkey\n# Print the modified list of tuples\nprint(hotkeys)",
        "detail": "tuples_lesson_2_t_immut",
        "documentation": {}
    },
    {
        "label": "save_keys",
        "kind": 2,
        "importPath": "tuples_lesson_3 _autolazy_save_finished",
        "description": "tuples_lesson_3 _autolazy_save_finished",
        "peekOfCode": "def save_keys(hotkeys):\n    config = configparser.ConfigParser()\n    config['HOTKEYS'] = {}\n    for i, hotkey in enumerate(hotkeys):\n        config['HOTKEYS'][f'hotkey{i}'] = ','.join(hotkey)\n    with open('test02.ini', 'w') as configfile:\n        config.write(configfile)\ndef load_keys():\n    config = configparser.ConfigParser()\n    config.read('test02.ini')",
        "detail": "tuples_lesson_3 _autolazy_save_finished",
        "documentation": {}
    },
    {
        "label": "load_keys",
        "kind": 2,
        "importPath": "tuples_lesson_3 _autolazy_save_finished",
        "description": "tuples_lesson_3 _autolazy_save_finished",
        "peekOfCode": "def load_keys():\n    config = configparser.ConfigParser()\n    config.read('test02.ini')\n    hotkeys = []\n    for key in config['HOTKEYS']:\n        hotkeys.append(config['HOTKEYS'][key].split(','))\n    return hotkeys\n# Initialize the hotkeys list\nif os.path.exists('test02.ini'):\n    hotkeys = load_keys()",
        "detail": "tuples_lesson_3 _autolazy_save_finished",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "tuples_lesson_3 _autolazy_save_finished",
        "description": "tuples_lesson_3 _autolazy_save_finished",
        "peekOfCode": "index = int(input(\"Enter the index of the list or tuple to modify (0-1): \"))\n# Get the part of the list or tuple to modify\npart = int(input(\"Enter the part of the list or tuple to modify (0-3): \")) - 1\nif part == -1:\n    print(\"penis\")\n    print(hotkeys[index][:])\n    # Get user input for the new list or tuple\n    value = input(\"Enter the new values separated by commas: \")\n    # Split the input into a list\n    value = value.split(',')",
        "detail": "tuples_lesson_3 _autolazy_save_finished",
        "documentation": {}
    },
    {
        "label": "part",
        "kind": 5,
        "importPath": "tuples_lesson_3 _autolazy_save_finished",
        "description": "tuples_lesson_3 _autolazy_save_finished",
        "peekOfCode": "part = int(input(\"Enter the part of the list or tuple to modify (0-3): \")) - 1\nif part == -1:\n    print(\"penis\")\n    print(hotkeys[index][:])\n    # Get user input for the new list or tuple\n    value = input(\"Enter the new values separated by commas: \")\n    # Split the input into a list\n    value = value.split(',')\n    # Check the length and types of the values\n    if len(value) != 4:",
        "detail": "tuples_lesson_3 _autolazy_save_finished",
        "documentation": {}
    },
    {
        "label": "save",
        "kind": 2,
        "importPath": "tuples_lesson_3 _gsave",
        "description": "tuples_lesson_3 _gsave",
        "peekOfCode": "def save(hotkeys):\n    config = configparser.ConfigParser()\n    config['HOTKEYS'] = {}\n    for i, hotkey in enumerate(hotkeys):\n        config['HOTKEYS'][f'hotkey{i}'] = ','.join(hotkey)\n    with open('test0.ini', 'w') as configfile:\n        config.write(configfile)\n# Function to load the hotkeys list from a file\ndef load():\n    config = configparser.ConfigParser()",
        "detail": "tuples_lesson_3 _gsave",
        "documentation": {}
    },
    {
        "label": "load",
        "kind": 2,
        "importPath": "tuples_lesson_3 _gsave",
        "description": "tuples_lesson_3 _gsave",
        "peekOfCode": "def load():\n    config = configparser.ConfigParser()\n    config.read('test0.ini')\n    hotkeys = []\n    for key in config['HOTKEYS']:\n        hotkeys.append(config['HOTKEYS'][key].split(','))\n    return hotkeys\n# Initialize the hotkeys list\nif os.path.exists('test01.ini'):\n    hotkeys = load()",
        "detail": "tuples_lesson_3 _gsave",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "tuples_lesson_3 _gsave",
        "description": "tuples_lesson_3 _gsave",
        "peekOfCode": "index = int(input(\"Enter the index of the list or tuple to modify (0-1): \"))\n# Get the part of the list or tuple to modify\npart = int(input(\"Enter the part of the list or tuple to modify (0-3): \")) - 1\nif part == -1:\n    print(\"penis\")\n    print(hotkeys[index][:])\n    # Get user input for the new list or tuple\n    value = input(\"Enter the new values separated by commas: \")\n    # Split the input into a list\n    value = value.split(',')",
        "detail": "tuples_lesson_3 _gsave",
        "documentation": {}
    },
    {
        "label": "part",
        "kind": 5,
        "importPath": "tuples_lesson_3 _gsave",
        "description": "tuples_lesson_3 _gsave",
        "peekOfCode": "part = int(input(\"Enter the part of the list or tuple to modify (0-3): \")) - 1\nif part == -1:\n    print(\"penis\")\n    print(hotkeys[index][:])\n    # Get user input for the new list or tuple\n    value = input(\"Enter the new values separated by commas: \")\n    # Split the input into a list\n    value = value.split(',')\n    # Check the length and types of the values\n    if len(value) != 4:",
        "detail": "tuples_lesson_3 _gsave",
        "documentation": {}
    },
    {
        "label": "save",
        "kind": 2,
        "importPath": "tuples_lesson_3 _gsave_finished",
        "description": "tuples_lesson_3 _gsave_finished",
        "peekOfCode": "def save(hotkeys):\n    config = configparser.ConfigParser()\n    config['HOTKEYS'] = {}\n    for i, hotkey in enumerate(hotkeys):\n        config['HOTKEYS'][f'hotkey{i}'] = ','.join(hotkey)\n        # config['HOTKEYS'][f'hotkey{i}'] = ','.join([str(x) for x in hotkey])  # save after converting all to string\n        # config['HOTKEYS'][f'hotkey{i}'] = ','.join(hotkey[:3]) #save only 3 elements\n    with open('test01.ini', 'w') as configfile:\n        config.write(configfile)\n# Function to load the hotkeys list from a file",
        "detail": "tuples_lesson_3 _gsave_finished",
        "documentation": {}
    },
    {
        "label": "load",
        "kind": 2,
        "importPath": "tuples_lesson_3 _gsave_finished",
        "description": "tuples_lesson_3 _gsave_finished",
        "peekOfCode": "def load():\n    config = configparser.ConfigParser()\n    config.read('test01.ini')\n    hotkeys = []\n    for key in config['HOTKEYS']:\n        hotkeys.append(config['HOTKEYS'][key].split(','))\n    return hotkeys\n# Initialize the hotkeys list\nif os.path.exists('test01.ini'):\n    hotkeys = load()",
        "detail": "tuples_lesson_3 _gsave_finished",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "tuples_lesson_3 _gsave_finished",
        "description": "tuples_lesson_3 _gsave_finished",
        "peekOfCode": "index = int(input(\"Enter the index of the list or tuple to modify (0-1): \"))-1\n# Get the part of the list or tuple to modify\npart = int(input(\"Enter the part of the list or tuple to modify (0-3): \")) - 1\nif part == -1:\n    print(\"penis\")\n    print(hotkeys[index][:])\n    # Get user input for the new list or tuple\n    value = input(\"Enter the new values separated by commas: \")\n    # Split the input into a list\n    value = value.split(',')",
        "detail": "tuples_lesson_3 _gsave_finished",
        "documentation": {}
    },
    {
        "label": "part",
        "kind": 5,
        "importPath": "tuples_lesson_3 _gsave_finished",
        "description": "tuples_lesson_3 _gsave_finished",
        "peekOfCode": "part = int(input(\"Enter the part of the list or tuple to modify (0-3): \")) - 1\nif part == -1:\n    print(\"penis\")\n    print(hotkeys[index][:])\n    # Get user input for the new list or tuple\n    value = input(\"Enter the new values separated by commas: \")\n    # Split the input into a list\n    value = value.split(',')\n    # Check the length and types of the values\n    if len(value) != 4:",
        "detail": "tuples_lesson_3 _gsave_finished",
        "documentation": {}
    },
    {
        "label": "save",
        "kind": 2,
        "importPath": "tuples_lesson_3 _gsave_finished_copy",
        "description": "tuples_lesson_3 _gsave_finished_copy",
        "peekOfCode": "def save(hotkeys):\n    config = configparser.ConfigParser()\n    config['HOTKEYS'] = {}\n    for i, hotkey in enumerate(hotkeys):\n        config['HOTKEYS'][f'hotkey{i}'] = ','.join(hotkey)\n        # config['HOTKEYS'][f'hotkey{i}'] = ','.join([str(x) for x in hotkey])  # save after converting all to string\n        # config['HOTKEYS'][f'hotkey{i}'] = ','.join(hotkey[:3]) #save only 3 elements\n    with open('test01.ini', 'w') as configfile:\n        config.write(configfile)\n# Function to load the hotkeys list from a file",
        "detail": "tuples_lesson_3 _gsave_finished_copy",
        "documentation": {}
    },
    {
        "label": "load",
        "kind": 2,
        "importPath": "tuples_lesson_3 _gsave_finished_copy",
        "description": "tuples_lesson_3 _gsave_finished_copy",
        "peekOfCode": "def load():\n    config = configparser.ConfigParser()\n    config.read('test01.ini')\n    hotkeys = []\n    for key in config['HOTKEYS']:\n        hotkeys.append(config['HOTKEYS'][key].split(','))\n    return hotkeys\n# Initialize the hotkeys list\nif os.path.exists('test01.ini'):\n    hotkeys = load()",
        "detail": "tuples_lesson_3 _gsave_finished_copy",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "tuples_lesson_3 _gsave_finished_copy",
        "description": "tuples_lesson_3 _gsave_finished_copy",
        "peekOfCode": "index = int(input(\"Enter the index of the list or tuple to modify (0-1): \"))\n# Get the part of the list or tuple to modify\npart = int(input(\"Enter the part of the list or tuple to modify (0-3): \")) - 1\nif part == -1:\n    print(\"penis\")\n    print(hotkeys[index][:])\n    # Get user input for the new list or tuple\n    value = input(\"Enter the new values separated by commas: \")\n    # Split the input into a list\n    value = value.split(',')",
        "detail": "tuples_lesson_3 _gsave_finished_copy",
        "documentation": {}
    },
    {
        "label": "part",
        "kind": 5,
        "importPath": "tuples_lesson_3 _gsave_finished_copy",
        "description": "tuples_lesson_3 _gsave_finished_copy",
        "peekOfCode": "part = int(input(\"Enter the part of the list or tuple to modify (0-3): \")) - 1\nif part == -1:\n    print(\"penis\")\n    print(hotkeys[index][:])\n    # Get user input for the new list or tuple\n    value = input(\"Enter the new values separated by commas: \")\n    # Split the input into a list\n    value = value.split(',')\n    # Check the length and types of the values\n    if len(value) != 4:",
        "detail": "tuples_lesson_3 _gsave_finished_copy",
        "documentation": {}
    },
    {
        "label": "load_keys",
        "kind": 2,
        "importPath": "tuples_lesson_3 _simplesave_finished",
        "description": "tuples_lesson_3 _simplesave_finished",
        "peekOfCode": "def load_keys():\n    # Initialize the hotkeys list\n    hotkeys = []\n    # Open the file in read mode\n    with open('simptest01.ini', 'r') as f:\n        # Read the lines of the file\n        lines = f.readlines()\n        # Iterate over the lines\n        for line in lines:\n            # Split the line by the comma separator",
        "detail": "tuples_lesson_3 _simplesave_finished",
        "documentation": {}
    },
    {
        "label": "save_keys",
        "kind": 2,
        "importPath": "tuples_lesson_3 _simplesave_finished",
        "description": "tuples_lesson_3 _simplesave_finished",
        "peekOfCode": "def save_keys(hotkeys):\n    # Open the file in write mode\n    with open('simptest01.ini', 'w') as f:\n        # Iterate over the hotkeys list\n        for hotkey in hotkeys:\n            # hotkey = [str(x) for x in hotkey] #<<<<<if u need to convert to string\n            # Join the elements of the hotkey list or tuple with a comma separator\n            # and write the resulting string to the file\n            f.write(','.join(hotkey) + '\\n')\n# Initialize the hotkeys list",
        "detail": "tuples_lesson_3 _simplesave_finished",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "tuples_lesson_3 _simplesave_finished",
        "description": "tuples_lesson_3 _simplesave_finished",
        "peekOfCode": "index = int(input(\"Enter the index of the list or tuple to modify (0-1): \"))\n# Get the part of the list or tuple to modify\npart = int(input(\"Enter the part of the list or tuple to modify (0-3): \")) - 1\nif part == -1:\n    print(\"penis\")\n    print(hotkeys[index][:])\n    # Get user input for the new list or tuple\n    value = input(\"Enter the new values separated by commas: \")\n    # Split the input into a list\n    value = value.split(',')",
        "detail": "tuples_lesson_3 _simplesave_finished",
        "documentation": {}
    },
    {
        "label": "part",
        "kind": 5,
        "importPath": "tuples_lesson_3 _simplesave_finished",
        "description": "tuples_lesson_3 _simplesave_finished",
        "peekOfCode": "part = int(input(\"Enter the part of the list or tuple to modify (0-3): \")) - 1\nif part == -1:\n    print(\"penis\")\n    print(hotkeys[index][:])\n    # Get user input for the new list or tuple\n    value = input(\"Enter the new values separated by commas: \")\n    # Split the input into a list\n    value = value.split(',')\n    # Check the length and types of the values\n    if len(value) != 4:",
        "detail": "tuples_lesson_3 _simplesave_finished",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "tuples_lesson_3 _testidsinlist",
        "description": "tuples_lesson_3 _testidsinlist",
        "peekOfCode": "hotkeys = [[\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\",     \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\"],\n           [\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\",\n            \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\"]\n           ]\nfor i, hotkey in enumerate(hotkeys):\n    # hotkey.append(i)\n    hotkeys_with_id = [i, *hotkey]\n    print(hotkeys_with_id)\n    # print(i, *hotkey)\nprint(\"blah\")",
        "detail": "tuples_lesson_3 _testidsinlist",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "tuples_lesson_3",
        "description": "tuples_lesson_3",
        "peekOfCode": "hotkeys = [\n    [\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\", 1],\n    [\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\", 2]\n]\nprint(hotkeys)\n# Get the index of the list or tuple to modify\nindex = int(input(\"Enter the index of the list or tuple to modify (0-1): \"))\n# Get the part of the list or tuple to modify",
        "detail": "tuples_lesson_3",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "tuples_lesson_3",
        "description": "tuples_lesson_3",
        "peekOfCode": "index = int(input(\"Enter the index of the list or tuple to modify (0-1): \"))\n# Get the part of the list or tuple to modify\npart = int(input(\"Enter the part of the list or tuple to modify (0-3): \")) - 1\nif part == -1:\n    print(\"penis\")\n    print(hotkeys[index][:])\n    # Get user input for the new list or tuple\n    value = input(\"Enter the new values separated by commas: \")\n    # Split the input into a list\n    value = value.split(',')",
        "detail": "tuples_lesson_3",
        "documentation": {}
    },
    {
        "label": "part",
        "kind": 5,
        "importPath": "tuples_lesson_3",
        "description": "tuples_lesson_3",
        "peekOfCode": "part = int(input(\"Enter the part of the list or tuple to modify (0-3): \")) - 1\nif part == -1:\n    print(\"penis\")\n    print(hotkeys[index][:])\n    # Get user input for the new list or tuple\n    value = input(\"Enter the new values separated by commas: \")\n    # Split the input into a list\n    value = value.split(',')\n    # Check the length and types of the values\n    if len(value) != 4:",
        "detail": "tuples_lesson_3",
        "documentation": {}
    },
    {
        "label": "hotkeys",
        "kind": 5,
        "importPath": "tuples_lesson_3_ecopy",
        "description": "tuples_lesson_3_ecopy",
        "peekOfCode": "hotkeys = [\n    [\"ctrl+e\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\Mozilla Firefox\\firefox.exe\", 1],\n    [\"ctrl+r\", \"lambda: keyboard.send(f'open {program}')\",\n     \"C:\\Program Files\\VideoLAN\\VLC\\vlc.exe\", 2]\n]\n# for i in hotkeys, enumerate:\n# print(i, *hotkeys)\nfor i, hotkey in enumerate(hotkeys):\n    print(i, *hotkey)",
        "detail": "tuples_lesson_3_ecopy",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 5,
        "importPath": "tuples_lesson_3_ecopy",
        "description": "tuples_lesson_3_ecopy",
        "peekOfCode": "index = int(input(\"Enter the index of the list or tuple to modify (0-1): \"))\n# Get the part of the list or tuple to modify\npart = int(input(\"Enter the part of the list or tuple to modify (0-3): \")) - 1\nif part == -1:\n    print(\"penis\")\n    print(hotkeys[index][:])\n    # Get user input for the new list or tuple\n    value = input(\"Enter the new values separated by commas: \")\n    # Split the input into a list\n    value = value.split(',')",
        "detail": "tuples_lesson_3_ecopy",
        "documentation": {}
    },
    {
        "label": "part",
        "kind": 5,
        "importPath": "tuples_lesson_3_ecopy",
        "description": "tuples_lesson_3_ecopy",
        "peekOfCode": "part = int(input(\"Enter the part of the list or tuple to modify (0-3): \")) - 1\nif part == -1:\n    print(\"penis\")\n    print(hotkeys[index][:])\n    # Get user input for the new list or tuple\n    value = input(\"Enter the new values separated by commas: \")\n    # Split the input into a list\n    value = value.split(',')\n    # Check the length and types of the values\n    if len(value) != 4:",
        "detail": "tuples_lesson_3_ecopy",
        "documentation": {}
    }
]